// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newFbSportsMatchMarketGroup(db *gorm.DB, opts ...gen.DOOption) fbSportsMatchMarketGroup {
	_fbSportsMatchMarketGroup := fbSportsMatchMarketGroup{}

	_fbSportsMatchMarketGroup.fbSportsMatchMarketGroupDo.UseDB(db, opts...)
	_fbSportsMatchMarketGroup.fbSportsMatchMarketGroupDo.UseModel(&model.FbSportsMatchMarketGroup{})

	tableName := _fbSportsMatchMarketGroup.fbSportsMatchMarketGroupDo.TableName()
	_fbSportsMatchMarketGroup.ALL = field.NewAsterisk(tableName)
	_fbSportsMatchMarketGroup.ID = field.NewInt64(tableName, "id")
	_fbSportsMatchMarketGroup.MatchID = field.NewInt64(tableName, "match_id")
	_fbSportsMatchMarketGroup.Tag = field.NewString(tableName, "tag")
	_fbSportsMatchMarketGroup.Mty = field.NewInt64(tableName, "mty")
	_fbSportsMatchMarketGroup.Pe = field.NewInt64(tableName, "pe")
	_fbSportsMatchMarketGroup.MarketID = field.NewInt64(tableName, "market_id")
	_fbSportsMatchMarketGroup.Ss = field.NewInt64(tableName, "ss")
	_fbSportsMatchMarketGroup.Au = field.NewInt64(tableName, "au")
	_fbSportsMatchMarketGroup.Mbl = field.NewInt64(tableName, "mbl")
	_fbSportsMatchMarketGroup.Li = field.NewString(tableName, "li")
	_fbSportsMatchMarketGroup.Na = field.NewString(tableName, "na")
	_fbSportsMatchMarketGroup.Nm = field.NewString(tableName, "nm")
	_fbSportsMatchMarketGroup.Tid = field.NewInt64(tableName, "tid")
	_fbSportsMatchMarketGroup.Ty = field.NewInt64(tableName, "ty")
	_fbSportsMatchMarketGroup.Od = field.NewField(tableName, "od")
	_fbSportsMatchMarketGroup.Bod = field.NewField(tableName, "bod")
	_fbSportsMatchMarketGroup.Odt = field.NewInt64(tableName, "odt")
	_fbSportsMatchMarketGroup.Otcm = field.NewInt64(tableName, "otcm")
	_fbSportsMatchMarketGroup.CreatedAt = field.NewTime(tableName, "created_at")
	_fbSportsMatchMarketGroup.UpdatedAt = field.NewTime(tableName, "updated_at")

	_fbSportsMatchMarketGroup.fillFieldMap()

	return _fbSportsMatchMarketGroup
}

// fbSportsMatchMarketGroup 赛事盘口组集合表
type fbSportsMatchMarketGroup struct {
	fbSportsMatchMarketGroupDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键ID
	MatchID   field.Int64  // 赛事ID
	Tag       field.String // 盘口组标签
	Mty       field.Int64  // 玩法类型，如亚盘、大小球等
	Pe        field.Int64  // 玩法阶段，如上半场、全场等
	MarketID  field.Int64  // 玩法ID
	Ss        field.Int64  // 玩法销售状态 (0: 暂停, 1: 开售, -1: 未开售)
	Au        field.Int64  // 是否支持串关 (0: 不可串关, 1: 可串关)
	Mbl       field.Int64  // 是否为最优线 (用于带线玩法排序)
	Li        field.String // line值，带线玩法的线
	Na        field.String // 选项全称 (投注框展示)
	Nm        field.String // 选项简称 (赔率列表展示)
	Tid       field.Int64  // 球员玩法球队ID
	Ty        field.Int64  // 选项类型 (主、客、大、小等)
	Od        field.Field  // 欧盘赔率 (小于0代表锁盘)
	Bod       field.Field  // 赔率，返回对应类型赔率
	Odt       field.Int64  // 赔率类型
	Otcm      field.Int64  // 选项结算结果 (仅虚拟体育展示)
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (f fbSportsMatchMarketGroup) Table(newTableName string) *fbSportsMatchMarketGroup {
	f.fbSportsMatchMarketGroupDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbSportsMatchMarketGroup) As(alias string) *fbSportsMatchMarketGroup {
	f.fbSportsMatchMarketGroupDo.DO = *(f.fbSportsMatchMarketGroupDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbSportsMatchMarketGroup) updateTableName(table string) *fbSportsMatchMarketGroup {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.MatchID = field.NewInt64(table, "match_id")
	f.Tag = field.NewString(table, "tag")
	f.Mty = field.NewInt64(table, "mty")
	f.Pe = field.NewInt64(table, "pe")
	f.MarketID = field.NewInt64(table, "market_id")
	f.Ss = field.NewInt64(table, "ss")
	f.Au = field.NewInt64(table, "au")
	f.Mbl = field.NewInt64(table, "mbl")
	f.Li = field.NewString(table, "li")
	f.Na = field.NewString(table, "na")
	f.Nm = field.NewString(table, "nm")
	f.Tid = field.NewInt64(table, "tid")
	f.Ty = field.NewInt64(table, "ty")
	f.Od = field.NewField(table, "od")
	f.Bod = field.NewField(table, "bod")
	f.Odt = field.NewInt64(table, "odt")
	f.Otcm = field.NewInt64(table, "otcm")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fbSportsMatchMarketGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbSportsMatchMarketGroup) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 20)
	f.fieldMap["id"] = f.ID
	f.fieldMap["match_id"] = f.MatchID
	f.fieldMap["tag"] = f.Tag
	f.fieldMap["mty"] = f.Mty
	f.fieldMap["pe"] = f.Pe
	f.fieldMap["market_id"] = f.MarketID
	f.fieldMap["ss"] = f.Ss
	f.fieldMap["au"] = f.Au
	f.fieldMap["mbl"] = f.Mbl
	f.fieldMap["li"] = f.Li
	f.fieldMap["na"] = f.Na
	f.fieldMap["nm"] = f.Nm
	f.fieldMap["tid"] = f.Tid
	f.fieldMap["ty"] = f.Ty
	f.fieldMap["od"] = f.Od
	f.fieldMap["bod"] = f.Bod
	f.fieldMap["odt"] = f.Odt
	f.fieldMap["otcm"] = f.Otcm
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fbSportsMatchMarketGroup) clone(db *gorm.DB) fbSportsMatchMarketGroup {
	f.fbSportsMatchMarketGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbSportsMatchMarketGroup) replaceDB(db *gorm.DB) fbSportsMatchMarketGroup {
	f.fbSportsMatchMarketGroupDo.ReplaceDB(db)
	return f
}

type fbSportsMatchMarketGroupDo struct{ gen.DO }

type IFbSportsMatchMarketGroupDo interface {
	gen.SubQuery
	Debug() IFbSportsMatchMarketGroupDo
	WithContext(ctx context.Context) IFbSportsMatchMarketGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbSportsMatchMarketGroupDo
	WriteDB() IFbSportsMatchMarketGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbSportsMatchMarketGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbSportsMatchMarketGroupDo
	Not(conds ...gen.Condition) IFbSportsMatchMarketGroupDo
	Or(conds ...gen.Condition) IFbSportsMatchMarketGroupDo
	Select(conds ...field.Expr) IFbSportsMatchMarketGroupDo
	Where(conds ...gen.Condition) IFbSportsMatchMarketGroupDo
	Order(conds ...field.Expr) IFbSportsMatchMarketGroupDo
	Distinct(cols ...field.Expr) IFbSportsMatchMarketGroupDo
	Omit(cols ...field.Expr) IFbSportsMatchMarketGroupDo
	Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketGroupDo
	Group(cols ...field.Expr) IFbSportsMatchMarketGroupDo
	Having(conds ...gen.Condition) IFbSportsMatchMarketGroupDo
	Limit(limit int) IFbSportsMatchMarketGroupDo
	Offset(offset int) IFbSportsMatchMarketGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchMarketGroupDo
	Unscoped() IFbSportsMatchMarketGroupDo
	Create(values ...*model.FbSportsMatchMarketGroup) error
	CreateInBatches(values []*model.FbSportsMatchMarketGroup, batchSize int) error
	Save(values ...*model.FbSportsMatchMarketGroup) error
	First() (*model.FbSportsMatchMarketGroup, error)
	Take() (*model.FbSportsMatchMarketGroup, error)
	Last() (*model.FbSportsMatchMarketGroup, error)
	Find() ([]*model.FbSportsMatchMarketGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchMarketGroup, err error)
	FindInBatches(result *[]*model.FbSportsMatchMarketGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbSportsMatchMarketGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbSportsMatchMarketGroupDo
	Assign(attrs ...field.AssignExpr) IFbSportsMatchMarketGroupDo
	Joins(fields ...field.RelationField) IFbSportsMatchMarketGroupDo
	Preload(fields ...field.RelationField) IFbSportsMatchMarketGroupDo
	FirstOrInit() (*model.FbSportsMatchMarketGroup, error)
	FirstOrCreate() (*model.FbSportsMatchMarketGroup, error)
	FindByPage(offset int, limit int) (result []*model.FbSportsMatchMarketGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbSportsMatchMarketGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbSportsMatchMarketGroupDo) Debug() IFbSportsMatchMarketGroupDo {
	return f.withDO(f.DO.Debug())
}

func (f fbSportsMatchMarketGroupDo) WithContext(ctx context.Context) IFbSportsMatchMarketGroupDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbSportsMatchMarketGroupDo) ReadDB() IFbSportsMatchMarketGroupDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbSportsMatchMarketGroupDo) WriteDB() IFbSportsMatchMarketGroupDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbSportsMatchMarketGroupDo) Session(config *gorm.Session) IFbSportsMatchMarketGroupDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbSportsMatchMarketGroupDo) Clauses(conds ...clause.Expression) IFbSportsMatchMarketGroupDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbSportsMatchMarketGroupDo) Returning(value interface{}, columns ...string) IFbSportsMatchMarketGroupDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbSportsMatchMarketGroupDo) Not(conds ...gen.Condition) IFbSportsMatchMarketGroupDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbSportsMatchMarketGroupDo) Or(conds ...gen.Condition) IFbSportsMatchMarketGroupDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbSportsMatchMarketGroupDo) Select(conds ...field.Expr) IFbSportsMatchMarketGroupDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbSportsMatchMarketGroupDo) Where(conds ...gen.Condition) IFbSportsMatchMarketGroupDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbSportsMatchMarketGroupDo) Order(conds ...field.Expr) IFbSportsMatchMarketGroupDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbSportsMatchMarketGroupDo) Distinct(cols ...field.Expr) IFbSportsMatchMarketGroupDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbSportsMatchMarketGroupDo) Omit(cols ...field.Expr) IFbSportsMatchMarketGroupDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbSportsMatchMarketGroupDo) Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketGroupDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbSportsMatchMarketGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketGroupDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbSportsMatchMarketGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketGroupDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbSportsMatchMarketGroupDo) Group(cols ...field.Expr) IFbSportsMatchMarketGroupDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbSportsMatchMarketGroupDo) Having(conds ...gen.Condition) IFbSportsMatchMarketGroupDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbSportsMatchMarketGroupDo) Limit(limit int) IFbSportsMatchMarketGroupDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbSportsMatchMarketGroupDo) Offset(offset int) IFbSportsMatchMarketGroupDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbSportsMatchMarketGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchMarketGroupDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbSportsMatchMarketGroupDo) Unscoped() IFbSportsMatchMarketGroupDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbSportsMatchMarketGroupDo) Create(values ...*model.FbSportsMatchMarketGroup) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbSportsMatchMarketGroupDo) CreateInBatches(values []*model.FbSportsMatchMarketGroup, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbSportsMatchMarketGroupDo) Save(values ...*model.FbSportsMatchMarketGroup) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbSportsMatchMarketGroupDo) First() (*model.FbSportsMatchMarketGroup, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketGroup), nil
	}
}

func (f fbSportsMatchMarketGroupDo) Take() (*model.FbSportsMatchMarketGroup, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketGroup), nil
	}
}

func (f fbSportsMatchMarketGroupDo) Last() (*model.FbSportsMatchMarketGroup, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketGroup), nil
	}
}

func (f fbSportsMatchMarketGroupDo) Find() ([]*model.FbSportsMatchMarketGroup, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbSportsMatchMarketGroup), err
}

func (f fbSportsMatchMarketGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchMarketGroup, err error) {
	buf := make([]*model.FbSportsMatchMarketGroup, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbSportsMatchMarketGroupDo) FindInBatches(result *[]*model.FbSportsMatchMarketGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbSportsMatchMarketGroupDo) Attrs(attrs ...field.AssignExpr) IFbSportsMatchMarketGroupDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbSportsMatchMarketGroupDo) Assign(attrs ...field.AssignExpr) IFbSportsMatchMarketGroupDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbSportsMatchMarketGroupDo) Joins(fields ...field.RelationField) IFbSportsMatchMarketGroupDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbSportsMatchMarketGroupDo) Preload(fields ...field.RelationField) IFbSportsMatchMarketGroupDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbSportsMatchMarketGroupDo) FirstOrInit() (*model.FbSportsMatchMarketGroup, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketGroup), nil
	}
}

func (f fbSportsMatchMarketGroupDo) FirstOrCreate() (*model.FbSportsMatchMarketGroup, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketGroup), nil
	}
}

func (f fbSportsMatchMarketGroupDo) FindByPage(offset int, limit int) (result []*model.FbSportsMatchMarketGroup, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbSportsMatchMarketGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbSportsMatchMarketGroupDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbSportsMatchMarketGroupDo) Delete(models ...*model.FbSportsMatchMarketGroup) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbSportsMatchMarketGroupDo) withDO(do gen.Dao) *fbSportsMatchMarketGroupDo {
	f.DO = *do.(*gen.DO)
	return f
}
