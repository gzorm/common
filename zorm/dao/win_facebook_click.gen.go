// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/common/zorm/model"
)

func newWinFacebookClick(db *gorm.DB, opts ...gen.DOOption) winFacebookClick {
	_winFacebookClick := winFacebookClick{}

	_winFacebookClick.winFacebookClickDo.UseDB(db, opts...)
	_winFacebookClick.winFacebookClickDo.UseModel(&model.WinFacebookClick{})

	tableName := _winFacebookClick.winFacebookClickDo.TableName()
	_winFacebookClick.ALL = field.NewAsterisk(tableName)
	_winFacebookClick.ID = field.NewInt64(tableName, "id")
	_winFacebookClick.UID = field.NewInt64(tableName, "uid")
	_winFacebookClick.FbPid = field.NewString(tableName, "fb_pid")
	_winFacebookClick.FbCid = field.NewString(tableName, "fb_cid")
	_winFacebookClick.EventTime = field.NewInt64(tableName, "event_time")
	_winFacebookClick.EventName = field.NewString(tableName, "event_name")
	_winFacebookClick.Email = field.NewString(tableName, "email")
	_winFacebookClick.Phone = field.NewString(tableName, "phone")
	_winFacebookClick.ClientIP = field.NewString(tableName, "client_ip")
	_winFacebookClick.UserAgent = field.NewString(tableName, "user_agent")
	_winFacebookClick.OrderNo = field.NewString(tableName, "order_no")
	_winFacebookClick.Currency = field.NewString(tableName, "currency")
	_winFacebookClick.Amount = field.NewInt64(tableName, "amount")
	_winFacebookClick.EventSourceURL = field.NewString(tableName, "event_source_url")
	_winFacebookClick.ActionSource = field.NewString(tableName, "action_source")
	_winFacebookClick.Status = field.NewInt64(tableName, "status")
	_winFacebookClick.Remark = field.NewString(tableName, "remark")

	_winFacebookClick.fillFieldMap()

	return _winFacebookClick
}

type winFacebookClick struct {
	winFacebookClickDo

	ALL            field.Asterisk
	ID             field.Int64
	UID            field.Int64 // 会员序号
	FbPid          field.String
	FbCid          field.String
	EventTime      field.Int64  // 时间
	EventName      field.String // Register  Purchase  Purchase_Convert
	Email          field.String // 邮箱
	Phone          field.String // 电话
	ClientIP       field.String // 客户端IP
	UserAgent      field.String // 客户端代理
	OrderNo        field.String // 订单编号
	Currency       field.String // 10
	Amount         field.Int64  // 充值金额
	EventSourceURL field.String // 事件URL
	ActionSource   field.String // 事件来源
	Status         field.Int64  // 1==未完成  3==已完成
	Remark         field.String // 备注

	fieldMap map[string]field.Expr
}

func (w winFacebookClick) Table(newTableName string) *winFacebookClick {
	w.winFacebookClickDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winFacebookClick) As(alias string) *winFacebookClick {
	w.winFacebookClickDo.DO = *(w.winFacebookClickDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winFacebookClick) updateTableName(table string) *winFacebookClick {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.UID = field.NewInt64(table, "uid")
	w.FbPid = field.NewString(table, "fb_pid")
	w.FbCid = field.NewString(table, "fb_cid")
	w.EventTime = field.NewInt64(table, "event_time")
	w.EventName = field.NewString(table, "event_name")
	w.Email = field.NewString(table, "email")
	w.Phone = field.NewString(table, "phone")
	w.ClientIP = field.NewString(table, "client_ip")
	w.UserAgent = field.NewString(table, "user_agent")
	w.OrderNo = field.NewString(table, "order_no")
	w.Currency = field.NewString(table, "currency")
	w.Amount = field.NewInt64(table, "amount")
	w.EventSourceURL = field.NewString(table, "event_source_url")
	w.ActionSource = field.NewString(table, "action_source")
	w.Status = field.NewInt64(table, "status")
	w.Remark = field.NewString(table, "remark")

	w.fillFieldMap()

	return w
}

func (w *winFacebookClick) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winFacebookClick) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 17)
	w.fieldMap["id"] = w.ID
	w.fieldMap["uid"] = w.UID
	w.fieldMap["fb_pid"] = w.FbPid
	w.fieldMap["fb_cid"] = w.FbCid
	w.fieldMap["event_time"] = w.EventTime
	w.fieldMap["event_name"] = w.EventName
	w.fieldMap["email"] = w.Email
	w.fieldMap["phone"] = w.Phone
	w.fieldMap["client_ip"] = w.ClientIP
	w.fieldMap["user_agent"] = w.UserAgent
	w.fieldMap["order_no"] = w.OrderNo
	w.fieldMap["currency"] = w.Currency
	w.fieldMap["amount"] = w.Amount
	w.fieldMap["event_source_url"] = w.EventSourceURL
	w.fieldMap["action_source"] = w.ActionSource
	w.fieldMap["status"] = w.Status
	w.fieldMap["remark"] = w.Remark
}

func (w winFacebookClick) clone(db *gorm.DB) winFacebookClick {
	w.winFacebookClickDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winFacebookClick) replaceDB(db *gorm.DB) winFacebookClick {
	w.winFacebookClickDo.ReplaceDB(db)
	return w
}

type winFacebookClickDo struct{ gen.DO }

type IWinFacebookClickDo interface {
	gen.SubQuery
	Debug() IWinFacebookClickDo
	WithContext(ctx context.Context) IWinFacebookClickDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinFacebookClickDo
	WriteDB() IWinFacebookClickDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinFacebookClickDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinFacebookClickDo
	Not(conds ...gen.Condition) IWinFacebookClickDo
	Or(conds ...gen.Condition) IWinFacebookClickDo
	Select(conds ...field.Expr) IWinFacebookClickDo
	Where(conds ...gen.Condition) IWinFacebookClickDo
	Order(conds ...field.Expr) IWinFacebookClickDo
	Distinct(cols ...field.Expr) IWinFacebookClickDo
	Omit(cols ...field.Expr) IWinFacebookClickDo
	Join(table schema.Tabler, on ...field.Expr) IWinFacebookClickDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinFacebookClickDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinFacebookClickDo
	Group(cols ...field.Expr) IWinFacebookClickDo
	Having(conds ...gen.Condition) IWinFacebookClickDo
	Limit(limit int) IWinFacebookClickDo
	Offset(offset int) IWinFacebookClickDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinFacebookClickDo
	Unscoped() IWinFacebookClickDo
	Create(values ...*model.WinFacebookClick) error
	CreateInBatches(values []*model.WinFacebookClick, batchSize int) error
	Save(values ...*model.WinFacebookClick) error
	First() (*model.WinFacebookClick, error)
	Take() (*model.WinFacebookClick, error)
	Last() (*model.WinFacebookClick, error)
	Find() ([]*model.WinFacebookClick, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinFacebookClick, err error)
	FindInBatches(result *[]*model.WinFacebookClick, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinFacebookClick) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinFacebookClickDo
	Assign(attrs ...field.AssignExpr) IWinFacebookClickDo
	Joins(fields ...field.RelationField) IWinFacebookClickDo
	Preload(fields ...field.RelationField) IWinFacebookClickDo
	FirstOrInit() (*model.WinFacebookClick, error)
	FirstOrCreate() (*model.WinFacebookClick, error)
	FindByPage(offset int, limit int) (result []*model.WinFacebookClick, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinFacebookClickDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winFacebookClickDo) Debug() IWinFacebookClickDo {
	return w.withDO(w.DO.Debug())
}

func (w winFacebookClickDo) WithContext(ctx context.Context) IWinFacebookClickDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winFacebookClickDo) ReadDB() IWinFacebookClickDo {
	return w.Clauses(dbresolver.Read)
}

func (w winFacebookClickDo) WriteDB() IWinFacebookClickDo {
	return w.Clauses(dbresolver.Write)
}

func (w winFacebookClickDo) Session(config *gorm.Session) IWinFacebookClickDo {
	return w.withDO(w.DO.Session(config))
}

func (w winFacebookClickDo) Clauses(conds ...clause.Expression) IWinFacebookClickDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winFacebookClickDo) Returning(value interface{}, columns ...string) IWinFacebookClickDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winFacebookClickDo) Not(conds ...gen.Condition) IWinFacebookClickDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winFacebookClickDo) Or(conds ...gen.Condition) IWinFacebookClickDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winFacebookClickDo) Select(conds ...field.Expr) IWinFacebookClickDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winFacebookClickDo) Where(conds ...gen.Condition) IWinFacebookClickDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winFacebookClickDo) Order(conds ...field.Expr) IWinFacebookClickDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winFacebookClickDo) Distinct(cols ...field.Expr) IWinFacebookClickDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winFacebookClickDo) Omit(cols ...field.Expr) IWinFacebookClickDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winFacebookClickDo) Join(table schema.Tabler, on ...field.Expr) IWinFacebookClickDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winFacebookClickDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinFacebookClickDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winFacebookClickDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinFacebookClickDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winFacebookClickDo) Group(cols ...field.Expr) IWinFacebookClickDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winFacebookClickDo) Having(conds ...gen.Condition) IWinFacebookClickDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winFacebookClickDo) Limit(limit int) IWinFacebookClickDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winFacebookClickDo) Offset(offset int) IWinFacebookClickDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winFacebookClickDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinFacebookClickDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winFacebookClickDo) Unscoped() IWinFacebookClickDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winFacebookClickDo) Create(values ...*model.WinFacebookClick) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winFacebookClickDo) CreateInBatches(values []*model.WinFacebookClick, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winFacebookClickDo) Save(values ...*model.WinFacebookClick) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winFacebookClickDo) First() (*model.WinFacebookClick, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFacebookClick), nil
	}
}

func (w winFacebookClickDo) Take() (*model.WinFacebookClick, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFacebookClick), nil
	}
}

func (w winFacebookClickDo) Last() (*model.WinFacebookClick, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFacebookClick), nil
	}
}

func (w winFacebookClickDo) Find() ([]*model.WinFacebookClick, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinFacebookClick), err
}

func (w winFacebookClickDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinFacebookClick, err error) {
	buf := make([]*model.WinFacebookClick, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winFacebookClickDo) FindInBatches(result *[]*model.WinFacebookClick, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winFacebookClickDo) Attrs(attrs ...field.AssignExpr) IWinFacebookClickDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winFacebookClickDo) Assign(attrs ...field.AssignExpr) IWinFacebookClickDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winFacebookClickDo) Joins(fields ...field.RelationField) IWinFacebookClickDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winFacebookClickDo) Preload(fields ...field.RelationField) IWinFacebookClickDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winFacebookClickDo) FirstOrInit() (*model.WinFacebookClick, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFacebookClick), nil
	}
}

func (w winFacebookClickDo) FirstOrCreate() (*model.WinFacebookClick, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFacebookClick), nil
	}
}

func (w winFacebookClickDo) FindByPage(offset int, limit int) (result []*model.WinFacebookClick, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winFacebookClickDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winFacebookClickDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winFacebookClickDo) Delete(models ...*model.WinFacebookClick) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winFacebookClickDo) withDO(do gen.Dao) *winFacebookClickDo {
	w.DO = *do.(*gen.DO)
	return w
}
