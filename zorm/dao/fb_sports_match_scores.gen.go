// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newFbSportsMatchScores(db *gorm.DB, opts ...gen.DOOption) fbSportsMatchScores {
	_fbSportsMatchScores := fbSportsMatchScores{}

	_fbSportsMatchScores.fbSportsMatchScoresDo.UseDB(db, opts...)
	_fbSportsMatchScores.fbSportsMatchScoresDo.UseModel(&model.FbSportsMatchScores{})

	tableName := _fbSportsMatchScores.fbSportsMatchScoresDo.TableName()
	_fbSportsMatchScores.ALL = field.NewAsterisk(tableName)
	_fbSportsMatchScores.ID = field.NewInt64(tableName, "id")
	_fbSportsMatchScores.MatchID = field.NewInt64(tableName, "match_id")
	_fbSportsMatchScores.Pe = field.NewInt64(tableName, "pe")
	_fbSportsMatchScores.Tyg = field.NewInt64(tableName, "tyg")
	_fbSportsMatchScores.Sc = field.NewString(tableName, "sc")

	_fbSportsMatchScores.fillFieldMap()

	return _fbSportsMatchScores
}

// fbSportsMatchScores 赛事比分表
type fbSportsMatchScores struct {
	fbSportsMatchScoresDo

	ALL     field.Asterisk
	ID      field.Int64
	MatchID field.Int64  // 赛事ID，关联matches表
	Pe      field.Int64  // 赛事阶段
	Tyg     field.Int64  // 比分类型 (比分、角球、红黄牌等)
	Sc      field.String // 比分 (数组格式)

	fieldMap map[string]field.Expr
}

func (f fbSportsMatchScores) Table(newTableName string) *fbSportsMatchScores {
	f.fbSportsMatchScoresDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbSportsMatchScores) As(alias string) *fbSportsMatchScores {
	f.fbSportsMatchScoresDo.DO = *(f.fbSportsMatchScoresDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbSportsMatchScores) updateTableName(table string) *fbSportsMatchScores {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.MatchID = field.NewInt64(table, "match_id")
	f.Pe = field.NewInt64(table, "pe")
	f.Tyg = field.NewInt64(table, "tyg")
	f.Sc = field.NewString(table, "sc")

	f.fillFieldMap()

	return f
}

func (f *fbSportsMatchScores) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbSportsMatchScores) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 5)
	f.fieldMap["id"] = f.ID
	f.fieldMap["match_id"] = f.MatchID
	f.fieldMap["pe"] = f.Pe
	f.fieldMap["tyg"] = f.Tyg
	f.fieldMap["sc"] = f.Sc
}

func (f fbSportsMatchScores) clone(db *gorm.DB) fbSportsMatchScores {
	f.fbSportsMatchScoresDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbSportsMatchScores) replaceDB(db *gorm.DB) fbSportsMatchScores {
	f.fbSportsMatchScoresDo.ReplaceDB(db)
	return f
}

type fbSportsMatchScoresDo struct{ gen.DO }

type IFbSportsMatchScoresDo interface {
	gen.SubQuery
	Debug() IFbSportsMatchScoresDo
	WithContext(ctx context.Context) IFbSportsMatchScoresDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbSportsMatchScoresDo
	WriteDB() IFbSportsMatchScoresDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbSportsMatchScoresDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbSportsMatchScoresDo
	Not(conds ...gen.Condition) IFbSportsMatchScoresDo
	Or(conds ...gen.Condition) IFbSportsMatchScoresDo
	Select(conds ...field.Expr) IFbSportsMatchScoresDo
	Where(conds ...gen.Condition) IFbSportsMatchScoresDo
	Order(conds ...field.Expr) IFbSportsMatchScoresDo
	Distinct(cols ...field.Expr) IFbSportsMatchScoresDo
	Omit(cols ...field.Expr) IFbSportsMatchScoresDo
	Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchScoresDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchScoresDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchScoresDo
	Group(cols ...field.Expr) IFbSportsMatchScoresDo
	Having(conds ...gen.Condition) IFbSportsMatchScoresDo
	Limit(limit int) IFbSportsMatchScoresDo
	Offset(offset int) IFbSportsMatchScoresDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchScoresDo
	Unscoped() IFbSportsMatchScoresDo
	Create(values ...*model.FbSportsMatchScores) error
	CreateInBatches(values []*model.FbSportsMatchScores, batchSize int) error
	Save(values ...*model.FbSportsMatchScores) error
	First() (*model.FbSportsMatchScores, error)
	Take() (*model.FbSportsMatchScores, error)
	Last() (*model.FbSportsMatchScores, error)
	Find() ([]*model.FbSportsMatchScores, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchScores, err error)
	FindInBatches(result *[]*model.FbSportsMatchScores, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbSportsMatchScores) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbSportsMatchScoresDo
	Assign(attrs ...field.AssignExpr) IFbSportsMatchScoresDo
	Joins(fields ...field.RelationField) IFbSportsMatchScoresDo
	Preload(fields ...field.RelationField) IFbSportsMatchScoresDo
	FirstOrInit() (*model.FbSportsMatchScores, error)
	FirstOrCreate() (*model.FbSportsMatchScores, error)
	FindByPage(offset int, limit int) (result []*model.FbSportsMatchScores, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbSportsMatchScoresDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbSportsMatchScoresDo) Debug() IFbSportsMatchScoresDo {
	return f.withDO(f.DO.Debug())
}

func (f fbSportsMatchScoresDo) WithContext(ctx context.Context) IFbSportsMatchScoresDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbSportsMatchScoresDo) ReadDB() IFbSportsMatchScoresDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbSportsMatchScoresDo) WriteDB() IFbSportsMatchScoresDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbSportsMatchScoresDo) Session(config *gorm.Session) IFbSportsMatchScoresDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbSportsMatchScoresDo) Clauses(conds ...clause.Expression) IFbSportsMatchScoresDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbSportsMatchScoresDo) Returning(value interface{}, columns ...string) IFbSportsMatchScoresDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbSportsMatchScoresDo) Not(conds ...gen.Condition) IFbSportsMatchScoresDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbSportsMatchScoresDo) Or(conds ...gen.Condition) IFbSportsMatchScoresDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbSportsMatchScoresDo) Select(conds ...field.Expr) IFbSportsMatchScoresDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbSportsMatchScoresDo) Where(conds ...gen.Condition) IFbSportsMatchScoresDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbSportsMatchScoresDo) Order(conds ...field.Expr) IFbSportsMatchScoresDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbSportsMatchScoresDo) Distinct(cols ...field.Expr) IFbSportsMatchScoresDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbSportsMatchScoresDo) Omit(cols ...field.Expr) IFbSportsMatchScoresDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbSportsMatchScoresDo) Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchScoresDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbSportsMatchScoresDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchScoresDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbSportsMatchScoresDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchScoresDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbSportsMatchScoresDo) Group(cols ...field.Expr) IFbSportsMatchScoresDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbSportsMatchScoresDo) Having(conds ...gen.Condition) IFbSportsMatchScoresDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbSportsMatchScoresDo) Limit(limit int) IFbSportsMatchScoresDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbSportsMatchScoresDo) Offset(offset int) IFbSportsMatchScoresDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbSportsMatchScoresDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchScoresDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbSportsMatchScoresDo) Unscoped() IFbSportsMatchScoresDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbSportsMatchScoresDo) Create(values ...*model.FbSportsMatchScores) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbSportsMatchScoresDo) CreateInBatches(values []*model.FbSportsMatchScores, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbSportsMatchScoresDo) Save(values ...*model.FbSportsMatchScores) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbSportsMatchScoresDo) First() (*model.FbSportsMatchScores, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchScores), nil
	}
}

func (f fbSportsMatchScoresDo) Take() (*model.FbSportsMatchScores, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchScores), nil
	}
}

func (f fbSportsMatchScoresDo) Last() (*model.FbSportsMatchScores, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchScores), nil
	}
}

func (f fbSportsMatchScoresDo) Find() ([]*model.FbSportsMatchScores, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbSportsMatchScores), err
}

func (f fbSportsMatchScoresDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchScores, err error) {
	buf := make([]*model.FbSportsMatchScores, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbSportsMatchScoresDo) FindInBatches(result *[]*model.FbSportsMatchScores, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbSportsMatchScoresDo) Attrs(attrs ...field.AssignExpr) IFbSportsMatchScoresDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbSportsMatchScoresDo) Assign(attrs ...field.AssignExpr) IFbSportsMatchScoresDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbSportsMatchScoresDo) Joins(fields ...field.RelationField) IFbSportsMatchScoresDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbSportsMatchScoresDo) Preload(fields ...field.RelationField) IFbSportsMatchScoresDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbSportsMatchScoresDo) FirstOrInit() (*model.FbSportsMatchScores, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchScores), nil
	}
}

func (f fbSportsMatchScoresDo) FirstOrCreate() (*model.FbSportsMatchScores, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchScores), nil
	}
}

func (f fbSportsMatchScoresDo) FindByPage(offset int, limit int) (result []*model.FbSportsMatchScores, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbSportsMatchScoresDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbSportsMatchScoresDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbSportsMatchScoresDo) Delete(models ...*model.FbSportsMatchScores) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbSportsMatchScoresDo) withDO(do gen.Dao) *fbSportsMatchScoresDo {
	f.DO = *do.(*gen.DO)
	return f
}
