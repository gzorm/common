// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newActivityAlertUserConfig(db *gorm.DB, opts ...gen.DOOption) activityAlertUserConfig {
	_activityAlertUserConfig := activityAlertUserConfig{}

	_activityAlertUserConfig.activityAlertUserConfigDo.UseDB(db, opts...)
	_activityAlertUserConfig.activityAlertUserConfigDo.UseModel(&model.ActivityAlertUserConfig{})

	tableName := _activityAlertUserConfig.activityAlertUserConfigDo.TableName()
	_activityAlertUserConfig.ALL = field.NewAsterisk(tableName)
	_activityAlertUserConfig.ID = field.NewInt64(tableName, "id")
	_activityAlertUserConfig.ActivityID = field.NewInt64(tableName, "activity_id")
	_activityAlertUserConfig.UserID = field.NewInt64(tableName, "user_id")
	_activityAlertUserConfig.CreatedAt = field.NewInt64(tableName, "created_at")

	_activityAlertUserConfig.fillFieldMap()

	return _activityAlertUserConfig
}

// activityAlertUserConfig 告警不再提示配置表
type activityAlertUserConfig struct {
	activityAlertUserConfigDo

	ALL        field.Asterisk
	ID         field.Int64 // 主键
	ActivityID field.Int64 // 活动id
	UserID     field.Int64 // 用户ID
	CreatedAt  field.Int64 // 创建时间

	fieldMap map[string]field.Expr
}

func (a activityAlertUserConfig) Table(newTableName string) *activityAlertUserConfig {
	a.activityAlertUserConfigDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activityAlertUserConfig) As(alias string) *activityAlertUserConfig {
	a.activityAlertUserConfigDo.DO = *(a.activityAlertUserConfigDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activityAlertUserConfig) updateTableName(table string) *activityAlertUserConfig {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ActivityID = field.NewInt64(table, "activity_id")
	a.UserID = field.NewInt64(table, "user_id")
	a.CreatedAt = field.NewInt64(table, "created_at")

	a.fillFieldMap()

	return a
}

func (a *activityAlertUserConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activityAlertUserConfig) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["id"] = a.ID
	a.fieldMap["activity_id"] = a.ActivityID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["created_at"] = a.CreatedAt
}

func (a activityAlertUserConfig) clone(db *gorm.DB) activityAlertUserConfig {
	a.activityAlertUserConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activityAlertUserConfig) replaceDB(db *gorm.DB) activityAlertUserConfig {
	a.activityAlertUserConfigDo.ReplaceDB(db)
	return a
}

type activityAlertUserConfigDo struct{ gen.DO }

type IActivityAlertUserConfigDo interface {
	gen.SubQuery
	Debug() IActivityAlertUserConfigDo
	WithContext(ctx context.Context) IActivityAlertUserConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivityAlertUserConfigDo
	WriteDB() IActivityAlertUserConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivityAlertUserConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivityAlertUserConfigDo
	Not(conds ...gen.Condition) IActivityAlertUserConfigDo
	Or(conds ...gen.Condition) IActivityAlertUserConfigDo
	Select(conds ...field.Expr) IActivityAlertUserConfigDo
	Where(conds ...gen.Condition) IActivityAlertUserConfigDo
	Order(conds ...field.Expr) IActivityAlertUserConfigDo
	Distinct(cols ...field.Expr) IActivityAlertUserConfigDo
	Omit(cols ...field.Expr) IActivityAlertUserConfigDo
	Join(table schema.Tabler, on ...field.Expr) IActivityAlertUserConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivityAlertUserConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActivityAlertUserConfigDo
	Group(cols ...field.Expr) IActivityAlertUserConfigDo
	Having(conds ...gen.Condition) IActivityAlertUserConfigDo
	Limit(limit int) IActivityAlertUserConfigDo
	Offset(offset int) IActivityAlertUserConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityAlertUserConfigDo
	Unscoped() IActivityAlertUserConfigDo
	Create(values ...*model.ActivityAlertUserConfig) error
	CreateInBatches(values []*model.ActivityAlertUserConfig, batchSize int) error
	Save(values ...*model.ActivityAlertUserConfig) error
	First() (*model.ActivityAlertUserConfig, error)
	Take() (*model.ActivityAlertUserConfig, error)
	Last() (*model.ActivityAlertUserConfig, error)
	Find() ([]*model.ActivityAlertUserConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityAlertUserConfig, err error)
	FindInBatches(result *[]*model.ActivityAlertUserConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActivityAlertUserConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivityAlertUserConfigDo
	Assign(attrs ...field.AssignExpr) IActivityAlertUserConfigDo
	Joins(fields ...field.RelationField) IActivityAlertUserConfigDo
	Preload(fields ...field.RelationField) IActivityAlertUserConfigDo
	FirstOrInit() (*model.ActivityAlertUserConfig, error)
	FirstOrCreate() (*model.ActivityAlertUserConfig, error)
	FindByPage(offset int, limit int) (result []*model.ActivityAlertUserConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivityAlertUserConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activityAlertUserConfigDo) Debug() IActivityAlertUserConfigDo {
	return a.withDO(a.DO.Debug())
}

func (a activityAlertUserConfigDo) WithContext(ctx context.Context) IActivityAlertUserConfigDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityAlertUserConfigDo) ReadDB() IActivityAlertUserConfigDo {
	return a.Clauses(dbresolver.Read)
}

func (a activityAlertUserConfigDo) WriteDB() IActivityAlertUserConfigDo {
	return a.Clauses(dbresolver.Write)
}

func (a activityAlertUserConfigDo) Session(config *gorm.Session) IActivityAlertUserConfigDo {
	return a.withDO(a.DO.Session(config))
}

func (a activityAlertUserConfigDo) Clauses(conds ...clause.Expression) IActivityAlertUserConfigDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityAlertUserConfigDo) Returning(value interface{}, columns ...string) IActivityAlertUserConfigDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityAlertUserConfigDo) Not(conds ...gen.Condition) IActivityAlertUserConfigDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityAlertUserConfigDo) Or(conds ...gen.Condition) IActivityAlertUserConfigDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityAlertUserConfigDo) Select(conds ...field.Expr) IActivityAlertUserConfigDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityAlertUserConfigDo) Where(conds ...gen.Condition) IActivityAlertUserConfigDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityAlertUserConfigDo) Order(conds ...field.Expr) IActivityAlertUserConfigDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityAlertUserConfigDo) Distinct(cols ...field.Expr) IActivityAlertUserConfigDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityAlertUserConfigDo) Omit(cols ...field.Expr) IActivityAlertUserConfigDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityAlertUserConfigDo) Join(table schema.Tabler, on ...field.Expr) IActivityAlertUserConfigDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityAlertUserConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActivityAlertUserConfigDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityAlertUserConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IActivityAlertUserConfigDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityAlertUserConfigDo) Group(cols ...field.Expr) IActivityAlertUserConfigDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityAlertUserConfigDo) Having(conds ...gen.Condition) IActivityAlertUserConfigDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityAlertUserConfigDo) Limit(limit int) IActivityAlertUserConfigDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityAlertUserConfigDo) Offset(offset int) IActivityAlertUserConfigDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityAlertUserConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityAlertUserConfigDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityAlertUserConfigDo) Unscoped() IActivityAlertUserConfigDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activityAlertUserConfigDo) Create(values ...*model.ActivityAlertUserConfig) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityAlertUserConfigDo) CreateInBatches(values []*model.ActivityAlertUserConfig, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityAlertUserConfigDo) Save(values ...*model.ActivityAlertUserConfig) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityAlertUserConfigDo) First() (*model.ActivityAlertUserConfig, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityAlertUserConfig), nil
	}
}

func (a activityAlertUserConfigDo) Take() (*model.ActivityAlertUserConfig, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityAlertUserConfig), nil
	}
}

func (a activityAlertUserConfigDo) Last() (*model.ActivityAlertUserConfig, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityAlertUserConfig), nil
	}
}

func (a activityAlertUserConfigDo) Find() ([]*model.ActivityAlertUserConfig, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivityAlertUserConfig), err
}

func (a activityAlertUserConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityAlertUserConfig, err error) {
	buf := make([]*model.ActivityAlertUserConfig, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityAlertUserConfigDo) FindInBatches(result *[]*model.ActivityAlertUserConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityAlertUserConfigDo) Attrs(attrs ...field.AssignExpr) IActivityAlertUserConfigDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityAlertUserConfigDo) Assign(attrs ...field.AssignExpr) IActivityAlertUserConfigDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityAlertUserConfigDo) Joins(fields ...field.RelationField) IActivityAlertUserConfigDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityAlertUserConfigDo) Preload(fields ...field.RelationField) IActivityAlertUserConfigDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityAlertUserConfigDo) FirstOrInit() (*model.ActivityAlertUserConfig, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityAlertUserConfig), nil
	}
}

func (a activityAlertUserConfigDo) FirstOrCreate() (*model.ActivityAlertUserConfig, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityAlertUserConfig), nil
	}
}

func (a activityAlertUserConfigDo) FindByPage(offset int, limit int) (result []*model.ActivityAlertUserConfig, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityAlertUserConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityAlertUserConfigDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityAlertUserConfigDo) Delete(models ...*model.ActivityAlertUserConfig) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityAlertUserConfigDo) withDO(do gen.Dao) *activityAlertUserConfigDo {
	a.DO = *do.(*gen.DO)
	return a
}
