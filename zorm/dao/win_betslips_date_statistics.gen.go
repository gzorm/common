// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/common/zorm/model"
)

func newWinBetslipsDateStatistics(db *gorm.DB, opts ...gen.DOOption) winBetslipsDateStatistics {
	_winBetslipsDateStatistics := winBetslipsDateStatistics{}

	_winBetslipsDateStatistics.winBetslipsDateStatisticsDo.UseDB(db, opts...)
	_winBetslipsDateStatistics.winBetslipsDateStatisticsDo.UseModel(&model.WinBetslipsDateStatistics{})

	tableName := _winBetslipsDateStatistics.winBetslipsDateStatisticsDo.TableName()
	_winBetslipsDateStatistics.ALL = field.NewAsterisk(tableName)
	_winBetslipsDateStatistics.ID = field.NewInt64(tableName, "id")
	_winBetslipsDateStatistics.Type = field.NewInt64(tableName, "type")
	_winBetslipsDateStatistics.UID = field.NewInt64(tableName, "uid")
	_winBetslipsDateStatistics.Username = field.NewString(tableName, "username")
	_winBetslipsDateStatistics.ActivityCommission = field.NewField(tableName, "activity_commission")
	_winBetslipsDateStatistics.TotalBetAmount = field.NewField(tableName, "total_bet_amount")
	_winBetslipsDateStatistics.CoinBefore = field.NewField(tableName, "coin_before")
	_winBetslipsDateStatistics.ReferID = field.NewInt64(tableName, "refer_id")
	_winBetslipsDateStatistics.ActicityName = field.NewString(tableName, "acticity_name")
	_winBetslipsDateStatistics.ActicityLadderName = field.NewString(tableName, "acticity_ladder_name")
	_winBetslipsDateStatistics.ActicityRewardConfig = field.NewField(tableName, "acticity_reward_config")
	_winBetslipsDateStatistics.Status = field.NewInt64(tableName, "status")
	_winBetslipsDateStatistics.Date = field.NewString(tableName, "date")
	_winBetslipsDateStatistics.CreatedAt = field.NewInt64(tableName, "created_at")
	_winBetslipsDateStatistics.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_winBetslipsDateStatistics.fillFieldMap()

	return _winBetslipsDateStatistics
}

// winBetslipsDateStatistics 打码量统计表，记录用户每日/每周/每月的打码量
type winBetslipsDateStatistics struct {
	winBetslipsDateStatisticsDo

	ALL                  field.Asterisk
	ID                   field.Int64  // 自增主键
	Type                 field.Int64  // 类型: 1=每日反水,2=周返利,3=月返利
	UID                  field.Int64  // 用户ID
	Username             field.String // 用户名
	ActivityCommission   field.Field  // 活动佣金
	TotalBetAmount       field.Field  // 上一个周期下注总金额
	CoinBefore           field.Field  // 钱包实时金额
	ReferID              field.Int64  // 关联ID(活动表ID)
	ActicityName         field.String // 活动名称
	ActicityLadderName   field.String // 活动内置配置名称
	ActicityRewardConfig field.Field  // 活动奖励/活动奖励百分比
	Status               field.Int64  // 状态: 1-成功 2-失败
	Date                 field.String // 按天时间，格式为Y-m-d
	CreatedAt            field.Int64  // 创建时间，Unix时间戳
	UpdatedAt            field.Int64  // 更新时间，Unix时间戳

	fieldMap map[string]field.Expr
}

func (w winBetslipsDateStatistics) Table(newTableName string) *winBetslipsDateStatistics {
	w.winBetslipsDateStatisticsDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winBetslipsDateStatistics) As(alias string) *winBetslipsDateStatistics {
	w.winBetslipsDateStatisticsDo.DO = *(w.winBetslipsDateStatisticsDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winBetslipsDateStatistics) updateTableName(table string) *winBetslipsDateStatistics {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.Type = field.NewInt64(table, "type")
	w.UID = field.NewInt64(table, "uid")
	w.Username = field.NewString(table, "username")
	w.ActivityCommission = field.NewField(table, "activity_commission")
	w.TotalBetAmount = field.NewField(table, "total_bet_amount")
	w.CoinBefore = field.NewField(table, "coin_before")
	w.ReferID = field.NewInt64(table, "refer_id")
	w.ActicityName = field.NewString(table, "acticity_name")
	w.ActicityLadderName = field.NewString(table, "acticity_ladder_name")
	w.ActicityRewardConfig = field.NewField(table, "acticity_reward_config")
	w.Status = field.NewInt64(table, "status")
	w.Date = field.NewString(table, "date")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *winBetslipsDateStatistics) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winBetslipsDateStatistics) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 15)
	w.fieldMap["id"] = w.ID
	w.fieldMap["type"] = w.Type
	w.fieldMap["uid"] = w.UID
	w.fieldMap["username"] = w.Username
	w.fieldMap["activity_commission"] = w.ActivityCommission
	w.fieldMap["total_bet_amount"] = w.TotalBetAmount
	w.fieldMap["coin_before"] = w.CoinBefore
	w.fieldMap["refer_id"] = w.ReferID
	w.fieldMap["acticity_name"] = w.ActicityName
	w.fieldMap["acticity_ladder_name"] = w.ActicityLadderName
	w.fieldMap["acticity_reward_config"] = w.ActicityRewardConfig
	w.fieldMap["status"] = w.Status
	w.fieldMap["date"] = w.Date
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w winBetslipsDateStatistics) clone(db *gorm.DB) winBetslipsDateStatistics {
	w.winBetslipsDateStatisticsDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winBetslipsDateStatistics) replaceDB(db *gorm.DB) winBetslipsDateStatistics {
	w.winBetslipsDateStatisticsDo.ReplaceDB(db)
	return w
}

type winBetslipsDateStatisticsDo struct{ gen.DO }

type IWinBetslipsDateStatisticsDo interface {
	gen.SubQuery
	Debug() IWinBetslipsDateStatisticsDo
	WithContext(ctx context.Context) IWinBetslipsDateStatisticsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinBetslipsDateStatisticsDo
	WriteDB() IWinBetslipsDateStatisticsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinBetslipsDateStatisticsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinBetslipsDateStatisticsDo
	Not(conds ...gen.Condition) IWinBetslipsDateStatisticsDo
	Or(conds ...gen.Condition) IWinBetslipsDateStatisticsDo
	Select(conds ...field.Expr) IWinBetslipsDateStatisticsDo
	Where(conds ...gen.Condition) IWinBetslipsDateStatisticsDo
	Order(conds ...field.Expr) IWinBetslipsDateStatisticsDo
	Distinct(cols ...field.Expr) IWinBetslipsDateStatisticsDo
	Omit(cols ...field.Expr) IWinBetslipsDateStatisticsDo
	Join(table schema.Tabler, on ...field.Expr) IWinBetslipsDateStatisticsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinBetslipsDateStatisticsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinBetslipsDateStatisticsDo
	Group(cols ...field.Expr) IWinBetslipsDateStatisticsDo
	Having(conds ...gen.Condition) IWinBetslipsDateStatisticsDo
	Limit(limit int) IWinBetslipsDateStatisticsDo
	Offset(offset int) IWinBetslipsDateStatisticsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinBetslipsDateStatisticsDo
	Unscoped() IWinBetslipsDateStatisticsDo
	Create(values ...*model.WinBetslipsDateStatistics) error
	CreateInBatches(values []*model.WinBetslipsDateStatistics, batchSize int) error
	Save(values ...*model.WinBetslipsDateStatistics) error
	First() (*model.WinBetslipsDateStatistics, error)
	Take() (*model.WinBetslipsDateStatistics, error)
	Last() (*model.WinBetslipsDateStatistics, error)
	Find() ([]*model.WinBetslipsDateStatistics, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinBetslipsDateStatistics, err error)
	FindInBatches(result *[]*model.WinBetslipsDateStatistics, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinBetslipsDateStatistics) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinBetslipsDateStatisticsDo
	Assign(attrs ...field.AssignExpr) IWinBetslipsDateStatisticsDo
	Joins(fields ...field.RelationField) IWinBetslipsDateStatisticsDo
	Preload(fields ...field.RelationField) IWinBetslipsDateStatisticsDo
	FirstOrInit() (*model.WinBetslipsDateStatistics, error)
	FirstOrCreate() (*model.WinBetslipsDateStatistics, error)
	FindByPage(offset int, limit int) (result []*model.WinBetslipsDateStatistics, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinBetslipsDateStatisticsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winBetslipsDateStatisticsDo) Debug() IWinBetslipsDateStatisticsDo {
	return w.withDO(w.DO.Debug())
}

func (w winBetslipsDateStatisticsDo) WithContext(ctx context.Context) IWinBetslipsDateStatisticsDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winBetslipsDateStatisticsDo) ReadDB() IWinBetslipsDateStatisticsDo {
	return w.Clauses(dbresolver.Read)
}

func (w winBetslipsDateStatisticsDo) WriteDB() IWinBetslipsDateStatisticsDo {
	return w.Clauses(dbresolver.Write)
}

func (w winBetslipsDateStatisticsDo) Session(config *gorm.Session) IWinBetslipsDateStatisticsDo {
	return w.withDO(w.DO.Session(config))
}

func (w winBetslipsDateStatisticsDo) Clauses(conds ...clause.Expression) IWinBetslipsDateStatisticsDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winBetslipsDateStatisticsDo) Returning(value interface{}, columns ...string) IWinBetslipsDateStatisticsDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winBetslipsDateStatisticsDo) Not(conds ...gen.Condition) IWinBetslipsDateStatisticsDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winBetslipsDateStatisticsDo) Or(conds ...gen.Condition) IWinBetslipsDateStatisticsDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winBetslipsDateStatisticsDo) Select(conds ...field.Expr) IWinBetslipsDateStatisticsDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winBetslipsDateStatisticsDo) Where(conds ...gen.Condition) IWinBetslipsDateStatisticsDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winBetslipsDateStatisticsDo) Order(conds ...field.Expr) IWinBetslipsDateStatisticsDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winBetslipsDateStatisticsDo) Distinct(cols ...field.Expr) IWinBetslipsDateStatisticsDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winBetslipsDateStatisticsDo) Omit(cols ...field.Expr) IWinBetslipsDateStatisticsDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winBetslipsDateStatisticsDo) Join(table schema.Tabler, on ...field.Expr) IWinBetslipsDateStatisticsDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winBetslipsDateStatisticsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinBetslipsDateStatisticsDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winBetslipsDateStatisticsDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinBetslipsDateStatisticsDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winBetslipsDateStatisticsDo) Group(cols ...field.Expr) IWinBetslipsDateStatisticsDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winBetslipsDateStatisticsDo) Having(conds ...gen.Condition) IWinBetslipsDateStatisticsDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winBetslipsDateStatisticsDo) Limit(limit int) IWinBetslipsDateStatisticsDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winBetslipsDateStatisticsDo) Offset(offset int) IWinBetslipsDateStatisticsDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winBetslipsDateStatisticsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinBetslipsDateStatisticsDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winBetslipsDateStatisticsDo) Unscoped() IWinBetslipsDateStatisticsDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winBetslipsDateStatisticsDo) Create(values ...*model.WinBetslipsDateStatistics) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winBetslipsDateStatisticsDo) CreateInBatches(values []*model.WinBetslipsDateStatistics, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winBetslipsDateStatisticsDo) Save(values ...*model.WinBetslipsDateStatistics) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winBetslipsDateStatisticsDo) First() (*model.WinBetslipsDateStatistics, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBetslipsDateStatistics), nil
	}
}

func (w winBetslipsDateStatisticsDo) Take() (*model.WinBetslipsDateStatistics, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBetslipsDateStatistics), nil
	}
}

func (w winBetslipsDateStatisticsDo) Last() (*model.WinBetslipsDateStatistics, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBetslipsDateStatistics), nil
	}
}

func (w winBetslipsDateStatisticsDo) Find() ([]*model.WinBetslipsDateStatistics, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinBetslipsDateStatistics), err
}

func (w winBetslipsDateStatisticsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinBetslipsDateStatistics, err error) {
	buf := make([]*model.WinBetslipsDateStatistics, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winBetslipsDateStatisticsDo) FindInBatches(result *[]*model.WinBetslipsDateStatistics, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winBetslipsDateStatisticsDo) Attrs(attrs ...field.AssignExpr) IWinBetslipsDateStatisticsDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winBetslipsDateStatisticsDo) Assign(attrs ...field.AssignExpr) IWinBetslipsDateStatisticsDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winBetslipsDateStatisticsDo) Joins(fields ...field.RelationField) IWinBetslipsDateStatisticsDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winBetslipsDateStatisticsDo) Preload(fields ...field.RelationField) IWinBetslipsDateStatisticsDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winBetslipsDateStatisticsDo) FirstOrInit() (*model.WinBetslipsDateStatistics, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBetslipsDateStatistics), nil
	}
}

func (w winBetslipsDateStatisticsDo) FirstOrCreate() (*model.WinBetslipsDateStatistics, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBetslipsDateStatistics), nil
	}
}

func (w winBetslipsDateStatisticsDo) FindByPage(offset int, limit int) (result []*model.WinBetslipsDateStatistics, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winBetslipsDateStatisticsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winBetslipsDateStatisticsDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winBetslipsDateStatisticsDo) Delete(models ...*model.WinBetslipsDateStatistics) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winBetslipsDateStatisticsDo) withDO(do gen.Dao) *winBetslipsDateStatisticsDo {
	w.DO = *do.(*gen.DO)
	return w
}
