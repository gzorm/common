// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newWinCoinRateM2(db *gorm.DB, opts ...gen.DOOption) winCoinRateM2 {
	_winCoinRateM2 := winCoinRateM2{}

	_winCoinRateM2.winCoinRateM2Do.UseDB(db, opts...)
	_winCoinRateM2.winCoinRateM2Do.UseModel(&model.WinCoinRateM2{})

	tableName := _winCoinRateM2.winCoinRateM2Do.TableName()
	_winCoinRateM2.ALL = field.NewAsterisk(tableName)
	_winCoinRateM2.ID = field.NewInt64(tableName, "id")
	_winCoinRateM2.OriginalCurrency = field.NewString(tableName, "original_currency")
	_winCoinRateM2.TransferCurrency = field.NewString(tableName, "transfer_currency")
	_winCoinRateM2.Rate = field.NewField(tableName, "rate")
	_winCoinRateM2.Status = field.NewInt64(tableName, "status")
	_winCoinRateM2.CreatedAt = field.NewInt64(tableName, "created_at")
	_winCoinRateM2.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_winCoinRateM2.OperatorName = field.NewString(tableName, "operator_name")

	_winCoinRateM2.fillFieldMap()

	return _winCoinRateM2
}

// winCoinRateM2 汇率表
type winCoinRateM2 struct {
	winCoinRateM2Do

	ALL              field.Asterisk
	ID               field.Int64  // ID
	OriginalCurrency field.String // 原始币种
	TransferCurrency field.String // 转换币种
	Rate             field.Field  // 汇率
	Status           field.Int64  // 状态：0-关闭；1-开启
	CreatedAt        field.Int64  // 创建时间
	UpdatedAt        field.Int64  // 修改时间
	OperatorName     field.String // 操作人姓名

	fieldMap map[string]field.Expr
}

func (w winCoinRateM2) Table(newTableName string) *winCoinRateM2 {
	w.winCoinRateM2Do.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winCoinRateM2) As(alias string) *winCoinRateM2 {
	w.winCoinRateM2Do.DO = *(w.winCoinRateM2Do.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winCoinRateM2) updateTableName(table string) *winCoinRateM2 {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.OriginalCurrency = field.NewString(table, "original_currency")
	w.TransferCurrency = field.NewString(table, "transfer_currency")
	w.Rate = field.NewField(table, "rate")
	w.Status = field.NewInt64(table, "status")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")
	w.OperatorName = field.NewString(table, "operator_name")

	w.fillFieldMap()

	return w
}

func (w *winCoinRateM2) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winCoinRateM2) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 8)
	w.fieldMap["id"] = w.ID
	w.fieldMap["original_currency"] = w.OriginalCurrency
	w.fieldMap["transfer_currency"] = w.TransferCurrency
	w.fieldMap["rate"] = w.Rate
	w.fieldMap["status"] = w.Status
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["operator_name"] = w.OperatorName
}

func (w winCoinRateM2) clone(db *gorm.DB) winCoinRateM2 {
	w.winCoinRateM2Do.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winCoinRateM2) replaceDB(db *gorm.DB) winCoinRateM2 {
	w.winCoinRateM2Do.ReplaceDB(db)
	return w
}

type winCoinRateM2Do struct{ gen.DO }

type IWinCoinRateM2Do interface {
	gen.SubQuery
	Debug() IWinCoinRateM2Do
	WithContext(ctx context.Context) IWinCoinRateM2Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinCoinRateM2Do
	WriteDB() IWinCoinRateM2Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinCoinRateM2Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinCoinRateM2Do
	Not(conds ...gen.Condition) IWinCoinRateM2Do
	Or(conds ...gen.Condition) IWinCoinRateM2Do
	Select(conds ...field.Expr) IWinCoinRateM2Do
	Where(conds ...gen.Condition) IWinCoinRateM2Do
	Order(conds ...field.Expr) IWinCoinRateM2Do
	Distinct(cols ...field.Expr) IWinCoinRateM2Do
	Omit(cols ...field.Expr) IWinCoinRateM2Do
	Join(table schema.Tabler, on ...field.Expr) IWinCoinRateM2Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinCoinRateM2Do
	RightJoin(table schema.Tabler, on ...field.Expr) IWinCoinRateM2Do
	Group(cols ...field.Expr) IWinCoinRateM2Do
	Having(conds ...gen.Condition) IWinCoinRateM2Do
	Limit(limit int) IWinCoinRateM2Do
	Offset(offset int) IWinCoinRateM2Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinCoinRateM2Do
	Unscoped() IWinCoinRateM2Do
	Create(values ...*model.WinCoinRateM2) error
	CreateInBatches(values []*model.WinCoinRateM2, batchSize int) error
	Save(values ...*model.WinCoinRateM2) error
	First() (*model.WinCoinRateM2, error)
	Take() (*model.WinCoinRateM2, error)
	Last() (*model.WinCoinRateM2, error)
	Find() ([]*model.WinCoinRateM2, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinCoinRateM2, err error)
	FindInBatches(result *[]*model.WinCoinRateM2, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinCoinRateM2) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinCoinRateM2Do
	Assign(attrs ...field.AssignExpr) IWinCoinRateM2Do
	Joins(fields ...field.RelationField) IWinCoinRateM2Do
	Preload(fields ...field.RelationField) IWinCoinRateM2Do
	FirstOrInit() (*model.WinCoinRateM2, error)
	FirstOrCreate() (*model.WinCoinRateM2, error)
	FindByPage(offset int, limit int) (result []*model.WinCoinRateM2, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinCoinRateM2Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winCoinRateM2Do) Debug() IWinCoinRateM2Do {
	return w.withDO(w.DO.Debug())
}

func (w winCoinRateM2Do) WithContext(ctx context.Context) IWinCoinRateM2Do {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winCoinRateM2Do) ReadDB() IWinCoinRateM2Do {
	return w.Clauses(dbresolver.Read)
}

func (w winCoinRateM2Do) WriteDB() IWinCoinRateM2Do {
	return w.Clauses(dbresolver.Write)
}

func (w winCoinRateM2Do) Session(config *gorm.Session) IWinCoinRateM2Do {
	return w.withDO(w.DO.Session(config))
}

func (w winCoinRateM2Do) Clauses(conds ...clause.Expression) IWinCoinRateM2Do {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winCoinRateM2Do) Returning(value interface{}, columns ...string) IWinCoinRateM2Do {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winCoinRateM2Do) Not(conds ...gen.Condition) IWinCoinRateM2Do {
	return w.withDO(w.DO.Not(conds...))
}

func (w winCoinRateM2Do) Or(conds ...gen.Condition) IWinCoinRateM2Do {
	return w.withDO(w.DO.Or(conds...))
}

func (w winCoinRateM2Do) Select(conds ...field.Expr) IWinCoinRateM2Do {
	return w.withDO(w.DO.Select(conds...))
}

func (w winCoinRateM2Do) Where(conds ...gen.Condition) IWinCoinRateM2Do {
	return w.withDO(w.DO.Where(conds...))
}

func (w winCoinRateM2Do) Order(conds ...field.Expr) IWinCoinRateM2Do {
	return w.withDO(w.DO.Order(conds...))
}

func (w winCoinRateM2Do) Distinct(cols ...field.Expr) IWinCoinRateM2Do {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winCoinRateM2Do) Omit(cols ...field.Expr) IWinCoinRateM2Do {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winCoinRateM2Do) Join(table schema.Tabler, on ...field.Expr) IWinCoinRateM2Do {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winCoinRateM2Do) LeftJoin(table schema.Tabler, on ...field.Expr) IWinCoinRateM2Do {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winCoinRateM2Do) RightJoin(table schema.Tabler, on ...field.Expr) IWinCoinRateM2Do {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winCoinRateM2Do) Group(cols ...field.Expr) IWinCoinRateM2Do {
	return w.withDO(w.DO.Group(cols...))
}

func (w winCoinRateM2Do) Having(conds ...gen.Condition) IWinCoinRateM2Do {
	return w.withDO(w.DO.Having(conds...))
}

func (w winCoinRateM2Do) Limit(limit int) IWinCoinRateM2Do {
	return w.withDO(w.DO.Limit(limit))
}

func (w winCoinRateM2Do) Offset(offset int) IWinCoinRateM2Do {
	return w.withDO(w.DO.Offset(offset))
}

func (w winCoinRateM2Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinCoinRateM2Do {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winCoinRateM2Do) Unscoped() IWinCoinRateM2Do {
	return w.withDO(w.DO.Unscoped())
}

func (w winCoinRateM2Do) Create(values ...*model.WinCoinRateM2) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winCoinRateM2Do) CreateInBatches(values []*model.WinCoinRateM2, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winCoinRateM2Do) Save(values ...*model.WinCoinRateM2) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winCoinRateM2Do) First() (*model.WinCoinRateM2, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinRateM2), nil
	}
}

func (w winCoinRateM2Do) Take() (*model.WinCoinRateM2, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinRateM2), nil
	}
}

func (w winCoinRateM2Do) Last() (*model.WinCoinRateM2, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinRateM2), nil
	}
}

func (w winCoinRateM2Do) Find() ([]*model.WinCoinRateM2, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinCoinRateM2), err
}

func (w winCoinRateM2Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinCoinRateM2, err error) {
	buf := make([]*model.WinCoinRateM2, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winCoinRateM2Do) FindInBatches(result *[]*model.WinCoinRateM2, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winCoinRateM2Do) Attrs(attrs ...field.AssignExpr) IWinCoinRateM2Do {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winCoinRateM2Do) Assign(attrs ...field.AssignExpr) IWinCoinRateM2Do {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winCoinRateM2Do) Joins(fields ...field.RelationField) IWinCoinRateM2Do {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winCoinRateM2Do) Preload(fields ...field.RelationField) IWinCoinRateM2Do {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winCoinRateM2Do) FirstOrInit() (*model.WinCoinRateM2, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinRateM2), nil
	}
}

func (w winCoinRateM2Do) FirstOrCreate() (*model.WinCoinRateM2, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinRateM2), nil
	}
}

func (w winCoinRateM2Do) FindByPage(offset int, limit int) (result []*model.WinCoinRateM2, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winCoinRateM2Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winCoinRateM2Do) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winCoinRateM2Do) Delete(models ...*model.WinCoinRateM2) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winCoinRateM2Do) withDO(do gen.Dao) *winCoinRateM2Do {
	w.DO = *do.(*gen.DO)
	return w
}
