// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newFbSportsMatchRecommendPlayOptions(db *gorm.DB, opts ...gen.DOOption) fbSportsMatchRecommendPlayOptions {
	_fbSportsMatchRecommendPlayOptions := fbSportsMatchRecommendPlayOptions{}

	_fbSportsMatchRecommendPlayOptions.fbSportsMatchRecommendPlayOptionsDo.UseDB(db, opts...)
	_fbSportsMatchRecommendPlayOptions.fbSportsMatchRecommendPlayOptionsDo.UseModel(&model.FbSportsMatchRecommendPlayOptions{})

	tableName := _fbSportsMatchRecommendPlayOptions.fbSportsMatchRecommendPlayOptionsDo.TableName()
	_fbSportsMatchRecommendPlayOptions.ALL = field.NewAsterisk(tableName)
	_fbSportsMatchRecommendPlayOptions.ID = field.NewInt64(tableName, "id")
	_fbSportsMatchRecommendPlayOptions.MarketID = field.NewInt64(tableName, "market_id")
	_fbSportsMatchRecommendPlayOptions.RecommendReason = field.NewString(tableName, "recommend_reason")
	_fbSportsMatchRecommendPlayOptions.MarketGroupName = field.NewString(tableName, "market_group_name")
	_fbSportsMatchRecommendPlayOptions.SaleStatus = field.NewInt64(tableName, "sale_status")
	_fbSportsMatchRecommendPlayOptions.IsParlaySupported = field.NewInt64(tableName, "is_parlay_supported")
	_fbSportsMatchRecommendPlayOptions.IsBestLine = field.NewInt64(tableName, "is_best_line")
	_fbSportsMatchRecommendPlayOptions.LineValue = field.NewString(tableName, "line_value")
	_fbSportsMatchRecommendPlayOptions.MarketType = field.NewInt64(tableName, "market_type")
	_fbSportsMatchRecommendPlayOptions.OptionFullName = field.NewString(tableName, "option_full_name")
	_fbSportsMatchRecommendPlayOptions.OptionShortName = field.NewString(tableName, "option_short_name")
	_fbSportsMatchRecommendPlayOptions.TeamID = field.NewInt64(tableName, "team_id")
	_fbSportsMatchRecommendPlayOptions.OptionType = field.NewInt64(tableName, "option_type")
	_fbSportsMatchRecommendPlayOptions.EuropeanOdds = field.NewField(tableName, "european_odds")
	_fbSportsMatchRecommendPlayOptions.BaseOdds = field.NewField(tableName, "base_odds")
	_fbSportsMatchRecommendPlayOptions.OddsFormatType = field.NewInt64(tableName, "odds_format_type")
	_fbSportsMatchRecommendPlayOptions.OutcomeResult = field.NewInt64(tableName, "outcome_result")
	_fbSportsMatchRecommendPlayOptions.LegacyLine = field.NewString(tableName, "legacy_line")
	_fbSportsMatchRecommendPlayOptions.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbSportsMatchRecommendPlayOptions.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_fbSportsMatchRecommendPlayOptions.fillFieldMap()

	return _fbSportsMatchRecommendPlayOptions
}

// fbSportsMatchRecommendPlayOptions 玩法推荐选项表
type fbSportsMatchRecommendPlayOptions struct {
	fbSportsMatchRecommendPlayOptionsDo

	ALL               field.Asterisk
	ID                field.Int64  // 自增ID
	MarketID          field.Int64  // 玩法ID
	RecommendReason   field.String // 推荐原因
	MarketGroupName   field.String // 盘口组名
	SaleStatus        field.Int64  // 玩法销售状态，0暂停，1开售，-1未开售
	IsParlaySupported field.Int64  // 是否支持串关，0 不可串关，1 可串关
	IsBestLine        field.Int64  // 是否为最优线，带线玩法可用该字段进行排序，从小到大
	LineValue         field.String // line值，带线玩法的线，例如大小球2.5线
	MarketType        field.Int64  // 玩法类型，如亚盘、大小球等
	OptionFullName    field.String // 选项全称，投注框一般用全称展示
	OptionShortName   field.String // 选项简称(全名or简名)
	TeamID            field.Int64  // 球员玩法球队ID
	OptionType        field.Int64  // 选项类型，主、客、大、小等
	EuropeanOdds      field.Field  // 欧盘赔率，赔率小于0代表锁盘
	BaseOdds          field.Field  // 赔率，根据请求参数返回对应类型赔率
	OddsFormatType    field.Int64  // 赔率类型
	OutcomeResult     field.Int64  // 选项结算结果，仅虚拟体育展示
	LegacyLine        field.String // 带线玩法的线，老版本兼容字段
	CreatedAt         field.Int64  // 创建时间
	UpdatedAt         field.Int64  // 更新时间

	fieldMap map[string]field.Expr
}

func (f fbSportsMatchRecommendPlayOptions) Table(newTableName string) *fbSportsMatchRecommendPlayOptions {
	f.fbSportsMatchRecommendPlayOptionsDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbSportsMatchRecommendPlayOptions) As(alias string) *fbSportsMatchRecommendPlayOptions {
	f.fbSportsMatchRecommendPlayOptionsDo.DO = *(f.fbSportsMatchRecommendPlayOptionsDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbSportsMatchRecommendPlayOptions) updateTableName(table string) *fbSportsMatchRecommendPlayOptions {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.MarketID = field.NewInt64(table, "market_id")
	f.RecommendReason = field.NewString(table, "recommend_reason")
	f.MarketGroupName = field.NewString(table, "market_group_name")
	f.SaleStatus = field.NewInt64(table, "sale_status")
	f.IsParlaySupported = field.NewInt64(table, "is_parlay_supported")
	f.IsBestLine = field.NewInt64(table, "is_best_line")
	f.LineValue = field.NewString(table, "line_value")
	f.MarketType = field.NewInt64(table, "market_type")
	f.OptionFullName = field.NewString(table, "option_full_name")
	f.OptionShortName = field.NewString(table, "option_short_name")
	f.TeamID = field.NewInt64(table, "team_id")
	f.OptionType = field.NewInt64(table, "option_type")
	f.EuropeanOdds = field.NewField(table, "european_odds")
	f.BaseOdds = field.NewField(table, "base_odds")
	f.OddsFormatType = field.NewInt64(table, "odds_format_type")
	f.OutcomeResult = field.NewInt64(table, "outcome_result")
	f.LegacyLine = field.NewString(table, "legacy_line")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fbSportsMatchRecommendPlayOptions) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbSportsMatchRecommendPlayOptions) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 20)
	f.fieldMap["id"] = f.ID
	f.fieldMap["market_id"] = f.MarketID
	f.fieldMap["recommend_reason"] = f.RecommendReason
	f.fieldMap["market_group_name"] = f.MarketGroupName
	f.fieldMap["sale_status"] = f.SaleStatus
	f.fieldMap["is_parlay_supported"] = f.IsParlaySupported
	f.fieldMap["is_best_line"] = f.IsBestLine
	f.fieldMap["line_value"] = f.LineValue
	f.fieldMap["market_type"] = f.MarketType
	f.fieldMap["option_full_name"] = f.OptionFullName
	f.fieldMap["option_short_name"] = f.OptionShortName
	f.fieldMap["team_id"] = f.TeamID
	f.fieldMap["option_type"] = f.OptionType
	f.fieldMap["european_odds"] = f.EuropeanOdds
	f.fieldMap["base_odds"] = f.BaseOdds
	f.fieldMap["odds_format_type"] = f.OddsFormatType
	f.fieldMap["outcome_result"] = f.OutcomeResult
	f.fieldMap["legacy_line"] = f.LegacyLine
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fbSportsMatchRecommendPlayOptions) clone(db *gorm.DB) fbSportsMatchRecommendPlayOptions {
	f.fbSportsMatchRecommendPlayOptionsDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbSportsMatchRecommendPlayOptions) replaceDB(db *gorm.DB) fbSportsMatchRecommendPlayOptions {
	f.fbSportsMatchRecommendPlayOptionsDo.ReplaceDB(db)
	return f
}

type fbSportsMatchRecommendPlayOptionsDo struct{ gen.DO }

type IFbSportsMatchRecommendPlayOptionsDo interface {
	gen.SubQuery
	Debug() IFbSportsMatchRecommendPlayOptionsDo
	WithContext(ctx context.Context) IFbSportsMatchRecommendPlayOptionsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbSportsMatchRecommendPlayOptionsDo
	WriteDB() IFbSportsMatchRecommendPlayOptionsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbSportsMatchRecommendPlayOptionsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbSportsMatchRecommendPlayOptionsDo
	Not(conds ...gen.Condition) IFbSportsMatchRecommendPlayOptionsDo
	Or(conds ...gen.Condition) IFbSportsMatchRecommendPlayOptionsDo
	Select(conds ...field.Expr) IFbSportsMatchRecommendPlayOptionsDo
	Where(conds ...gen.Condition) IFbSportsMatchRecommendPlayOptionsDo
	Order(conds ...field.Expr) IFbSportsMatchRecommendPlayOptionsDo
	Distinct(cols ...field.Expr) IFbSportsMatchRecommendPlayOptionsDo
	Omit(cols ...field.Expr) IFbSportsMatchRecommendPlayOptionsDo
	Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchRecommendPlayOptionsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchRecommendPlayOptionsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchRecommendPlayOptionsDo
	Group(cols ...field.Expr) IFbSportsMatchRecommendPlayOptionsDo
	Having(conds ...gen.Condition) IFbSportsMatchRecommendPlayOptionsDo
	Limit(limit int) IFbSportsMatchRecommendPlayOptionsDo
	Offset(offset int) IFbSportsMatchRecommendPlayOptionsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchRecommendPlayOptionsDo
	Unscoped() IFbSportsMatchRecommendPlayOptionsDo
	Create(values ...*model.FbSportsMatchRecommendPlayOptions) error
	CreateInBatches(values []*model.FbSportsMatchRecommendPlayOptions, batchSize int) error
	Save(values ...*model.FbSportsMatchRecommendPlayOptions) error
	First() (*model.FbSportsMatchRecommendPlayOptions, error)
	Take() (*model.FbSportsMatchRecommendPlayOptions, error)
	Last() (*model.FbSportsMatchRecommendPlayOptions, error)
	Find() ([]*model.FbSportsMatchRecommendPlayOptions, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchRecommendPlayOptions, err error)
	FindInBatches(result *[]*model.FbSportsMatchRecommendPlayOptions, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbSportsMatchRecommendPlayOptions) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbSportsMatchRecommendPlayOptionsDo
	Assign(attrs ...field.AssignExpr) IFbSportsMatchRecommendPlayOptionsDo
	Joins(fields ...field.RelationField) IFbSportsMatchRecommendPlayOptionsDo
	Preload(fields ...field.RelationField) IFbSportsMatchRecommendPlayOptionsDo
	FirstOrInit() (*model.FbSportsMatchRecommendPlayOptions, error)
	FirstOrCreate() (*model.FbSportsMatchRecommendPlayOptions, error)
	FindByPage(offset int, limit int) (result []*model.FbSportsMatchRecommendPlayOptions, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbSportsMatchRecommendPlayOptionsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbSportsMatchRecommendPlayOptionsDo) Debug() IFbSportsMatchRecommendPlayOptionsDo {
	return f.withDO(f.DO.Debug())
}

func (f fbSportsMatchRecommendPlayOptionsDo) WithContext(ctx context.Context) IFbSportsMatchRecommendPlayOptionsDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbSportsMatchRecommendPlayOptionsDo) ReadDB() IFbSportsMatchRecommendPlayOptionsDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbSportsMatchRecommendPlayOptionsDo) WriteDB() IFbSportsMatchRecommendPlayOptionsDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbSportsMatchRecommendPlayOptionsDo) Session(config *gorm.Session) IFbSportsMatchRecommendPlayOptionsDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbSportsMatchRecommendPlayOptionsDo) Clauses(conds ...clause.Expression) IFbSportsMatchRecommendPlayOptionsDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbSportsMatchRecommendPlayOptionsDo) Returning(value interface{}, columns ...string) IFbSportsMatchRecommendPlayOptionsDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbSportsMatchRecommendPlayOptionsDo) Not(conds ...gen.Condition) IFbSportsMatchRecommendPlayOptionsDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbSportsMatchRecommendPlayOptionsDo) Or(conds ...gen.Condition) IFbSportsMatchRecommendPlayOptionsDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbSportsMatchRecommendPlayOptionsDo) Select(conds ...field.Expr) IFbSportsMatchRecommendPlayOptionsDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbSportsMatchRecommendPlayOptionsDo) Where(conds ...gen.Condition) IFbSportsMatchRecommendPlayOptionsDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbSportsMatchRecommendPlayOptionsDo) Order(conds ...field.Expr) IFbSportsMatchRecommendPlayOptionsDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbSportsMatchRecommendPlayOptionsDo) Distinct(cols ...field.Expr) IFbSportsMatchRecommendPlayOptionsDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbSportsMatchRecommendPlayOptionsDo) Omit(cols ...field.Expr) IFbSportsMatchRecommendPlayOptionsDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbSportsMatchRecommendPlayOptionsDo) Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchRecommendPlayOptionsDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbSportsMatchRecommendPlayOptionsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchRecommendPlayOptionsDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbSportsMatchRecommendPlayOptionsDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchRecommendPlayOptionsDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbSportsMatchRecommendPlayOptionsDo) Group(cols ...field.Expr) IFbSportsMatchRecommendPlayOptionsDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbSportsMatchRecommendPlayOptionsDo) Having(conds ...gen.Condition) IFbSportsMatchRecommendPlayOptionsDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbSportsMatchRecommendPlayOptionsDo) Limit(limit int) IFbSportsMatchRecommendPlayOptionsDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbSportsMatchRecommendPlayOptionsDo) Offset(offset int) IFbSportsMatchRecommendPlayOptionsDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbSportsMatchRecommendPlayOptionsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchRecommendPlayOptionsDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbSportsMatchRecommendPlayOptionsDo) Unscoped() IFbSportsMatchRecommendPlayOptionsDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbSportsMatchRecommendPlayOptionsDo) Create(values ...*model.FbSportsMatchRecommendPlayOptions) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbSportsMatchRecommendPlayOptionsDo) CreateInBatches(values []*model.FbSportsMatchRecommendPlayOptions, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbSportsMatchRecommendPlayOptionsDo) Save(values ...*model.FbSportsMatchRecommendPlayOptions) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbSportsMatchRecommendPlayOptionsDo) First() (*model.FbSportsMatchRecommendPlayOptions, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchRecommendPlayOptions), nil
	}
}

func (f fbSportsMatchRecommendPlayOptionsDo) Take() (*model.FbSportsMatchRecommendPlayOptions, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchRecommendPlayOptions), nil
	}
}

func (f fbSportsMatchRecommendPlayOptionsDo) Last() (*model.FbSportsMatchRecommendPlayOptions, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchRecommendPlayOptions), nil
	}
}

func (f fbSportsMatchRecommendPlayOptionsDo) Find() ([]*model.FbSportsMatchRecommendPlayOptions, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbSportsMatchRecommendPlayOptions), err
}

func (f fbSportsMatchRecommendPlayOptionsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchRecommendPlayOptions, err error) {
	buf := make([]*model.FbSportsMatchRecommendPlayOptions, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbSportsMatchRecommendPlayOptionsDo) FindInBatches(result *[]*model.FbSportsMatchRecommendPlayOptions, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbSportsMatchRecommendPlayOptionsDo) Attrs(attrs ...field.AssignExpr) IFbSportsMatchRecommendPlayOptionsDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbSportsMatchRecommendPlayOptionsDo) Assign(attrs ...field.AssignExpr) IFbSportsMatchRecommendPlayOptionsDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbSportsMatchRecommendPlayOptionsDo) Joins(fields ...field.RelationField) IFbSportsMatchRecommendPlayOptionsDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbSportsMatchRecommendPlayOptionsDo) Preload(fields ...field.RelationField) IFbSportsMatchRecommendPlayOptionsDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbSportsMatchRecommendPlayOptionsDo) FirstOrInit() (*model.FbSportsMatchRecommendPlayOptions, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchRecommendPlayOptions), nil
	}
}

func (f fbSportsMatchRecommendPlayOptionsDo) FirstOrCreate() (*model.FbSportsMatchRecommendPlayOptions, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchRecommendPlayOptions), nil
	}
}

func (f fbSportsMatchRecommendPlayOptionsDo) FindByPage(offset int, limit int) (result []*model.FbSportsMatchRecommendPlayOptions, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbSportsMatchRecommendPlayOptionsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbSportsMatchRecommendPlayOptionsDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbSportsMatchRecommendPlayOptionsDo) Delete(models ...*model.FbSportsMatchRecommendPlayOptions) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbSportsMatchRecommendPlayOptionsDo) withDO(do gen.Dao) *fbSportsMatchRecommendPlayOptionsDo {
	f.DO = *do.(*gen.DO)
	return f
}
