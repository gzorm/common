// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/common/zorm/model"
)

func newWinCoinDepositRecordM2(db *gorm.DB, opts ...gen.DOOption) winCoinDepositRecordM2 {
	_winCoinDepositRecordM2 := winCoinDepositRecordM2{}

	_winCoinDepositRecordM2.winCoinDepositRecordM2Do.UseDB(db, opts...)
	_winCoinDepositRecordM2.winCoinDepositRecordM2Do.UseModel(&model.WinCoinDepositRecordM2{})

	tableName := _winCoinDepositRecordM2.winCoinDepositRecordM2Do.TableName()
	_winCoinDepositRecordM2.ALL = field.NewAsterisk(tableName)
	_winCoinDepositRecordM2.ID = field.NewInt64(tableName, "id")
	_winCoinDepositRecordM2.OrderID = field.NewString(tableName, "order_id")
	_winCoinDepositRecordM2.PlatOrderID = field.NewString(tableName, "plat_order_id")
	_winCoinDepositRecordM2.UID = field.NewInt64(tableName, "uid")
	_winCoinDepositRecordM2.Username = field.NewString(tableName, "username")
	_winCoinDepositRecordM2.MerchantID = field.NewInt64(tableName, "merchant_id")
	_winCoinDepositRecordM2.Code = field.NewString(tableName, "code")
	_winCoinDepositRecordM2.PlatName = field.NewString(tableName, "plat_name")
	_winCoinDepositRecordM2.PlatNickName = field.NewString(tableName, "plat_nick_name")
	_winCoinDepositRecordM2.CoinBefore = field.NewField(tableName, "coin_before")
	_winCoinDepositRecordM2.PayAddress = field.NewString(tableName, "pay_address")
	_winCoinDepositRecordM2.PayAmount = field.NewField(tableName, "pay_amount")
	_winCoinDepositRecordM2.ExchangeRate = field.NewField(tableName, "exchange_rate")
	_winCoinDepositRecordM2.RealAmount = field.NewField(tableName, "real_amount")
	_winCoinDepositRecordM2.Currency = field.NewString(tableName, "currency")
	_winCoinDepositRecordM2.DepStatus = field.NewInt64(tableName, "dep_status")
	_winCoinDepositRecordM2.Category = field.NewInt64(tableName, "category")
	_winCoinDepositRecordM2.CategoryCurrency = field.NewInt64(tableName, "category_currency")
	_winCoinDepositRecordM2.CategoryTransfer = field.NewInt64(tableName, "category_transfer")
	_winCoinDepositRecordM2.AdminUID = field.NewInt64(tableName, "admin_uid")
	_winCoinDepositRecordM2.Mark = field.NewString(tableName, "mark")
	_winCoinDepositRecordM2.Status = field.NewInt64(tableName, "status")
	_winCoinDepositRecordM2.CreatedAt = field.NewInt64(tableName, "created_at")
	_winCoinDepositRecordM2.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_winCoinDepositRecordM2.ActivityID = field.NewInt64(tableName, "activity_id")
	_winCoinDepositRecordM2.InviteCode = field.NewString(tableName, "invite_code")

	_winCoinDepositRecordM2.fillFieldMap()

	return _winCoinDepositRecordM2
}

// winCoinDepositRecordM2 充值记录表
type winCoinDepositRecordM2 struct {
	winCoinDepositRecordM2Do

	ALL              field.Asterisk
	ID               field.Int64
	OrderID          field.String // 订单号(三方平台用)
	PlatOrderID      field.String // 三方平台订单号
	UID              field.Int64  // UID
	Username         field.String // 用户名
	MerchantID       field.Int64  // 商户id
	Code             field.String // 支付通道编码
	PlatName         field.String // 平台名称
	PlatNickName     field.String // 平台自定义名称
	CoinBefore       field.Field  // 充值前金额
	PayAddress       field.String // 加密地址
	PayAmount        field.Field  // 充值金额
	ExchangeRate     field.Field  // 汇率
	RealAmount       field.Field  // 到账金额
	Currency         field.String // 币种
	DepStatus        field.Int64  // 充值标识:1-首充 2-二充 9-其他
	Category         field.Int64  // 类型:0-钱包充值 1-佣金钱包转账充值
	CategoryCurrency field.Int64  // 货币类型:0-数字货币 1-法币
	CategoryTransfer field.Int64  // 转账类型:1-TRC-20 2-ERC-20 3-BANK 4-PIX 5-GCASH
	AdminUID         field.Int64  // 审核ID
	Mark             field.String // 备注
	Status           field.Int64  // 状态: 0-申请中 1-成功 2-失败
	CreatedAt        field.Int64
	UpdatedAt        field.Int64
	ActivityID       field.Int64  // 活动ID
	InviteCode       field.String // 邀请码

	fieldMap map[string]field.Expr
}

func (w winCoinDepositRecordM2) Table(newTableName string) *winCoinDepositRecordM2 {
	w.winCoinDepositRecordM2Do.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winCoinDepositRecordM2) As(alias string) *winCoinDepositRecordM2 {
	w.winCoinDepositRecordM2Do.DO = *(w.winCoinDepositRecordM2Do.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winCoinDepositRecordM2) updateTableName(table string) *winCoinDepositRecordM2 {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.OrderID = field.NewString(table, "order_id")
	w.PlatOrderID = field.NewString(table, "plat_order_id")
	w.UID = field.NewInt64(table, "uid")
	w.Username = field.NewString(table, "username")
	w.MerchantID = field.NewInt64(table, "merchant_id")
	w.Code = field.NewString(table, "code")
	w.PlatName = field.NewString(table, "plat_name")
	w.PlatNickName = field.NewString(table, "plat_nick_name")
	w.CoinBefore = field.NewField(table, "coin_before")
	w.PayAddress = field.NewString(table, "pay_address")
	w.PayAmount = field.NewField(table, "pay_amount")
	w.ExchangeRate = field.NewField(table, "exchange_rate")
	w.RealAmount = field.NewField(table, "real_amount")
	w.Currency = field.NewString(table, "currency")
	w.DepStatus = field.NewInt64(table, "dep_status")
	w.Category = field.NewInt64(table, "category")
	w.CategoryCurrency = field.NewInt64(table, "category_currency")
	w.CategoryTransfer = field.NewInt64(table, "category_transfer")
	w.AdminUID = field.NewInt64(table, "admin_uid")
	w.Mark = field.NewString(table, "mark")
	w.Status = field.NewInt64(table, "status")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")
	w.ActivityID = field.NewInt64(table, "activity_id")
	w.InviteCode = field.NewString(table, "invite_code")

	w.fillFieldMap()

	return w
}

func (w *winCoinDepositRecordM2) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winCoinDepositRecordM2) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 26)
	w.fieldMap["id"] = w.ID
	w.fieldMap["order_id"] = w.OrderID
	w.fieldMap["plat_order_id"] = w.PlatOrderID
	w.fieldMap["uid"] = w.UID
	w.fieldMap["username"] = w.Username
	w.fieldMap["merchant_id"] = w.MerchantID
	w.fieldMap["code"] = w.Code
	w.fieldMap["plat_name"] = w.PlatName
	w.fieldMap["plat_nick_name"] = w.PlatNickName
	w.fieldMap["coin_before"] = w.CoinBefore
	w.fieldMap["pay_address"] = w.PayAddress
	w.fieldMap["pay_amount"] = w.PayAmount
	w.fieldMap["exchange_rate"] = w.ExchangeRate
	w.fieldMap["real_amount"] = w.RealAmount
	w.fieldMap["currency"] = w.Currency
	w.fieldMap["dep_status"] = w.DepStatus
	w.fieldMap["category"] = w.Category
	w.fieldMap["category_currency"] = w.CategoryCurrency
	w.fieldMap["category_transfer"] = w.CategoryTransfer
	w.fieldMap["admin_uid"] = w.AdminUID
	w.fieldMap["mark"] = w.Mark
	w.fieldMap["status"] = w.Status
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["activity_id"] = w.ActivityID
	w.fieldMap["invite_code"] = w.InviteCode
}

func (w winCoinDepositRecordM2) clone(db *gorm.DB) winCoinDepositRecordM2 {
	w.winCoinDepositRecordM2Do.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winCoinDepositRecordM2) replaceDB(db *gorm.DB) winCoinDepositRecordM2 {
	w.winCoinDepositRecordM2Do.ReplaceDB(db)
	return w
}

type winCoinDepositRecordM2Do struct{ gen.DO }

type IWinCoinDepositRecordM2Do interface {
	gen.SubQuery
	Debug() IWinCoinDepositRecordM2Do
	WithContext(ctx context.Context) IWinCoinDepositRecordM2Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinCoinDepositRecordM2Do
	WriteDB() IWinCoinDepositRecordM2Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinCoinDepositRecordM2Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinCoinDepositRecordM2Do
	Not(conds ...gen.Condition) IWinCoinDepositRecordM2Do
	Or(conds ...gen.Condition) IWinCoinDepositRecordM2Do
	Select(conds ...field.Expr) IWinCoinDepositRecordM2Do
	Where(conds ...gen.Condition) IWinCoinDepositRecordM2Do
	Order(conds ...field.Expr) IWinCoinDepositRecordM2Do
	Distinct(cols ...field.Expr) IWinCoinDepositRecordM2Do
	Omit(cols ...field.Expr) IWinCoinDepositRecordM2Do
	Join(table schema.Tabler, on ...field.Expr) IWinCoinDepositRecordM2Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinCoinDepositRecordM2Do
	RightJoin(table schema.Tabler, on ...field.Expr) IWinCoinDepositRecordM2Do
	Group(cols ...field.Expr) IWinCoinDepositRecordM2Do
	Having(conds ...gen.Condition) IWinCoinDepositRecordM2Do
	Limit(limit int) IWinCoinDepositRecordM2Do
	Offset(offset int) IWinCoinDepositRecordM2Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinCoinDepositRecordM2Do
	Unscoped() IWinCoinDepositRecordM2Do
	Create(values ...*model.WinCoinDepositRecordM2) error
	CreateInBatches(values []*model.WinCoinDepositRecordM2, batchSize int) error
	Save(values ...*model.WinCoinDepositRecordM2) error
	First() (*model.WinCoinDepositRecordM2, error)
	Take() (*model.WinCoinDepositRecordM2, error)
	Last() (*model.WinCoinDepositRecordM2, error)
	Find() ([]*model.WinCoinDepositRecordM2, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinCoinDepositRecordM2, err error)
	FindInBatches(result *[]*model.WinCoinDepositRecordM2, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinCoinDepositRecordM2) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinCoinDepositRecordM2Do
	Assign(attrs ...field.AssignExpr) IWinCoinDepositRecordM2Do
	Joins(fields ...field.RelationField) IWinCoinDepositRecordM2Do
	Preload(fields ...field.RelationField) IWinCoinDepositRecordM2Do
	FirstOrInit() (*model.WinCoinDepositRecordM2, error)
	FirstOrCreate() (*model.WinCoinDepositRecordM2, error)
	FindByPage(offset int, limit int) (result []*model.WinCoinDepositRecordM2, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinCoinDepositRecordM2Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winCoinDepositRecordM2Do) Debug() IWinCoinDepositRecordM2Do {
	return w.withDO(w.DO.Debug())
}

func (w winCoinDepositRecordM2Do) WithContext(ctx context.Context) IWinCoinDepositRecordM2Do {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winCoinDepositRecordM2Do) ReadDB() IWinCoinDepositRecordM2Do {
	return w.Clauses(dbresolver.Read)
}

func (w winCoinDepositRecordM2Do) WriteDB() IWinCoinDepositRecordM2Do {
	return w.Clauses(dbresolver.Write)
}

func (w winCoinDepositRecordM2Do) Session(config *gorm.Session) IWinCoinDepositRecordM2Do {
	return w.withDO(w.DO.Session(config))
}

func (w winCoinDepositRecordM2Do) Clauses(conds ...clause.Expression) IWinCoinDepositRecordM2Do {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winCoinDepositRecordM2Do) Returning(value interface{}, columns ...string) IWinCoinDepositRecordM2Do {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winCoinDepositRecordM2Do) Not(conds ...gen.Condition) IWinCoinDepositRecordM2Do {
	return w.withDO(w.DO.Not(conds...))
}

func (w winCoinDepositRecordM2Do) Or(conds ...gen.Condition) IWinCoinDepositRecordM2Do {
	return w.withDO(w.DO.Or(conds...))
}

func (w winCoinDepositRecordM2Do) Select(conds ...field.Expr) IWinCoinDepositRecordM2Do {
	return w.withDO(w.DO.Select(conds...))
}

func (w winCoinDepositRecordM2Do) Where(conds ...gen.Condition) IWinCoinDepositRecordM2Do {
	return w.withDO(w.DO.Where(conds...))
}

func (w winCoinDepositRecordM2Do) Order(conds ...field.Expr) IWinCoinDepositRecordM2Do {
	return w.withDO(w.DO.Order(conds...))
}

func (w winCoinDepositRecordM2Do) Distinct(cols ...field.Expr) IWinCoinDepositRecordM2Do {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winCoinDepositRecordM2Do) Omit(cols ...field.Expr) IWinCoinDepositRecordM2Do {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winCoinDepositRecordM2Do) Join(table schema.Tabler, on ...field.Expr) IWinCoinDepositRecordM2Do {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winCoinDepositRecordM2Do) LeftJoin(table schema.Tabler, on ...field.Expr) IWinCoinDepositRecordM2Do {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winCoinDepositRecordM2Do) RightJoin(table schema.Tabler, on ...field.Expr) IWinCoinDepositRecordM2Do {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winCoinDepositRecordM2Do) Group(cols ...field.Expr) IWinCoinDepositRecordM2Do {
	return w.withDO(w.DO.Group(cols...))
}

func (w winCoinDepositRecordM2Do) Having(conds ...gen.Condition) IWinCoinDepositRecordM2Do {
	return w.withDO(w.DO.Having(conds...))
}

func (w winCoinDepositRecordM2Do) Limit(limit int) IWinCoinDepositRecordM2Do {
	return w.withDO(w.DO.Limit(limit))
}

func (w winCoinDepositRecordM2Do) Offset(offset int) IWinCoinDepositRecordM2Do {
	return w.withDO(w.DO.Offset(offset))
}

func (w winCoinDepositRecordM2Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinCoinDepositRecordM2Do {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winCoinDepositRecordM2Do) Unscoped() IWinCoinDepositRecordM2Do {
	return w.withDO(w.DO.Unscoped())
}

func (w winCoinDepositRecordM2Do) Create(values ...*model.WinCoinDepositRecordM2) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winCoinDepositRecordM2Do) CreateInBatches(values []*model.WinCoinDepositRecordM2, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winCoinDepositRecordM2Do) Save(values ...*model.WinCoinDepositRecordM2) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winCoinDepositRecordM2Do) First() (*model.WinCoinDepositRecordM2, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinDepositRecordM2), nil
	}
}

func (w winCoinDepositRecordM2Do) Take() (*model.WinCoinDepositRecordM2, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinDepositRecordM2), nil
	}
}

func (w winCoinDepositRecordM2Do) Last() (*model.WinCoinDepositRecordM2, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinDepositRecordM2), nil
	}
}

func (w winCoinDepositRecordM2Do) Find() ([]*model.WinCoinDepositRecordM2, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinCoinDepositRecordM2), err
}

func (w winCoinDepositRecordM2Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinCoinDepositRecordM2, err error) {
	buf := make([]*model.WinCoinDepositRecordM2, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winCoinDepositRecordM2Do) FindInBatches(result *[]*model.WinCoinDepositRecordM2, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winCoinDepositRecordM2Do) Attrs(attrs ...field.AssignExpr) IWinCoinDepositRecordM2Do {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winCoinDepositRecordM2Do) Assign(attrs ...field.AssignExpr) IWinCoinDepositRecordM2Do {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winCoinDepositRecordM2Do) Joins(fields ...field.RelationField) IWinCoinDepositRecordM2Do {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winCoinDepositRecordM2Do) Preload(fields ...field.RelationField) IWinCoinDepositRecordM2Do {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winCoinDepositRecordM2Do) FirstOrInit() (*model.WinCoinDepositRecordM2, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinDepositRecordM2), nil
	}
}

func (w winCoinDepositRecordM2Do) FirstOrCreate() (*model.WinCoinDepositRecordM2, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinDepositRecordM2), nil
	}
}

func (w winCoinDepositRecordM2Do) FindByPage(offset int, limit int) (result []*model.WinCoinDepositRecordM2, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winCoinDepositRecordM2Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winCoinDepositRecordM2Do) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winCoinDepositRecordM2Do) Delete(models ...*model.WinCoinDepositRecordM2) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winCoinDepositRecordM2Do) withDO(do gen.Dao) *winCoinDepositRecordM2Do {
	w.DO = *do.(*gen.DO)
	return w
}
