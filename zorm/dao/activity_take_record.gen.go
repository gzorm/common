// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newActivityTakeRecord(db *gorm.DB, opts ...gen.DOOption) activityTakeRecord {
	_activityTakeRecord := activityTakeRecord{}

	_activityTakeRecord.activityTakeRecordDo.UseDB(db, opts...)
	_activityTakeRecord.activityTakeRecordDo.UseModel(&model.ActivityTakeRecord{})

	tableName := _activityTakeRecord.activityTakeRecordDo.TableName()
	_activityTakeRecord.ALL = field.NewAsterisk(tableName)
	_activityTakeRecord.ID = field.NewInt64(tableName, "id")
	_activityTakeRecord.ActivityID = field.NewInt64(tableName, "activity_id")
	_activityTakeRecord.VipLevel = field.NewInt64(tableName, "vip_level")
	_activityTakeRecord.UID = field.NewInt64(tableName, "uid")
	_activityTakeRecord.Username = field.NewString(tableName, "username")
	_activityTakeRecord.RealName = field.NewString(tableName, "real_name")
	_activityTakeRecord.ActiveStatus = field.NewInt64(tableName, "active_status")
	_activityTakeRecord.Bonus = field.NewField(tableName, "bonus")
	_activityTakeRecord.Coin = field.NewField(tableName, "coin")
	_activityTakeRecord.FlowClaim = field.NewField(tableName, "flow_claim")
	_activityTakeRecord.CodeRequire = field.NewField(tableName, "code_require")
	_activityTakeRecord.GiftBoxStage = field.NewString(tableName, "gift_box_stage")
	_activityTakeRecord.CreateAt = field.NewInt64(tableName, "create_at")
	_activityTakeRecord.UpdateAt = field.NewInt64(tableName, "update_at")
	_activityTakeRecord.OpUser = field.NewString(tableName, "op_user")
	_activityTakeRecord.Mark = field.NewString(tableName, "mark")
	_activityTakeRecord.LaunchID = field.NewInt64(tableName, "launch_id")

	_activityTakeRecord.fillFieldMap()

	return _activityTakeRecord
}

// activityTakeRecord 用户活动领取记录表
type activityTakeRecord struct {
	activityTakeRecordDo

	ALL          field.Asterisk
	ID           field.Int64  // 标识
	ActivityID   field.Int64  // 活动ID
	VipLevel     field.Int64  // 会员等级
	UID          field.Int64  // 用户ID
	Username     field.String // 用户名
	RealName     field.String // 真实姓名
	ActiveStatus field.Int64  // 审核状态（1表示申请中，2表示已拒绝，3表示已发放）
	Bonus        field.Field  // 活动奖金
	Coin         field.Field  // 充值金额
	FlowClaim    field.Field  // 活动打码倍数
	CodeRequire  field.Field  // 所需打码量
	GiftBoxStage field.String // 礼盒阶段
	CreateAt     field.Int64  // 创建时间
	UpdateAt     field.Int64  // 修改时间
	OpUser       field.String // 操作人
	Mark         field.String // 备注
	LaunchID     field.Int64  // 发起助力ID

	fieldMap map[string]field.Expr
}

func (a activityTakeRecord) Table(newTableName string) *activityTakeRecord {
	a.activityTakeRecordDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activityTakeRecord) As(alias string) *activityTakeRecord {
	a.activityTakeRecordDo.DO = *(a.activityTakeRecordDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activityTakeRecord) updateTableName(table string) *activityTakeRecord {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ActivityID = field.NewInt64(table, "activity_id")
	a.VipLevel = field.NewInt64(table, "vip_level")
	a.UID = field.NewInt64(table, "uid")
	a.Username = field.NewString(table, "username")
	a.RealName = field.NewString(table, "real_name")
	a.ActiveStatus = field.NewInt64(table, "active_status")
	a.Bonus = field.NewField(table, "bonus")
	a.Coin = field.NewField(table, "coin")
	a.FlowClaim = field.NewField(table, "flow_claim")
	a.CodeRequire = field.NewField(table, "code_require")
	a.GiftBoxStage = field.NewString(table, "gift_box_stage")
	a.CreateAt = field.NewInt64(table, "create_at")
	a.UpdateAt = field.NewInt64(table, "update_at")
	a.OpUser = field.NewString(table, "op_user")
	a.Mark = field.NewString(table, "mark")
	a.LaunchID = field.NewInt64(table, "launch_id")

	a.fillFieldMap()

	return a
}

func (a *activityTakeRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activityTakeRecord) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 17)
	a.fieldMap["id"] = a.ID
	a.fieldMap["activity_id"] = a.ActivityID
	a.fieldMap["vip_level"] = a.VipLevel
	a.fieldMap["uid"] = a.UID
	a.fieldMap["username"] = a.Username
	a.fieldMap["real_name"] = a.RealName
	a.fieldMap["active_status"] = a.ActiveStatus
	a.fieldMap["bonus"] = a.Bonus
	a.fieldMap["coin"] = a.Coin
	a.fieldMap["flow_claim"] = a.FlowClaim
	a.fieldMap["code_require"] = a.CodeRequire
	a.fieldMap["gift_box_stage"] = a.GiftBoxStage
	a.fieldMap["create_at"] = a.CreateAt
	a.fieldMap["update_at"] = a.UpdateAt
	a.fieldMap["op_user"] = a.OpUser
	a.fieldMap["mark"] = a.Mark
	a.fieldMap["launch_id"] = a.LaunchID
}

func (a activityTakeRecord) clone(db *gorm.DB) activityTakeRecord {
	a.activityTakeRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activityTakeRecord) replaceDB(db *gorm.DB) activityTakeRecord {
	a.activityTakeRecordDo.ReplaceDB(db)
	return a
}

type activityTakeRecordDo struct{ gen.DO }

type IActivityTakeRecordDo interface {
	gen.SubQuery
	Debug() IActivityTakeRecordDo
	WithContext(ctx context.Context) IActivityTakeRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivityTakeRecordDo
	WriteDB() IActivityTakeRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivityTakeRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivityTakeRecordDo
	Not(conds ...gen.Condition) IActivityTakeRecordDo
	Or(conds ...gen.Condition) IActivityTakeRecordDo
	Select(conds ...field.Expr) IActivityTakeRecordDo
	Where(conds ...gen.Condition) IActivityTakeRecordDo
	Order(conds ...field.Expr) IActivityTakeRecordDo
	Distinct(cols ...field.Expr) IActivityTakeRecordDo
	Omit(cols ...field.Expr) IActivityTakeRecordDo
	Join(table schema.Tabler, on ...field.Expr) IActivityTakeRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivityTakeRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActivityTakeRecordDo
	Group(cols ...field.Expr) IActivityTakeRecordDo
	Having(conds ...gen.Condition) IActivityTakeRecordDo
	Limit(limit int) IActivityTakeRecordDo
	Offset(offset int) IActivityTakeRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityTakeRecordDo
	Unscoped() IActivityTakeRecordDo
	Create(values ...*model.ActivityTakeRecord) error
	CreateInBatches(values []*model.ActivityTakeRecord, batchSize int) error
	Save(values ...*model.ActivityTakeRecord) error
	First() (*model.ActivityTakeRecord, error)
	Take() (*model.ActivityTakeRecord, error)
	Last() (*model.ActivityTakeRecord, error)
	Find() ([]*model.ActivityTakeRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityTakeRecord, err error)
	FindInBatches(result *[]*model.ActivityTakeRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActivityTakeRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivityTakeRecordDo
	Assign(attrs ...field.AssignExpr) IActivityTakeRecordDo
	Joins(fields ...field.RelationField) IActivityTakeRecordDo
	Preload(fields ...field.RelationField) IActivityTakeRecordDo
	FirstOrInit() (*model.ActivityTakeRecord, error)
	FirstOrCreate() (*model.ActivityTakeRecord, error)
	FindByPage(offset int, limit int) (result []*model.ActivityTakeRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivityTakeRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activityTakeRecordDo) Debug() IActivityTakeRecordDo {
	return a.withDO(a.DO.Debug())
}

func (a activityTakeRecordDo) WithContext(ctx context.Context) IActivityTakeRecordDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityTakeRecordDo) ReadDB() IActivityTakeRecordDo {
	return a.Clauses(dbresolver.Read)
}

func (a activityTakeRecordDo) WriteDB() IActivityTakeRecordDo {
	return a.Clauses(dbresolver.Write)
}

func (a activityTakeRecordDo) Session(config *gorm.Session) IActivityTakeRecordDo {
	return a.withDO(a.DO.Session(config))
}

func (a activityTakeRecordDo) Clauses(conds ...clause.Expression) IActivityTakeRecordDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityTakeRecordDo) Returning(value interface{}, columns ...string) IActivityTakeRecordDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityTakeRecordDo) Not(conds ...gen.Condition) IActivityTakeRecordDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityTakeRecordDo) Or(conds ...gen.Condition) IActivityTakeRecordDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityTakeRecordDo) Select(conds ...field.Expr) IActivityTakeRecordDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityTakeRecordDo) Where(conds ...gen.Condition) IActivityTakeRecordDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityTakeRecordDo) Order(conds ...field.Expr) IActivityTakeRecordDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityTakeRecordDo) Distinct(cols ...field.Expr) IActivityTakeRecordDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityTakeRecordDo) Omit(cols ...field.Expr) IActivityTakeRecordDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityTakeRecordDo) Join(table schema.Tabler, on ...field.Expr) IActivityTakeRecordDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityTakeRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActivityTakeRecordDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityTakeRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IActivityTakeRecordDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityTakeRecordDo) Group(cols ...field.Expr) IActivityTakeRecordDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityTakeRecordDo) Having(conds ...gen.Condition) IActivityTakeRecordDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityTakeRecordDo) Limit(limit int) IActivityTakeRecordDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityTakeRecordDo) Offset(offset int) IActivityTakeRecordDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityTakeRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityTakeRecordDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityTakeRecordDo) Unscoped() IActivityTakeRecordDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activityTakeRecordDo) Create(values ...*model.ActivityTakeRecord) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityTakeRecordDo) CreateInBatches(values []*model.ActivityTakeRecord, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityTakeRecordDo) Save(values ...*model.ActivityTakeRecord) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityTakeRecordDo) First() (*model.ActivityTakeRecord, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityTakeRecord), nil
	}
}

func (a activityTakeRecordDo) Take() (*model.ActivityTakeRecord, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityTakeRecord), nil
	}
}

func (a activityTakeRecordDo) Last() (*model.ActivityTakeRecord, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityTakeRecord), nil
	}
}

func (a activityTakeRecordDo) Find() ([]*model.ActivityTakeRecord, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivityTakeRecord), err
}

func (a activityTakeRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityTakeRecord, err error) {
	buf := make([]*model.ActivityTakeRecord, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityTakeRecordDo) FindInBatches(result *[]*model.ActivityTakeRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityTakeRecordDo) Attrs(attrs ...field.AssignExpr) IActivityTakeRecordDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityTakeRecordDo) Assign(attrs ...field.AssignExpr) IActivityTakeRecordDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityTakeRecordDo) Joins(fields ...field.RelationField) IActivityTakeRecordDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityTakeRecordDo) Preload(fields ...field.RelationField) IActivityTakeRecordDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityTakeRecordDo) FirstOrInit() (*model.ActivityTakeRecord, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityTakeRecord), nil
	}
}

func (a activityTakeRecordDo) FirstOrCreate() (*model.ActivityTakeRecord, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityTakeRecord), nil
	}
}

func (a activityTakeRecordDo) FindByPage(offset int, limit int) (result []*model.ActivityTakeRecord, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityTakeRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityTakeRecordDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityTakeRecordDo) Delete(models ...*model.ActivityTakeRecord) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityTakeRecordDo) withDO(do gen.Dao) *activityTakeRecordDo {
	a.DO = *do.(*gen.DO)
	return a
}
