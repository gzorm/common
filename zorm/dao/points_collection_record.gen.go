// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newPointsCollectionRecord(db *gorm.DB, opts ...gen.DOOption) pointsCollectionRecord {
	_pointsCollectionRecord := pointsCollectionRecord{}

	_pointsCollectionRecord.pointsCollectionRecordDo.UseDB(db, opts...)
	_pointsCollectionRecord.pointsCollectionRecordDo.UseModel(&model.PointsCollectionRecord{})

	tableName := _pointsCollectionRecord.pointsCollectionRecordDo.TableName()
	_pointsCollectionRecord.ALL = field.NewAsterisk(tableName)
	_pointsCollectionRecord.ID = field.NewInt64(tableName, "id")
	_pointsCollectionRecord.PointsRewardsID = field.NewInt64(tableName, "points_rewards_id")
	_pointsCollectionRecord.UserID = field.NewInt64(tableName, "user_id")
	_pointsCollectionRecord.Username = field.NewString(tableName, "username")
	_pointsCollectionRecord.Name = field.NewString(tableName, "name")
	_pointsCollectionRecord.Integral = field.NewInt64(tableName, "integral")
	_pointsCollectionRecord.Score = field.NewInt64(tableName, "score")
	_pointsCollectionRecord.Status = field.NewInt64(tableName, "status")
	_pointsCollectionRecord.CreatedAt = field.NewInt64(tableName, "created_at")
	_pointsCollectionRecord.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_pointsCollectionRecord.UpdatedUser = field.NewString(tableName, "updated_user")
	_pointsCollectionRecord.Mobile = field.NewString(tableName, "mobile")
	_pointsCollectionRecord.CoinBefore = field.NewField(tableName, "coin_before")
	_pointsCollectionRecord.GoldCoins = field.NewInt64(tableName, "gold_coins")

	_pointsCollectionRecord.fillFieldMap()

	return _pointsCollectionRecord
}

// pointsCollectionRecord 积分领取记录
type pointsCollectionRecord struct {
	pointsCollectionRecordDo

	ALL             field.Asterisk
	ID              field.Int64
	PointsRewardsID field.Int64  // 分商城奖励配置id
	UserID          field.Int64  // 领取用户id
	Username        field.String // 用户名称
	Name            field.String // 奖励物品名称
	Integral        field.Int64  // 奖励领取所需积分
	Score           field.Int64  // 更新后积分
	Status          field.Int64  // 状态: 1=未领取,2=领取成功,3=已过期
	CreatedAt       field.Int64  // 创建时间
	UpdatedAt       field.Int64  // 更新时间
	UpdatedUser     field.String // 最后修改人
	Mobile          field.String // 手机号码
	CoinBefore      field.Field  // 投注前金额
	GoldCoins       field.Int64  // 金币(用户主钱包)

	fieldMap map[string]field.Expr
}

func (p pointsCollectionRecord) Table(newTableName string) *pointsCollectionRecord {
	p.pointsCollectionRecordDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pointsCollectionRecord) As(alias string) *pointsCollectionRecord {
	p.pointsCollectionRecordDo.DO = *(p.pointsCollectionRecordDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pointsCollectionRecord) updateTableName(table string) *pointsCollectionRecord {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.PointsRewardsID = field.NewInt64(table, "points_rewards_id")
	p.UserID = field.NewInt64(table, "user_id")
	p.Username = field.NewString(table, "username")
	p.Name = field.NewString(table, "name")
	p.Integral = field.NewInt64(table, "integral")
	p.Score = field.NewInt64(table, "score")
	p.Status = field.NewInt64(table, "status")
	p.CreatedAt = field.NewInt64(table, "created_at")
	p.UpdatedAt = field.NewInt64(table, "updated_at")
	p.UpdatedUser = field.NewString(table, "updated_user")
	p.Mobile = field.NewString(table, "mobile")
	p.CoinBefore = field.NewField(table, "coin_before")
	p.GoldCoins = field.NewInt64(table, "gold_coins")

	p.fillFieldMap()

	return p
}

func (p *pointsCollectionRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pointsCollectionRecord) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 14)
	p.fieldMap["id"] = p.ID
	p.fieldMap["points_rewards_id"] = p.PointsRewardsID
	p.fieldMap["user_id"] = p.UserID
	p.fieldMap["username"] = p.Username
	p.fieldMap["name"] = p.Name
	p.fieldMap["integral"] = p.Integral
	p.fieldMap["score"] = p.Score
	p.fieldMap["status"] = p.Status
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["updated_user"] = p.UpdatedUser
	p.fieldMap["mobile"] = p.Mobile
	p.fieldMap["coin_before"] = p.CoinBefore
	p.fieldMap["gold_coins"] = p.GoldCoins
}

func (p pointsCollectionRecord) clone(db *gorm.DB) pointsCollectionRecord {
	p.pointsCollectionRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pointsCollectionRecord) replaceDB(db *gorm.DB) pointsCollectionRecord {
	p.pointsCollectionRecordDo.ReplaceDB(db)
	return p
}

type pointsCollectionRecordDo struct{ gen.DO }

type IPointsCollectionRecordDo interface {
	gen.SubQuery
	Debug() IPointsCollectionRecordDo
	WithContext(ctx context.Context) IPointsCollectionRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPointsCollectionRecordDo
	WriteDB() IPointsCollectionRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPointsCollectionRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPointsCollectionRecordDo
	Not(conds ...gen.Condition) IPointsCollectionRecordDo
	Or(conds ...gen.Condition) IPointsCollectionRecordDo
	Select(conds ...field.Expr) IPointsCollectionRecordDo
	Where(conds ...gen.Condition) IPointsCollectionRecordDo
	Order(conds ...field.Expr) IPointsCollectionRecordDo
	Distinct(cols ...field.Expr) IPointsCollectionRecordDo
	Omit(cols ...field.Expr) IPointsCollectionRecordDo
	Join(table schema.Tabler, on ...field.Expr) IPointsCollectionRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPointsCollectionRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPointsCollectionRecordDo
	Group(cols ...field.Expr) IPointsCollectionRecordDo
	Having(conds ...gen.Condition) IPointsCollectionRecordDo
	Limit(limit int) IPointsCollectionRecordDo
	Offset(offset int) IPointsCollectionRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPointsCollectionRecordDo
	Unscoped() IPointsCollectionRecordDo
	Create(values ...*model.PointsCollectionRecord) error
	CreateInBatches(values []*model.PointsCollectionRecord, batchSize int) error
	Save(values ...*model.PointsCollectionRecord) error
	First() (*model.PointsCollectionRecord, error)
	Take() (*model.PointsCollectionRecord, error)
	Last() (*model.PointsCollectionRecord, error)
	Find() ([]*model.PointsCollectionRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PointsCollectionRecord, err error)
	FindInBatches(result *[]*model.PointsCollectionRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PointsCollectionRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPointsCollectionRecordDo
	Assign(attrs ...field.AssignExpr) IPointsCollectionRecordDo
	Joins(fields ...field.RelationField) IPointsCollectionRecordDo
	Preload(fields ...field.RelationField) IPointsCollectionRecordDo
	FirstOrInit() (*model.PointsCollectionRecord, error)
	FirstOrCreate() (*model.PointsCollectionRecord, error)
	FindByPage(offset int, limit int) (result []*model.PointsCollectionRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPointsCollectionRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pointsCollectionRecordDo) Debug() IPointsCollectionRecordDo {
	return p.withDO(p.DO.Debug())
}

func (p pointsCollectionRecordDo) WithContext(ctx context.Context) IPointsCollectionRecordDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pointsCollectionRecordDo) ReadDB() IPointsCollectionRecordDo {
	return p.Clauses(dbresolver.Read)
}

func (p pointsCollectionRecordDo) WriteDB() IPointsCollectionRecordDo {
	return p.Clauses(dbresolver.Write)
}

func (p pointsCollectionRecordDo) Session(config *gorm.Session) IPointsCollectionRecordDo {
	return p.withDO(p.DO.Session(config))
}

func (p pointsCollectionRecordDo) Clauses(conds ...clause.Expression) IPointsCollectionRecordDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pointsCollectionRecordDo) Returning(value interface{}, columns ...string) IPointsCollectionRecordDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pointsCollectionRecordDo) Not(conds ...gen.Condition) IPointsCollectionRecordDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pointsCollectionRecordDo) Or(conds ...gen.Condition) IPointsCollectionRecordDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pointsCollectionRecordDo) Select(conds ...field.Expr) IPointsCollectionRecordDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pointsCollectionRecordDo) Where(conds ...gen.Condition) IPointsCollectionRecordDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pointsCollectionRecordDo) Order(conds ...field.Expr) IPointsCollectionRecordDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pointsCollectionRecordDo) Distinct(cols ...field.Expr) IPointsCollectionRecordDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pointsCollectionRecordDo) Omit(cols ...field.Expr) IPointsCollectionRecordDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pointsCollectionRecordDo) Join(table schema.Tabler, on ...field.Expr) IPointsCollectionRecordDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pointsCollectionRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPointsCollectionRecordDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pointsCollectionRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IPointsCollectionRecordDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pointsCollectionRecordDo) Group(cols ...field.Expr) IPointsCollectionRecordDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pointsCollectionRecordDo) Having(conds ...gen.Condition) IPointsCollectionRecordDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pointsCollectionRecordDo) Limit(limit int) IPointsCollectionRecordDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pointsCollectionRecordDo) Offset(offset int) IPointsCollectionRecordDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pointsCollectionRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPointsCollectionRecordDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pointsCollectionRecordDo) Unscoped() IPointsCollectionRecordDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pointsCollectionRecordDo) Create(values ...*model.PointsCollectionRecord) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pointsCollectionRecordDo) CreateInBatches(values []*model.PointsCollectionRecord, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pointsCollectionRecordDo) Save(values ...*model.PointsCollectionRecord) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pointsCollectionRecordDo) First() (*model.PointsCollectionRecord, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PointsCollectionRecord), nil
	}
}

func (p pointsCollectionRecordDo) Take() (*model.PointsCollectionRecord, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PointsCollectionRecord), nil
	}
}

func (p pointsCollectionRecordDo) Last() (*model.PointsCollectionRecord, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PointsCollectionRecord), nil
	}
}

func (p pointsCollectionRecordDo) Find() ([]*model.PointsCollectionRecord, error) {
	result, err := p.DO.Find()
	return result.([]*model.PointsCollectionRecord), err
}

func (p pointsCollectionRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PointsCollectionRecord, err error) {
	buf := make([]*model.PointsCollectionRecord, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pointsCollectionRecordDo) FindInBatches(result *[]*model.PointsCollectionRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pointsCollectionRecordDo) Attrs(attrs ...field.AssignExpr) IPointsCollectionRecordDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pointsCollectionRecordDo) Assign(attrs ...field.AssignExpr) IPointsCollectionRecordDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pointsCollectionRecordDo) Joins(fields ...field.RelationField) IPointsCollectionRecordDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pointsCollectionRecordDo) Preload(fields ...field.RelationField) IPointsCollectionRecordDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pointsCollectionRecordDo) FirstOrInit() (*model.PointsCollectionRecord, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PointsCollectionRecord), nil
	}
}

func (p pointsCollectionRecordDo) FirstOrCreate() (*model.PointsCollectionRecord, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PointsCollectionRecord), nil
	}
}

func (p pointsCollectionRecordDo) FindByPage(offset int, limit int) (result []*model.PointsCollectionRecord, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pointsCollectionRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pointsCollectionRecordDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pointsCollectionRecordDo) Delete(models ...*model.PointsCollectionRecord) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pointsCollectionRecordDo) withDO(do gen.Dao) *pointsCollectionRecordDo {
	p.DO = *do.(*gen.DO)
	return p
}
