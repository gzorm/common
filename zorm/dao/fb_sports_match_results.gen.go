// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newFbSportsMatchResults(db *gorm.DB, opts ...gen.DOOption) fbSportsMatchResults {
	_fbSportsMatchResults := fbSportsMatchResults{}

	_fbSportsMatchResults.fbSportsMatchResultsDo.UseDB(db, opts...)
	_fbSportsMatchResults.fbSportsMatchResultsDo.UseModel(&model.FbSportsMatchResults{})

	tableName := _fbSportsMatchResults.fbSportsMatchResultsDo.TableName()
	_fbSportsMatchResults.ALL = field.NewAsterisk(tableName)
	_fbSportsMatchResults.ID = field.NewInt64(tableName, "id")
	_fbSportsMatchResults.MatchID = field.NewInt64(tableName, "match_id")
	_fbSportsMatchResults.MatchType = field.NewInt64(tableName, "match_type")
	_fbSportsMatchResults.StartTime = field.NewInt64(tableName, "start_time")
	_fbSportsMatchResults.MatchStatus = field.NewInt64(tableName, "match_status")
	_fbSportsMatchResults.GameStage = field.NewInt64(tableName, "game_stage")
	_fbSportsMatchResults.GameFormat = field.NewInt64(tableName, "game_format")
	_fbSportsMatchResults.IsNeutral = field.NewInt64(tableName, "is_neutral")
	_fbSportsMatchResults.SportID = field.NewInt64(tableName, "sport_id")
	_fbSportsMatchResults.LeagueData = field.NewString(tableName, "league_data")
	_fbSportsMatchResults.TeamData = field.NewString(tableName, "team_data")
	_fbSportsMatchResults.Scores = field.NewString(tableName, "scores")
	_fbSportsMatchResults.MarketResults = field.NewString(tableName, "market_results")
	_fbSportsMatchResults.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbSportsMatchResults.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_fbSportsMatchResults.fillFieldMap()

	return _fbSportsMatchResults
}

// fbSportsMatchResults 赛事结果记录表
type fbSportsMatchResults struct {
	fbSportsMatchResultsDo

	ALL           field.Asterisk
	ID            field.Int64  // 主键
	MatchID       field.Int64  // 赛事ID
	MatchType     field.Int64  // 赛事类型，1或2，关联 match_type 枚举
	StartTime     field.Int64  // 赛事开赛时间，13位时间戳
	MatchStatus   field.Int64  // 赛事进行状态，关联 match_status 枚举
	GameStage     field.Int64  // 赛制的场次/局数/节数
	GameFormat    field.Int64  // 赛制类型，关联 match_format 枚举
	IsNeutral     field.Int64  // 中立场标识，1表示中立场，0表示非中立场
	SportID       field.Int64  // 运动ID，关联 sports 枚举
	LeagueData    field.String // 联赛数据，JSON格式存储
	TeamData      field.String // 比赛球队数据，JSON格式存储
	Scores        field.String // 比分或赛果，JSON格式存储
	MarketResults field.String // 盘口结算结果集合，JSON格式存储
	CreatedAt     field.Int64  // 记录创建时间（时间戳）
	UpdatedAt     field.Int64  // 记录更新时间（时间戳）

	fieldMap map[string]field.Expr
}

func (f fbSportsMatchResults) Table(newTableName string) *fbSportsMatchResults {
	f.fbSportsMatchResultsDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbSportsMatchResults) As(alias string) *fbSportsMatchResults {
	f.fbSportsMatchResultsDo.DO = *(f.fbSportsMatchResultsDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbSportsMatchResults) updateTableName(table string) *fbSportsMatchResults {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.MatchID = field.NewInt64(table, "match_id")
	f.MatchType = field.NewInt64(table, "match_type")
	f.StartTime = field.NewInt64(table, "start_time")
	f.MatchStatus = field.NewInt64(table, "match_status")
	f.GameStage = field.NewInt64(table, "game_stage")
	f.GameFormat = field.NewInt64(table, "game_format")
	f.IsNeutral = field.NewInt64(table, "is_neutral")
	f.SportID = field.NewInt64(table, "sport_id")
	f.LeagueData = field.NewString(table, "league_data")
	f.TeamData = field.NewString(table, "team_data")
	f.Scores = field.NewString(table, "scores")
	f.MarketResults = field.NewString(table, "market_results")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fbSportsMatchResults) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbSportsMatchResults) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 15)
	f.fieldMap["id"] = f.ID
	f.fieldMap["match_id"] = f.MatchID
	f.fieldMap["match_type"] = f.MatchType
	f.fieldMap["start_time"] = f.StartTime
	f.fieldMap["match_status"] = f.MatchStatus
	f.fieldMap["game_stage"] = f.GameStage
	f.fieldMap["game_format"] = f.GameFormat
	f.fieldMap["is_neutral"] = f.IsNeutral
	f.fieldMap["sport_id"] = f.SportID
	f.fieldMap["league_data"] = f.LeagueData
	f.fieldMap["team_data"] = f.TeamData
	f.fieldMap["scores"] = f.Scores
	f.fieldMap["market_results"] = f.MarketResults
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fbSportsMatchResults) clone(db *gorm.DB) fbSportsMatchResults {
	f.fbSportsMatchResultsDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbSportsMatchResults) replaceDB(db *gorm.DB) fbSportsMatchResults {
	f.fbSportsMatchResultsDo.ReplaceDB(db)
	return f
}

type fbSportsMatchResultsDo struct{ gen.DO }

type IFbSportsMatchResultsDo interface {
	gen.SubQuery
	Debug() IFbSportsMatchResultsDo
	WithContext(ctx context.Context) IFbSportsMatchResultsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbSportsMatchResultsDo
	WriteDB() IFbSportsMatchResultsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbSportsMatchResultsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbSportsMatchResultsDo
	Not(conds ...gen.Condition) IFbSportsMatchResultsDo
	Or(conds ...gen.Condition) IFbSportsMatchResultsDo
	Select(conds ...field.Expr) IFbSportsMatchResultsDo
	Where(conds ...gen.Condition) IFbSportsMatchResultsDo
	Order(conds ...field.Expr) IFbSportsMatchResultsDo
	Distinct(cols ...field.Expr) IFbSportsMatchResultsDo
	Omit(cols ...field.Expr) IFbSportsMatchResultsDo
	Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchResultsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchResultsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchResultsDo
	Group(cols ...field.Expr) IFbSportsMatchResultsDo
	Having(conds ...gen.Condition) IFbSportsMatchResultsDo
	Limit(limit int) IFbSportsMatchResultsDo
	Offset(offset int) IFbSportsMatchResultsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchResultsDo
	Unscoped() IFbSportsMatchResultsDo
	Create(values ...*model.FbSportsMatchResults) error
	CreateInBatches(values []*model.FbSportsMatchResults, batchSize int) error
	Save(values ...*model.FbSportsMatchResults) error
	First() (*model.FbSportsMatchResults, error)
	Take() (*model.FbSportsMatchResults, error)
	Last() (*model.FbSportsMatchResults, error)
	Find() ([]*model.FbSportsMatchResults, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchResults, err error)
	FindInBatches(result *[]*model.FbSportsMatchResults, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbSportsMatchResults) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbSportsMatchResultsDo
	Assign(attrs ...field.AssignExpr) IFbSportsMatchResultsDo
	Joins(fields ...field.RelationField) IFbSportsMatchResultsDo
	Preload(fields ...field.RelationField) IFbSportsMatchResultsDo
	FirstOrInit() (*model.FbSportsMatchResults, error)
	FirstOrCreate() (*model.FbSportsMatchResults, error)
	FindByPage(offset int, limit int) (result []*model.FbSportsMatchResults, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbSportsMatchResultsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbSportsMatchResultsDo) Debug() IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Debug())
}

func (f fbSportsMatchResultsDo) WithContext(ctx context.Context) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbSportsMatchResultsDo) ReadDB() IFbSportsMatchResultsDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbSportsMatchResultsDo) WriteDB() IFbSportsMatchResultsDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbSportsMatchResultsDo) Session(config *gorm.Session) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbSportsMatchResultsDo) Clauses(conds ...clause.Expression) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbSportsMatchResultsDo) Returning(value interface{}, columns ...string) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbSportsMatchResultsDo) Not(conds ...gen.Condition) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbSportsMatchResultsDo) Or(conds ...gen.Condition) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbSportsMatchResultsDo) Select(conds ...field.Expr) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbSportsMatchResultsDo) Where(conds ...gen.Condition) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbSportsMatchResultsDo) Order(conds ...field.Expr) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbSportsMatchResultsDo) Distinct(cols ...field.Expr) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbSportsMatchResultsDo) Omit(cols ...field.Expr) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbSportsMatchResultsDo) Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbSportsMatchResultsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbSportsMatchResultsDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbSportsMatchResultsDo) Group(cols ...field.Expr) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbSportsMatchResultsDo) Having(conds ...gen.Condition) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbSportsMatchResultsDo) Limit(limit int) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbSportsMatchResultsDo) Offset(offset int) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbSportsMatchResultsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbSportsMatchResultsDo) Unscoped() IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbSportsMatchResultsDo) Create(values ...*model.FbSportsMatchResults) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbSportsMatchResultsDo) CreateInBatches(values []*model.FbSportsMatchResults, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbSportsMatchResultsDo) Save(values ...*model.FbSportsMatchResults) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbSportsMatchResultsDo) First() (*model.FbSportsMatchResults, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchResults), nil
	}
}

func (f fbSportsMatchResultsDo) Take() (*model.FbSportsMatchResults, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchResults), nil
	}
}

func (f fbSportsMatchResultsDo) Last() (*model.FbSportsMatchResults, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchResults), nil
	}
}

func (f fbSportsMatchResultsDo) Find() ([]*model.FbSportsMatchResults, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbSportsMatchResults), err
}

func (f fbSportsMatchResultsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchResults, err error) {
	buf := make([]*model.FbSportsMatchResults, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbSportsMatchResultsDo) FindInBatches(result *[]*model.FbSportsMatchResults, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbSportsMatchResultsDo) Attrs(attrs ...field.AssignExpr) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbSportsMatchResultsDo) Assign(attrs ...field.AssignExpr) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbSportsMatchResultsDo) Joins(fields ...field.RelationField) IFbSportsMatchResultsDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbSportsMatchResultsDo) Preload(fields ...field.RelationField) IFbSportsMatchResultsDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbSportsMatchResultsDo) FirstOrInit() (*model.FbSportsMatchResults, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchResults), nil
	}
}

func (f fbSportsMatchResultsDo) FirstOrCreate() (*model.FbSportsMatchResults, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchResults), nil
	}
}

func (f fbSportsMatchResultsDo) FindByPage(offset int, limit int) (result []*model.FbSportsMatchResults, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbSportsMatchResultsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbSportsMatchResultsDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbSportsMatchResultsDo) Delete(models ...*model.FbSportsMatchResults) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbSportsMatchResultsDo) withDO(do gen.Dao) *fbSportsMatchResultsDo {
	f.DO = *do.(*gen.DO)
	return f
}
