// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newFbSportsMatchResults(db *gorm.DB, opts ...gen.DOOption) fbSportsMatchResults {
	_fbSportsMatchResults := fbSportsMatchResults{}

	_fbSportsMatchResults.fbSportsMatchResultsDo.UseDB(db, opts...)
	_fbSportsMatchResults.fbSportsMatchResultsDo.UseModel(&model.FbSportsMatchResults{})

	tableName := _fbSportsMatchResults.fbSportsMatchResultsDo.TableName()
	_fbSportsMatchResults.ALL = field.NewAsterisk(tableName)
	_fbSportsMatchResults.ID = field.NewInt64(tableName, "id")
	_fbSportsMatchResults.Bt = field.NewInt64(tableName, "bt")
	_fbSportsMatchResults.Ms = field.NewInt64(tableName, "ms")
	_fbSportsMatchResults.Fid = field.NewInt64(tableName, "fid")
	_fbSportsMatchResults.Fmt = field.NewInt64(tableName, "fmt")
	_fbSportsMatchResults.Ne = field.NewInt64(tableName, "ne")
	_fbSportsMatchResults.Sid = field.NewInt64(tableName, "sid")
	_fbSportsMatchResults.MatchType = field.NewInt64(tableName, "match_type")
	_fbSportsMatchResults.LeagueID = field.NewInt64(tableName, "league_id")
	_fbSportsMatchResults.LeagueName = field.NewString(tableName, "league_name")
	_fbSportsMatchResults.LeagueLevel = field.NewInt64(tableName, "league_level")
	_fbSportsMatchResults.LeagueLogo = field.NewString(tableName, "league_logo")
	_fbSportsMatchResults.RegionID = field.NewInt64(tableName, "region_id")
	_fbSportsMatchResults.RegionName = field.NewString(tableName, "region_name")
	_fbSportsMatchResults.RegionLogo = field.NewString(tableName, "region_logo")
	_fbSportsMatchResults.IsHot = field.NewInt64(tableName, "is_hot")
	_fbSportsMatchResults.LeagueGroupID = field.NewInt64(tableName, "league_group_id")
	_fbSportsMatchResults.HomeTeamID = field.NewInt64(tableName, "home_team_id")
	_fbSportsMatchResults.HomeTeamName = field.NewString(tableName, "home_team_name")
	_fbSportsMatchResults.HomeTeamLogo = field.NewString(tableName, "home_team_logo")
	_fbSportsMatchResults.AwayTeamID = field.NewInt64(tableName, "away_team_id")
	_fbSportsMatchResults.AwayTeamName = field.NewString(tableName, "away_team_name")
	_fbSportsMatchResults.AwayTeamLogo = field.NewString(tableName, "away_team_logo")
	_fbSportsMatchResults.ScorePhase = field.NewInt64(tableName, "score_phase")
	_fbSportsMatchResults.ScoreType = field.NewInt64(tableName, "score_type")
	_fbSportsMatchResults.HomeScore = field.NewInt64(tableName, "home_score")
	_fbSportsMatchResults.AwayScore = field.NewInt64(tableName, "away_score")
	_fbSportsMatchResults.MarketPhase = field.NewInt64(tableName, "market_phase")
	_fbSportsMatchResults.MarketType = field.NewInt64(tableName, "market_type")
	_fbSportsMatchResults.MarketGroup = field.NewString(tableName, "market_group")
	_fbSportsMatchResults.MarketID = field.NewInt64(tableName, "market_id")
	_fbSportsMatchResults.MarketOptionType = field.NewInt64(tableName, "market_option_type")
	_fbSportsMatchResults.MarketOptionName = field.NewString(tableName, "market_option_name")
	_fbSportsMatchResults.CreatedAt = field.NewTime(tableName, "created_at")
	_fbSportsMatchResults.UpdatedAt = field.NewTime(tableName, "updated_at")

	_fbSportsMatchResults.fillFieldMap()

	return _fbSportsMatchResults
}

// fbSportsMatchResults 赛事赛果表
type fbSportsMatchResults struct {
	fbSportsMatchResultsDo

	ALL              field.Asterisk
	ID               field.Int64  // 赛事ID
	Bt               field.Int64  // 赛事开赛时间 (时间戳)
	Ms               field.Int64  // 赛事进行状态
	Fid              field.Int64  // 赛制的场次、局数、节数
	Fmt              field.Int64  // 赛制
	Ne               field.Int64  // 是否为中立场 (0: 否, 1: 是)
	Sid              field.Int64  // 运动种类ID
	MatchType        field.Int64  // 赛事类型 (1 或 2)
	LeagueID         field.Int64  // 联赛ID
	LeagueName       field.String // 联赛名称
	LeagueLevel      field.Int64  // 联赛等级
	LeagueLogo       field.String // 联赛图标地址
	RegionID         field.Int64  // 区域ID
	RegionName       field.String // 区域名称
	RegionLogo       field.String // 区域Logo
	IsHot            field.Int64  // 是否热门联赛
	LeagueGroupID    field.Int64  // 联赛分组ID
	HomeTeamID       field.Int64  // 主队ID
	HomeTeamName     field.String // 主队名称
	HomeTeamLogo     field.String // 主队图标地址
	AwayTeamID       field.Int64  // 客队ID
	AwayTeamName     field.String // 客队名称
	AwayTeamLogo     field.String // 客队图标地址
	ScorePhase       field.Int64  // 赛事阶段
	ScoreType        field.Int64  // 比分类型
	HomeScore        field.Int64  // 主队得分
	AwayScore        field.Int64  // 客队得分
	MarketPhase      field.Int64  // 盘口阶段
	MarketType       field.Int64  // 盘口类型
	MarketGroup      field.String // 盘口组名
	MarketID         field.Int64  // 盘口ID
	MarketOptionType field.Int64  // 盘口选项类型
	MarketOptionName field.String // 盘口选项名
	CreatedAt        field.Time   // 创建时间
	UpdatedAt        field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (f fbSportsMatchResults) Table(newTableName string) *fbSportsMatchResults {
	f.fbSportsMatchResultsDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbSportsMatchResults) As(alias string) *fbSportsMatchResults {
	f.fbSportsMatchResultsDo.DO = *(f.fbSportsMatchResultsDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbSportsMatchResults) updateTableName(table string) *fbSportsMatchResults {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Bt = field.NewInt64(table, "bt")
	f.Ms = field.NewInt64(table, "ms")
	f.Fid = field.NewInt64(table, "fid")
	f.Fmt = field.NewInt64(table, "fmt")
	f.Ne = field.NewInt64(table, "ne")
	f.Sid = field.NewInt64(table, "sid")
	f.MatchType = field.NewInt64(table, "match_type")
	f.LeagueID = field.NewInt64(table, "league_id")
	f.LeagueName = field.NewString(table, "league_name")
	f.LeagueLevel = field.NewInt64(table, "league_level")
	f.LeagueLogo = field.NewString(table, "league_logo")
	f.RegionID = field.NewInt64(table, "region_id")
	f.RegionName = field.NewString(table, "region_name")
	f.RegionLogo = field.NewString(table, "region_logo")
	f.IsHot = field.NewInt64(table, "is_hot")
	f.LeagueGroupID = field.NewInt64(table, "league_group_id")
	f.HomeTeamID = field.NewInt64(table, "home_team_id")
	f.HomeTeamName = field.NewString(table, "home_team_name")
	f.HomeTeamLogo = field.NewString(table, "home_team_logo")
	f.AwayTeamID = field.NewInt64(table, "away_team_id")
	f.AwayTeamName = field.NewString(table, "away_team_name")
	f.AwayTeamLogo = field.NewString(table, "away_team_logo")
	f.ScorePhase = field.NewInt64(table, "score_phase")
	f.ScoreType = field.NewInt64(table, "score_type")
	f.HomeScore = field.NewInt64(table, "home_score")
	f.AwayScore = field.NewInt64(table, "away_score")
	f.MarketPhase = field.NewInt64(table, "market_phase")
	f.MarketType = field.NewInt64(table, "market_type")
	f.MarketGroup = field.NewString(table, "market_group")
	f.MarketID = field.NewInt64(table, "market_id")
	f.MarketOptionType = field.NewInt64(table, "market_option_type")
	f.MarketOptionName = field.NewString(table, "market_option_name")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fbSportsMatchResults) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbSportsMatchResults) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 35)
	f.fieldMap["id"] = f.ID
	f.fieldMap["bt"] = f.Bt
	f.fieldMap["ms"] = f.Ms
	f.fieldMap["fid"] = f.Fid
	f.fieldMap["fmt"] = f.Fmt
	f.fieldMap["ne"] = f.Ne
	f.fieldMap["sid"] = f.Sid
	f.fieldMap["match_type"] = f.MatchType
	f.fieldMap["league_id"] = f.LeagueID
	f.fieldMap["league_name"] = f.LeagueName
	f.fieldMap["league_level"] = f.LeagueLevel
	f.fieldMap["league_logo"] = f.LeagueLogo
	f.fieldMap["region_id"] = f.RegionID
	f.fieldMap["region_name"] = f.RegionName
	f.fieldMap["region_logo"] = f.RegionLogo
	f.fieldMap["is_hot"] = f.IsHot
	f.fieldMap["league_group_id"] = f.LeagueGroupID
	f.fieldMap["home_team_id"] = f.HomeTeamID
	f.fieldMap["home_team_name"] = f.HomeTeamName
	f.fieldMap["home_team_logo"] = f.HomeTeamLogo
	f.fieldMap["away_team_id"] = f.AwayTeamID
	f.fieldMap["away_team_name"] = f.AwayTeamName
	f.fieldMap["away_team_logo"] = f.AwayTeamLogo
	f.fieldMap["score_phase"] = f.ScorePhase
	f.fieldMap["score_type"] = f.ScoreType
	f.fieldMap["home_score"] = f.HomeScore
	f.fieldMap["away_score"] = f.AwayScore
	f.fieldMap["market_phase"] = f.MarketPhase
	f.fieldMap["market_type"] = f.MarketType
	f.fieldMap["market_group"] = f.MarketGroup
	f.fieldMap["market_id"] = f.MarketID
	f.fieldMap["market_option_type"] = f.MarketOptionType
	f.fieldMap["market_option_name"] = f.MarketOptionName
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fbSportsMatchResults) clone(db *gorm.DB) fbSportsMatchResults {
	f.fbSportsMatchResultsDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbSportsMatchResults) replaceDB(db *gorm.DB) fbSportsMatchResults {
	f.fbSportsMatchResultsDo.ReplaceDB(db)
	return f
}

type fbSportsMatchResultsDo struct{ gen.DO }

type IFbSportsMatchResultsDo interface {
	gen.SubQuery
	Debug() IFbSportsMatchResultsDo
	WithContext(ctx context.Context) IFbSportsMatchResultsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbSportsMatchResultsDo
	WriteDB() IFbSportsMatchResultsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbSportsMatchResultsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbSportsMatchResultsDo
	Not(conds ...gen.Condition) IFbSportsMatchResultsDo
	Or(conds ...gen.Condition) IFbSportsMatchResultsDo
	Select(conds ...field.Expr) IFbSportsMatchResultsDo
	Where(conds ...gen.Condition) IFbSportsMatchResultsDo
	Order(conds ...field.Expr) IFbSportsMatchResultsDo
	Distinct(cols ...field.Expr) IFbSportsMatchResultsDo
	Omit(cols ...field.Expr) IFbSportsMatchResultsDo
	Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchResultsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchResultsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchResultsDo
	Group(cols ...field.Expr) IFbSportsMatchResultsDo
	Having(conds ...gen.Condition) IFbSportsMatchResultsDo
	Limit(limit int) IFbSportsMatchResultsDo
	Offset(offset int) IFbSportsMatchResultsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchResultsDo
	Unscoped() IFbSportsMatchResultsDo
	Create(values ...*model.FbSportsMatchResults) error
	CreateInBatches(values []*model.FbSportsMatchResults, batchSize int) error
	Save(values ...*model.FbSportsMatchResults) error
	First() (*model.FbSportsMatchResults, error)
	Take() (*model.FbSportsMatchResults, error)
	Last() (*model.FbSportsMatchResults, error)
	Find() ([]*model.FbSportsMatchResults, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchResults, err error)
	FindInBatches(result *[]*model.FbSportsMatchResults, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbSportsMatchResults) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbSportsMatchResultsDo
	Assign(attrs ...field.AssignExpr) IFbSportsMatchResultsDo
	Joins(fields ...field.RelationField) IFbSportsMatchResultsDo
	Preload(fields ...field.RelationField) IFbSportsMatchResultsDo
	FirstOrInit() (*model.FbSportsMatchResults, error)
	FirstOrCreate() (*model.FbSportsMatchResults, error)
	FindByPage(offset int, limit int) (result []*model.FbSportsMatchResults, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbSportsMatchResultsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbSportsMatchResultsDo) Debug() IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Debug())
}

func (f fbSportsMatchResultsDo) WithContext(ctx context.Context) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbSportsMatchResultsDo) ReadDB() IFbSportsMatchResultsDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbSportsMatchResultsDo) WriteDB() IFbSportsMatchResultsDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbSportsMatchResultsDo) Session(config *gorm.Session) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbSportsMatchResultsDo) Clauses(conds ...clause.Expression) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbSportsMatchResultsDo) Returning(value interface{}, columns ...string) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbSportsMatchResultsDo) Not(conds ...gen.Condition) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbSportsMatchResultsDo) Or(conds ...gen.Condition) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbSportsMatchResultsDo) Select(conds ...field.Expr) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbSportsMatchResultsDo) Where(conds ...gen.Condition) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbSportsMatchResultsDo) Order(conds ...field.Expr) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbSportsMatchResultsDo) Distinct(cols ...field.Expr) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbSportsMatchResultsDo) Omit(cols ...field.Expr) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbSportsMatchResultsDo) Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbSportsMatchResultsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbSportsMatchResultsDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbSportsMatchResultsDo) Group(cols ...field.Expr) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbSportsMatchResultsDo) Having(conds ...gen.Condition) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbSportsMatchResultsDo) Limit(limit int) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbSportsMatchResultsDo) Offset(offset int) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbSportsMatchResultsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbSportsMatchResultsDo) Unscoped() IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbSportsMatchResultsDo) Create(values ...*model.FbSportsMatchResults) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbSportsMatchResultsDo) CreateInBatches(values []*model.FbSportsMatchResults, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbSportsMatchResultsDo) Save(values ...*model.FbSportsMatchResults) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbSportsMatchResultsDo) First() (*model.FbSportsMatchResults, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchResults), nil
	}
}

func (f fbSportsMatchResultsDo) Take() (*model.FbSportsMatchResults, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchResults), nil
	}
}

func (f fbSportsMatchResultsDo) Last() (*model.FbSportsMatchResults, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchResults), nil
	}
}

func (f fbSportsMatchResultsDo) Find() ([]*model.FbSportsMatchResults, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbSportsMatchResults), err
}

func (f fbSportsMatchResultsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchResults, err error) {
	buf := make([]*model.FbSportsMatchResults, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbSportsMatchResultsDo) FindInBatches(result *[]*model.FbSportsMatchResults, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbSportsMatchResultsDo) Attrs(attrs ...field.AssignExpr) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbSportsMatchResultsDo) Assign(attrs ...field.AssignExpr) IFbSportsMatchResultsDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbSportsMatchResultsDo) Joins(fields ...field.RelationField) IFbSportsMatchResultsDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbSportsMatchResultsDo) Preload(fields ...field.RelationField) IFbSportsMatchResultsDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbSportsMatchResultsDo) FirstOrInit() (*model.FbSportsMatchResults, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchResults), nil
	}
}

func (f fbSportsMatchResultsDo) FirstOrCreate() (*model.FbSportsMatchResults, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchResults), nil
	}
}

func (f fbSportsMatchResultsDo) FindByPage(offset int, limit int) (result []*model.FbSportsMatchResults, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbSportsMatchResultsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbSportsMatchResultsDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbSportsMatchResultsDo) Delete(models ...*model.FbSportsMatchResults) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbSportsMatchResultsDo) withDO(do gen.Dao) *fbSportsMatchResultsDo {
	f.DO = *do.(*gen.DO)
	return f
}
