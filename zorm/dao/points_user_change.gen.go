// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/common/zorm/model"
)

func newPointsUserChange(db *gorm.DB, opts ...gen.DOOption) pointsUserChange {
	_pointsUserChange := pointsUserChange{}

	_pointsUserChange.pointsUserChangeDo.UseDB(db, opts...)
	_pointsUserChange.pointsUserChangeDo.UseModel(&model.PointsUserChange{})

	tableName := _pointsUserChange.pointsUserChangeDo.TableName()
	_pointsUserChange.ALL = field.NewAsterisk(tableName)
	_pointsUserChange.ID = field.NewInt64(tableName, "id")
	_pointsUserChange.UserID = field.NewInt64(tableName, "user_id")
	_pointsUserChange.Username = field.NewString(tableName, "username")
	_pointsUserChange.Integral = field.NewInt64(tableName, "integral")
	_pointsUserChange.Type = field.NewInt64(tableName, "type")
	_pointsUserChange.Name = field.NewString(tableName, "name")
	_pointsUserChange.AfterScore = field.NewInt64(tableName, "after_score")
	_pointsUserChange.CreatedAt = field.NewInt64(tableName, "created_at")
	_pointsUserChange.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_pointsUserChange.UpdatedUser = field.NewString(tableName, "updated_user")
	_pointsUserChange.CoinBefore = field.NewField(tableName, "coin_before")
	_pointsUserChange.GoldCoins = field.NewInt64(tableName, "gold_coins")

	_pointsUserChange.fillFieldMap()

	return _pointsUserChange
}

// pointsUserChange 用户积分变动
type pointsUserChange struct {
	pointsUserChangeDo

	ALL         field.Asterisk
	ID          field.Int64
	UserID      field.Int64  // 用户id
	Username    field.String // 用户名称
	Integral    field.Int64  // 积分
	Type        field.Int64  // 状态: 1=增加,2=减少
	Name        field.String // 奖励物品名称
	AfterScore  field.Int64  // 用户变动后积分
	CreatedAt   field.Int64  // 创建时间
	UpdatedAt   field.Int64  // 更新时间
	UpdatedUser field.String // 最后修改人
	CoinBefore  field.Field  // 投注前金额
	GoldCoins   field.Int64  // 金币(用户主钱包)

	fieldMap map[string]field.Expr
}

func (p pointsUserChange) Table(newTableName string) *pointsUserChange {
	p.pointsUserChangeDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pointsUserChange) As(alias string) *pointsUserChange {
	p.pointsUserChangeDo.DO = *(p.pointsUserChangeDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pointsUserChange) updateTableName(table string) *pointsUserChange {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.UserID = field.NewInt64(table, "user_id")
	p.Username = field.NewString(table, "username")
	p.Integral = field.NewInt64(table, "integral")
	p.Type = field.NewInt64(table, "type")
	p.Name = field.NewString(table, "name")
	p.AfterScore = field.NewInt64(table, "after_score")
	p.CreatedAt = field.NewInt64(table, "created_at")
	p.UpdatedAt = field.NewInt64(table, "updated_at")
	p.UpdatedUser = field.NewString(table, "updated_user")
	p.CoinBefore = field.NewField(table, "coin_before")
	p.GoldCoins = field.NewInt64(table, "gold_coins")

	p.fillFieldMap()

	return p
}

func (p *pointsUserChange) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pointsUserChange) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 12)
	p.fieldMap["id"] = p.ID
	p.fieldMap["user_id"] = p.UserID
	p.fieldMap["username"] = p.Username
	p.fieldMap["integral"] = p.Integral
	p.fieldMap["type"] = p.Type
	p.fieldMap["name"] = p.Name
	p.fieldMap["after_score"] = p.AfterScore
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["updated_user"] = p.UpdatedUser
	p.fieldMap["coin_before"] = p.CoinBefore
	p.fieldMap["gold_coins"] = p.GoldCoins
}

func (p pointsUserChange) clone(db *gorm.DB) pointsUserChange {
	p.pointsUserChangeDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pointsUserChange) replaceDB(db *gorm.DB) pointsUserChange {
	p.pointsUserChangeDo.ReplaceDB(db)
	return p
}

type pointsUserChangeDo struct{ gen.DO }

type IPointsUserChangeDo interface {
	gen.SubQuery
	Debug() IPointsUserChangeDo
	WithContext(ctx context.Context) IPointsUserChangeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPointsUserChangeDo
	WriteDB() IPointsUserChangeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPointsUserChangeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPointsUserChangeDo
	Not(conds ...gen.Condition) IPointsUserChangeDo
	Or(conds ...gen.Condition) IPointsUserChangeDo
	Select(conds ...field.Expr) IPointsUserChangeDo
	Where(conds ...gen.Condition) IPointsUserChangeDo
	Order(conds ...field.Expr) IPointsUserChangeDo
	Distinct(cols ...field.Expr) IPointsUserChangeDo
	Omit(cols ...field.Expr) IPointsUserChangeDo
	Join(table schema.Tabler, on ...field.Expr) IPointsUserChangeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPointsUserChangeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPointsUserChangeDo
	Group(cols ...field.Expr) IPointsUserChangeDo
	Having(conds ...gen.Condition) IPointsUserChangeDo
	Limit(limit int) IPointsUserChangeDo
	Offset(offset int) IPointsUserChangeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPointsUserChangeDo
	Unscoped() IPointsUserChangeDo
	Create(values ...*model.PointsUserChange) error
	CreateInBatches(values []*model.PointsUserChange, batchSize int) error
	Save(values ...*model.PointsUserChange) error
	First() (*model.PointsUserChange, error)
	Take() (*model.PointsUserChange, error)
	Last() (*model.PointsUserChange, error)
	Find() ([]*model.PointsUserChange, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PointsUserChange, err error)
	FindInBatches(result *[]*model.PointsUserChange, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PointsUserChange) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPointsUserChangeDo
	Assign(attrs ...field.AssignExpr) IPointsUserChangeDo
	Joins(fields ...field.RelationField) IPointsUserChangeDo
	Preload(fields ...field.RelationField) IPointsUserChangeDo
	FirstOrInit() (*model.PointsUserChange, error)
	FirstOrCreate() (*model.PointsUserChange, error)
	FindByPage(offset int, limit int) (result []*model.PointsUserChange, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPointsUserChangeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pointsUserChangeDo) Debug() IPointsUserChangeDo {
	return p.withDO(p.DO.Debug())
}

func (p pointsUserChangeDo) WithContext(ctx context.Context) IPointsUserChangeDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pointsUserChangeDo) ReadDB() IPointsUserChangeDo {
	return p.Clauses(dbresolver.Read)
}

func (p pointsUserChangeDo) WriteDB() IPointsUserChangeDo {
	return p.Clauses(dbresolver.Write)
}

func (p pointsUserChangeDo) Session(config *gorm.Session) IPointsUserChangeDo {
	return p.withDO(p.DO.Session(config))
}

func (p pointsUserChangeDo) Clauses(conds ...clause.Expression) IPointsUserChangeDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pointsUserChangeDo) Returning(value interface{}, columns ...string) IPointsUserChangeDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pointsUserChangeDo) Not(conds ...gen.Condition) IPointsUserChangeDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pointsUserChangeDo) Or(conds ...gen.Condition) IPointsUserChangeDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pointsUserChangeDo) Select(conds ...field.Expr) IPointsUserChangeDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pointsUserChangeDo) Where(conds ...gen.Condition) IPointsUserChangeDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pointsUserChangeDo) Order(conds ...field.Expr) IPointsUserChangeDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pointsUserChangeDo) Distinct(cols ...field.Expr) IPointsUserChangeDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pointsUserChangeDo) Omit(cols ...field.Expr) IPointsUserChangeDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pointsUserChangeDo) Join(table schema.Tabler, on ...field.Expr) IPointsUserChangeDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pointsUserChangeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPointsUserChangeDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pointsUserChangeDo) RightJoin(table schema.Tabler, on ...field.Expr) IPointsUserChangeDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pointsUserChangeDo) Group(cols ...field.Expr) IPointsUserChangeDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pointsUserChangeDo) Having(conds ...gen.Condition) IPointsUserChangeDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pointsUserChangeDo) Limit(limit int) IPointsUserChangeDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pointsUserChangeDo) Offset(offset int) IPointsUserChangeDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pointsUserChangeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPointsUserChangeDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pointsUserChangeDo) Unscoped() IPointsUserChangeDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pointsUserChangeDo) Create(values ...*model.PointsUserChange) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pointsUserChangeDo) CreateInBatches(values []*model.PointsUserChange, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pointsUserChangeDo) Save(values ...*model.PointsUserChange) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pointsUserChangeDo) First() (*model.PointsUserChange, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PointsUserChange), nil
	}
}

func (p pointsUserChangeDo) Take() (*model.PointsUserChange, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PointsUserChange), nil
	}
}

func (p pointsUserChangeDo) Last() (*model.PointsUserChange, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PointsUserChange), nil
	}
}

func (p pointsUserChangeDo) Find() ([]*model.PointsUserChange, error) {
	result, err := p.DO.Find()
	return result.([]*model.PointsUserChange), err
}

func (p pointsUserChangeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PointsUserChange, err error) {
	buf := make([]*model.PointsUserChange, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pointsUserChangeDo) FindInBatches(result *[]*model.PointsUserChange, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pointsUserChangeDo) Attrs(attrs ...field.AssignExpr) IPointsUserChangeDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pointsUserChangeDo) Assign(attrs ...field.AssignExpr) IPointsUserChangeDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pointsUserChangeDo) Joins(fields ...field.RelationField) IPointsUserChangeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pointsUserChangeDo) Preload(fields ...field.RelationField) IPointsUserChangeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pointsUserChangeDo) FirstOrInit() (*model.PointsUserChange, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PointsUserChange), nil
	}
}

func (p pointsUserChangeDo) FirstOrCreate() (*model.PointsUserChange, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PointsUserChange), nil
	}
}

func (p pointsUserChangeDo) FindByPage(offset int, limit int) (result []*model.PointsUserChange, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pointsUserChangeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pointsUserChangeDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pointsUserChangeDo) Delete(models ...*model.PointsUserChange) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pointsUserChangeDo) withDO(do gen.Dao) *pointsUserChangeDo {
	p.DO = *do.(*gen.DO)
	return p
}
