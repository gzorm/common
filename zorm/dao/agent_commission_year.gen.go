// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/common/zorm/model"
)

func newAgentCommissionYear(db *gorm.DB, opts ...gen.DOOption) agentCommissionYear {
	_agentCommissionYear := agentCommissionYear{}

	_agentCommissionYear.agentCommissionYearDo.UseDB(db, opts...)
	_agentCommissionYear.agentCommissionYearDo.UseModel(&model.AgentCommissionYear{})

	tableName := _agentCommissionYear.agentCommissionYearDo.TableName()
	_agentCommissionYear.ALL = field.NewAsterisk(tableName)
	_agentCommissionYear.ID = field.NewInt64(tableName, "id")
	_agentCommissionYear.AgentID = field.NewInt64(tableName, "agent_id")
	_agentCommissionYear.AgentName = field.NewString(tableName, "agent_name")
	_agentCommissionYear.AgentLevelID = field.NewInt64(tableName, "agent_level_id")
	_agentCommissionYear.AgentLevelName = field.NewString(tableName, "agent_level_name")
	_agentCommissionYear.CommissionAmount = field.NewField(tableName, "commission_amount")
	_agentCommissionYear.CommissionYear = field.NewInt64(tableName, "commission_year")
	_agentCommissionYear.LastOperator = field.NewString(tableName, "last_operator")
	_agentCommissionYear.LastOperationTime = field.NewInt64(tableName, "last_operation_time")
	_agentCommissionYear.CreateTime = field.NewInt64(tableName, "create_time")

	_agentCommissionYear.fillFieldMap()

	return _agentCommissionYear
}

// agentCommissionYear 代理商年度佣金统计
type agentCommissionYear struct {
	agentCommissionYearDo

	ALL               field.Asterisk
	ID                field.Int64  // 主键ID
	AgentID           field.Int64  // 代理商ID
	AgentName         field.String // 代理商名称
	AgentLevelID      field.Int64  // 代理商等级序号
	AgentLevelName    field.String // 代理商等级名称
	CommissionAmount  field.Field  // 当年佣金额度
	CommissionYear    field.Int64  // 年
	LastOperator      field.String // 最后操作人
	LastOperationTime field.Int64  // 最后操作时间
	CreateTime        field.Int64  // 创建时间

	fieldMap map[string]field.Expr
}

func (a agentCommissionYear) Table(newTableName string) *agentCommissionYear {
	a.agentCommissionYearDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agentCommissionYear) As(alias string) *agentCommissionYear {
	a.agentCommissionYearDo.DO = *(a.agentCommissionYearDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agentCommissionYear) updateTableName(table string) *agentCommissionYear {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AgentID = field.NewInt64(table, "agent_id")
	a.AgentName = field.NewString(table, "agent_name")
	a.AgentLevelID = field.NewInt64(table, "agent_level_id")
	a.AgentLevelName = field.NewString(table, "agent_level_name")
	a.CommissionAmount = field.NewField(table, "commission_amount")
	a.CommissionYear = field.NewInt64(table, "commission_year")
	a.LastOperator = field.NewString(table, "last_operator")
	a.LastOperationTime = field.NewInt64(table, "last_operation_time")
	a.CreateTime = field.NewInt64(table, "create_time")

	a.fillFieldMap()

	return a
}

func (a *agentCommissionYear) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agentCommissionYear) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["id"] = a.ID
	a.fieldMap["agent_id"] = a.AgentID
	a.fieldMap["agent_name"] = a.AgentName
	a.fieldMap["agent_level_id"] = a.AgentLevelID
	a.fieldMap["agent_level_name"] = a.AgentLevelName
	a.fieldMap["commission_amount"] = a.CommissionAmount
	a.fieldMap["commission_year"] = a.CommissionYear
	a.fieldMap["last_operator"] = a.LastOperator
	a.fieldMap["last_operation_time"] = a.LastOperationTime
	a.fieldMap["create_time"] = a.CreateTime
}

func (a agentCommissionYear) clone(db *gorm.DB) agentCommissionYear {
	a.agentCommissionYearDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agentCommissionYear) replaceDB(db *gorm.DB) agentCommissionYear {
	a.agentCommissionYearDo.ReplaceDB(db)
	return a
}

type agentCommissionYearDo struct{ gen.DO }

type IAgentCommissionYearDo interface {
	gen.SubQuery
	Debug() IAgentCommissionYearDo
	WithContext(ctx context.Context) IAgentCommissionYearDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgentCommissionYearDo
	WriteDB() IAgentCommissionYearDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgentCommissionYearDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgentCommissionYearDo
	Not(conds ...gen.Condition) IAgentCommissionYearDo
	Or(conds ...gen.Condition) IAgentCommissionYearDo
	Select(conds ...field.Expr) IAgentCommissionYearDo
	Where(conds ...gen.Condition) IAgentCommissionYearDo
	Order(conds ...field.Expr) IAgentCommissionYearDo
	Distinct(cols ...field.Expr) IAgentCommissionYearDo
	Omit(cols ...field.Expr) IAgentCommissionYearDo
	Join(table schema.Tabler, on ...field.Expr) IAgentCommissionYearDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgentCommissionYearDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgentCommissionYearDo
	Group(cols ...field.Expr) IAgentCommissionYearDo
	Having(conds ...gen.Condition) IAgentCommissionYearDo
	Limit(limit int) IAgentCommissionYearDo
	Offset(offset int) IAgentCommissionYearDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentCommissionYearDo
	Unscoped() IAgentCommissionYearDo
	Create(values ...*model.AgentCommissionYear) error
	CreateInBatches(values []*model.AgentCommissionYear, batchSize int) error
	Save(values ...*model.AgentCommissionYear) error
	First() (*model.AgentCommissionYear, error)
	Take() (*model.AgentCommissionYear, error)
	Last() (*model.AgentCommissionYear, error)
	Find() ([]*model.AgentCommissionYear, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentCommissionYear, err error)
	FindInBatches(result *[]*model.AgentCommissionYear, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AgentCommissionYear) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgentCommissionYearDo
	Assign(attrs ...field.AssignExpr) IAgentCommissionYearDo
	Joins(fields ...field.RelationField) IAgentCommissionYearDo
	Preload(fields ...field.RelationField) IAgentCommissionYearDo
	FirstOrInit() (*model.AgentCommissionYear, error)
	FirstOrCreate() (*model.AgentCommissionYear, error)
	FindByPage(offset int, limit int) (result []*model.AgentCommissionYear, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgentCommissionYearDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agentCommissionYearDo) Debug() IAgentCommissionYearDo {
	return a.withDO(a.DO.Debug())
}

func (a agentCommissionYearDo) WithContext(ctx context.Context) IAgentCommissionYearDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentCommissionYearDo) ReadDB() IAgentCommissionYearDo {
	return a.Clauses(dbresolver.Read)
}

func (a agentCommissionYearDo) WriteDB() IAgentCommissionYearDo {
	return a.Clauses(dbresolver.Write)
}

func (a agentCommissionYearDo) Session(config *gorm.Session) IAgentCommissionYearDo {
	return a.withDO(a.DO.Session(config))
}

func (a agentCommissionYearDo) Clauses(conds ...clause.Expression) IAgentCommissionYearDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentCommissionYearDo) Returning(value interface{}, columns ...string) IAgentCommissionYearDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentCommissionYearDo) Not(conds ...gen.Condition) IAgentCommissionYearDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentCommissionYearDo) Or(conds ...gen.Condition) IAgentCommissionYearDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentCommissionYearDo) Select(conds ...field.Expr) IAgentCommissionYearDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentCommissionYearDo) Where(conds ...gen.Condition) IAgentCommissionYearDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentCommissionYearDo) Order(conds ...field.Expr) IAgentCommissionYearDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentCommissionYearDo) Distinct(cols ...field.Expr) IAgentCommissionYearDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentCommissionYearDo) Omit(cols ...field.Expr) IAgentCommissionYearDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentCommissionYearDo) Join(table schema.Tabler, on ...field.Expr) IAgentCommissionYearDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentCommissionYearDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgentCommissionYearDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentCommissionYearDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgentCommissionYearDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentCommissionYearDo) Group(cols ...field.Expr) IAgentCommissionYearDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentCommissionYearDo) Having(conds ...gen.Condition) IAgentCommissionYearDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentCommissionYearDo) Limit(limit int) IAgentCommissionYearDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentCommissionYearDo) Offset(offset int) IAgentCommissionYearDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentCommissionYearDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentCommissionYearDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentCommissionYearDo) Unscoped() IAgentCommissionYearDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agentCommissionYearDo) Create(values ...*model.AgentCommissionYear) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentCommissionYearDo) CreateInBatches(values []*model.AgentCommissionYear, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentCommissionYearDo) Save(values ...*model.AgentCommissionYear) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentCommissionYearDo) First() (*model.AgentCommissionYear, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentCommissionYear), nil
	}
}

func (a agentCommissionYearDo) Take() (*model.AgentCommissionYear, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentCommissionYear), nil
	}
}

func (a agentCommissionYearDo) Last() (*model.AgentCommissionYear, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentCommissionYear), nil
	}
}

func (a agentCommissionYearDo) Find() ([]*model.AgentCommissionYear, error) {
	result, err := a.DO.Find()
	return result.([]*model.AgentCommissionYear), err
}

func (a agentCommissionYearDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentCommissionYear, err error) {
	buf := make([]*model.AgentCommissionYear, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentCommissionYearDo) FindInBatches(result *[]*model.AgentCommissionYear, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentCommissionYearDo) Attrs(attrs ...field.AssignExpr) IAgentCommissionYearDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentCommissionYearDo) Assign(attrs ...field.AssignExpr) IAgentCommissionYearDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentCommissionYearDo) Joins(fields ...field.RelationField) IAgentCommissionYearDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentCommissionYearDo) Preload(fields ...field.RelationField) IAgentCommissionYearDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentCommissionYearDo) FirstOrInit() (*model.AgentCommissionYear, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentCommissionYear), nil
	}
}

func (a agentCommissionYearDo) FirstOrCreate() (*model.AgentCommissionYear, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentCommissionYear), nil
	}
}

func (a agentCommissionYearDo) FindByPage(offset int, limit int) (result []*model.AgentCommissionYear, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentCommissionYearDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentCommissionYearDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentCommissionYearDo) Delete(models ...*model.AgentCommissionYear) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentCommissionYearDo) withDO(do gen.Dao) *agentCommissionYearDo {
	a.DO = *do.(*gen.DO)
	return a
}
