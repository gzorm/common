// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newAgentCommissionRate(db *gorm.DB, opts ...gen.DOOption) agentCommissionRate {
	_agentCommissionRate := agentCommissionRate{}

	_agentCommissionRate.agentCommissionRateDo.UseDB(db, opts...)
	_agentCommissionRate.agentCommissionRateDo.UseModel(&model.AgentCommissionRate{})

	tableName := _agentCommissionRate.agentCommissionRateDo.TableName()
	_agentCommissionRate.ALL = field.NewAsterisk(tableName)
	_agentCommissionRate.ID = field.NewInt64(tableName, "id")
	_agentCommissionRate.AgentID = field.NewInt64(tableName, "agent_id")
	_agentCommissionRate.AgentLevel = field.NewInt64(tableName, "agent_level")
	_agentCommissionRate.SettingType = field.NewInt64(tableName, "setting_type")
	_agentCommissionRate.MinAmount = field.NewInt64(tableName, "min_amount")
	_agentCommissionRate.MaxAmount = field.NewInt64(tableName, "max_amount")
	_agentCommissionRate.AgentRate = field.NewField(tableName, "agent_rate")
	_agentCommissionRate.CreatedAt = field.NewInt64(tableName, "created_at")
	_agentCommissionRate.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_agentCommissionRate.fillFieldMap()

	return _agentCommissionRate
}

// agentCommissionRate 代理佣金分成比例表V2
type agentCommissionRate struct {
	agentCommissionRateDo

	ALL         field.Asterisk
	ID          field.Int64 // id
	AgentID     field.Int64 // 代理uid
	AgentLevel  field.Int64 // 级别
	SettingType field.Int64 // 0總代,1非總代
	MinAmount   field.Int64 // 金额区间 小
	MaxAmount   field.Int64 // 金额区间 大
	AgentRate   field.Field // 佣金比例
	CreatedAt   field.Int64 // 創建時間
	UpdatedAt   field.Int64 // 更新時間

	fieldMap map[string]field.Expr
}

func (a agentCommissionRate) Table(newTableName string) *agentCommissionRate {
	a.agentCommissionRateDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agentCommissionRate) As(alias string) *agentCommissionRate {
	a.agentCommissionRateDo.DO = *(a.agentCommissionRateDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agentCommissionRate) updateTableName(table string) *agentCommissionRate {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AgentID = field.NewInt64(table, "agent_id")
	a.AgentLevel = field.NewInt64(table, "agent_level")
	a.SettingType = field.NewInt64(table, "setting_type")
	a.MinAmount = field.NewInt64(table, "min_amount")
	a.MaxAmount = field.NewInt64(table, "max_amount")
	a.AgentRate = field.NewField(table, "agent_rate")
	a.CreatedAt = field.NewInt64(table, "created_at")
	a.UpdatedAt = field.NewInt64(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *agentCommissionRate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agentCommissionRate) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["id"] = a.ID
	a.fieldMap["agent_id"] = a.AgentID
	a.fieldMap["agent_level"] = a.AgentLevel
	a.fieldMap["setting_type"] = a.SettingType
	a.fieldMap["min_amount"] = a.MinAmount
	a.fieldMap["max_amount"] = a.MaxAmount
	a.fieldMap["agent_rate"] = a.AgentRate
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a agentCommissionRate) clone(db *gorm.DB) agentCommissionRate {
	a.agentCommissionRateDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agentCommissionRate) replaceDB(db *gorm.DB) agentCommissionRate {
	a.agentCommissionRateDo.ReplaceDB(db)
	return a
}

type agentCommissionRateDo struct{ gen.DO }

type IAgentCommissionRateDo interface {
	gen.SubQuery
	Debug() IAgentCommissionRateDo
	WithContext(ctx context.Context) IAgentCommissionRateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgentCommissionRateDo
	WriteDB() IAgentCommissionRateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgentCommissionRateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgentCommissionRateDo
	Not(conds ...gen.Condition) IAgentCommissionRateDo
	Or(conds ...gen.Condition) IAgentCommissionRateDo
	Select(conds ...field.Expr) IAgentCommissionRateDo
	Where(conds ...gen.Condition) IAgentCommissionRateDo
	Order(conds ...field.Expr) IAgentCommissionRateDo
	Distinct(cols ...field.Expr) IAgentCommissionRateDo
	Omit(cols ...field.Expr) IAgentCommissionRateDo
	Join(table schema.Tabler, on ...field.Expr) IAgentCommissionRateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgentCommissionRateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgentCommissionRateDo
	Group(cols ...field.Expr) IAgentCommissionRateDo
	Having(conds ...gen.Condition) IAgentCommissionRateDo
	Limit(limit int) IAgentCommissionRateDo
	Offset(offset int) IAgentCommissionRateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentCommissionRateDo
	Unscoped() IAgentCommissionRateDo
	Create(values ...*model.AgentCommissionRate) error
	CreateInBatches(values []*model.AgentCommissionRate, batchSize int) error
	Save(values ...*model.AgentCommissionRate) error
	First() (*model.AgentCommissionRate, error)
	Take() (*model.AgentCommissionRate, error)
	Last() (*model.AgentCommissionRate, error)
	Find() ([]*model.AgentCommissionRate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentCommissionRate, err error)
	FindInBatches(result *[]*model.AgentCommissionRate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AgentCommissionRate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgentCommissionRateDo
	Assign(attrs ...field.AssignExpr) IAgentCommissionRateDo
	Joins(fields ...field.RelationField) IAgentCommissionRateDo
	Preload(fields ...field.RelationField) IAgentCommissionRateDo
	FirstOrInit() (*model.AgentCommissionRate, error)
	FirstOrCreate() (*model.AgentCommissionRate, error)
	FindByPage(offset int, limit int) (result []*model.AgentCommissionRate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgentCommissionRateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agentCommissionRateDo) Debug() IAgentCommissionRateDo {
	return a.withDO(a.DO.Debug())
}

func (a agentCommissionRateDo) WithContext(ctx context.Context) IAgentCommissionRateDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentCommissionRateDo) ReadDB() IAgentCommissionRateDo {
	return a.Clauses(dbresolver.Read)
}

func (a agentCommissionRateDo) WriteDB() IAgentCommissionRateDo {
	return a.Clauses(dbresolver.Write)
}

func (a agentCommissionRateDo) Session(config *gorm.Session) IAgentCommissionRateDo {
	return a.withDO(a.DO.Session(config))
}

func (a agentCommissionRateDo) Clauses(conds ...clause.Expression) IAgentCommissionRateDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentCommissionRateDo) Returning(value interface{}, columns ...string) IAgentCommissionRateDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentCommissionRateDo) Not(conds ...gen.Condition) IAgentCommissionRateDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentCommissionRateDo) Or(conds ...gen.Condition) IAgentCommissionRateDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentCommissionRateDo) Select(conds ...field.Expr) IAgentCommissionRateDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentCommissionRateDo) Where(conds ...gen.Condition) IAgentCommissionRateDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentCommissionRateDo) Order(conds ...field.Expr) IAgentCommissionRateDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentCommissionRateDo) Distinct(cols ...field.Expr) IAgentCommissionRateDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentCommissionRateDo) Omit(cols ...field.Expr) IAgentCommissionRateDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentCommissionRateDo) Join(table schema.Tabler, on ...field.Expr) IAgentCommissionRateDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentCommissionRateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgentCommissionRateDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentCommissionRateDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgentCommissionRateDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentCommissionRateDo) Group(cols ...field.Expr) IAgentCommissionRateDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentCommissionRateDo) Having(conds ...gen.Condition) IAgentCommissionRateDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentCommissionRateDo) Limit(limit int) IAgentCommissionRateDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentCommissionRateDo) Offset(offset int) IAgentCommissionRateDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentCommissionRateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentCommissionRateDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentCommissionRateDo) Unscoped() IAgentCommissionRateDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agentCommissionRateDo) Create(values ...*model.AgentCommissionRate) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentCommissionRateDo) CreateInBatches(values []*model.AgentCommissionRate, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentCommissionRateDo) Save(values ...*model.AgentCommissionRate) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentCommissionRateDo) First() (*model.AgentCommissionRate, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentCommissionRate), nil
	}
}

func (a agentCommissionRateDo) Take() (*model.AgentCommissionRate, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentCommissionRate), nil
	}
}

func (a agentCommissionRateDo) Last() (*model.AgentCommissionRate, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentCommissionRate), nil
	}
}

func (a agentCommissionRateDo) Find() ([]*model.AgentCommissionRate, error) {
	result, err := a.DO.Find()
	return result.([]*model.AgentCommissionRate), err
}

func (a agentCommissionRateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentCommissionRate, err error) {
	buf := make([]*model.AgentCommissionRate, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentCommissionRateDo) FindInBatches(result *[]*model.AgentCommissionRate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentCommissionRateDo) Attrs(attrs ...field.AssignExpr) IAgentCommissionRateDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentCommissionRateDo) Assign(attrs ...field.AssignExpr) IAgentCommissionRateDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentCommissionRateDo) Joins(fields ...field.RelationField) IAgentCommissionRateDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentCommissionRateDo) Preload(fields ...field.RelationField) IAgentCommissionRateDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentCommissionRateDo) FirstOrInit() (*model.AgentCommissionRate, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentCommissionRate), nil
	}
}

func (a agentCommissionRateDo) FirstOrCreate() (*model.AgentCommissionRate, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentCommissionRate), nil
	}
}

func (a agentCommissionRateDo) FindByPage(offset int, limit int) (result []*model.AgentCommissionRate, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentCommissionRateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentCommissionRateDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentCommissionRateDo) Delete(models ...*model.AgentCommissionRate) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentCommissionRateDo) withDO(do gen.Dao) *agentCommissionRateDo {
	a.DO = *do.(*gen.DO)
	return a
}
