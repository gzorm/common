// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newWinPromotionKpi(db *gorm.DB, opts ...gen.DOOption) winPromotionKpi {
	_winPromotionKpi := winPromotionKpi{}

	_winPromotionKpi.winPromotionKpiDo.UseDB(db, opts...)
	_winPromotionKpi.winPromotionKpiDo.UseModel(&model.WinPromotionKpi{})

	tableName := _winPromotionKpi.winPromotionKpiDo.TableName()
	_winPromotionKpi.ALL = field.NewAsterisk(tableName)
	_winPromotionKpi.ID = field.NewInt64(tableName, "id")
	_winPromotionKpi.WeekNumber = field.NewString(tableName, "week_number")
	_winPromotionKpi.RegisteredUsers = field.NewInt64(tableName, "registered_users")
	_winPromotionKpi.PaidUsers = field.NewInt64(tableName, "paid_users")
	_winPromotionKpi.NegativeProfit = field.NewField(tableName, "negative_profit")
	_winPromotionKpi.CreatedAt = field.NewInt64(tableName, "created_at")
	_winPromotionKpi.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_winPromotionKpi.fillFieldMap()

	return _winPromotionKpi
}

// winPromotionKpi 团队长KPI
type winPromotionKpi struct {
	winPromotionKpiDo

	ALL             field.Asterisk
	ID              field.Int64
	WeekNumber      field.String // 时间
	RegisteredUsers field.Int64  // 注册用户/周
	PaidUsers       field.Int64  // 付费用户/周
	NegativeProfit  field.Field  // 负盈利总额/周 单位EGP
	CreatedAt       field.Int64  // 创建时间
	UpdatedAt       field.Int64  // 更新时间

	fieldMap map[string]field.Expr
}

func (w winPromotionKpi) Table(newTableName string) *winPromotionKpi {
	w.winPromotionKpiDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winPromotionKpi) As(alias string) *winPromotionKpi {
	w.winPromotionKpiDo.DO = *(w.winPromotionKpiDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winPromotionKpi) updateTableName(table string) *winPromotionKpi {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.WeekNumber = field.NewString(table, "week_number")
	w.RegisteredUsers = field.NewInt64(table, "registered_users")
	w.PaidUsers = field.NewInt64(table, "paid_users")
	w.NegativeProfit = field.NewField(table, "negative_profit")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *winPromotionKpi) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winPromotionKpi) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 7)
	w.fieldMap["id"] = w.ID
	w.fieldMap["week_number"] = w.WeekNumber
	w.fieldMap["registered_users"] = w.RegisteredUsers
	w.fieldMap["paid_users"] = w.PaidUsers
	w.fieldMap["negative_profit"] = w.NegativeProfit
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w winPromotionKpi) clone(db *gorm.DB) winPromotionKpi {
	w.winPromotionKpiDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winPromotionKpi) replaceDB(db *gorm.DB) winPromotionKpi {
	w.winPromotionKpiDo.ReplaceDB(db)
	return w
}

type winPromotionKpiDo struct{ gen.DO }

type IWinPromotionKpiDo interface {
	gen.SubQuery
	Debug() IWinPromotionKpiDo
	WithContext(ctx context.Context) IWinPromotionKpiDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinPromotionKpiDo
	WriteDB() IWinPromotionKpiDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinPromotionKpiDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinPromotionKpiDo
	Not(conds ...gen.Condition) IWinPromotionKpiDo
	Or(conds ...gen.Condition) IWinPromotionKpiDo
	Select(conds ...field.Expr) IWinPromotionKpiDo
	Where(conds ...gen.Condition) IWinPromotionKpiDo
	Order(conds ...field.Expr) IWinPromotionKpiDo
	Distinct(cols ...field.Expr) IWinPromotionKpiDo
	Omit(cols ...field.Expr) IWinPromotionKpiDo
	Join(table schema.Tabler, on ...field.Expr) IWinPromotionKpiDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinPromotionKpiDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinPromotionKpiDo
	Group(cols ...field.Expr) IWinPromotionKpiDo
	Having(conds ...gen.Condition) IWinPromotionKpiDo
	Limit(limit int) IWinPromotionKpiDo
	Offset(offset int) IWinPromotionKpiDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinPromotionKpiDo
	Unscoped() IWinPromotionKpiDo
	Create(values ...*model.WinPromotionKpi) error
	CreateInBatches(values []*model.WinPromotionKpi, batchSize int) error
	Save(values ...*model.WinPromotionKpi) error
	First() (*model.WinPromotionKpi, error)
	Take() (*model.WinPromotionKpi, error)
	Last() (*model.WinPromotionKpi, error)
	Find() ([]*model.WinPromotionKpi, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinPromotionKpi, err error)
	FindInBatches(result *[]*model.WinPromotionKpi, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinPromotionKpi) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinPromotionKpiDo
	Assign(attrs ...field.AssignExpr) IWinPromotionKpiDo
	Joins(fields ...field.RelationField) IWinPromotionKpiDo
	Preload(fields ...field.RelationField) IWinPromotionKpiDo
	FirstOrInit() (*model.WinPromotionKpi, error)
	FirstOrCreate() (*model.WinPromotionKpi, error)
	FindByPage(offset int, limit int) (result []*model.WinPromotionKpi, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinPromotionKpiDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winPromotionKpiDo) Debug() IWinPromotionKpiDo {
	return w.withDO(w.DO.Debug())
}

func (w winPromotionKpiDo) WithContext(ctx context.Context) IWinPromotionKpiDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winPromotionKpiDo) ReadDB() IWinPromotionKpiDo {
	return w.Clauses(dbresolver.Read)
}

func (w winPromotionKpiDo) WriteDB() IWinPromotionKpiDo {
	return w.Clauses(dbresolver.Write)
}

func (w winPromotionKpiDo) Session(config *gorm.Session) IWinPromotionKpiDo {
	return w.withDO(w.DO.Session(config))
}

func (w winPromotionKpiDo) Clauses(conds ...clause.Expression) IWinPromotionKpiDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winPromotionKpiDo) Returning(value interface{}, columns ...string) IWinPromotionKpiDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winPromotionKpiDo) Not(conds ...gen.Condition) IWinPromotionKpiDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winPromotionKpiDo) Or(conds ...gen.Condition) IWinPromotionKpiDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winPromotionKpiDo) Select(conds ...field.Expr) IWinPromotionKpiDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winPromotionKpiDo) Where(conds ...gen.Condition) IWinPromotionKpiDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winPromotionKpiDo) Order(conds ...field.Expr) IWinPromotionKpiDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winPromotionKpiDo) Distinct(cols ...field.Expr) IWinPromotionKpiDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winPromotionKpiDo) Omit(cols ...field.Expr) IWinPromotionKpiDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winPromotionKpiDo) Join(table schema.Tabler, on ...field.Expr) IWinPromotionKpiDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winPromotionKpiDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinPromotionKpiDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winPromotionKpiDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinPromotionKpiDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winPromotionKpiDo) Group(cols ...field.Expr) IWinPromotionKpiDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winPromotionKpiDo) Having(conds ...gen.Condition) IWinPromotionKpiDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winPromotionKpiDo) Limit(limit int) IWinPromotionKpiDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winPromotionKpiDo) Offset(offset int) IWinPromotionKpiDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winPromotionKpiDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinPromotionKpiDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winPromotionKpiDo) Unscoped() IWinPromotionKpiDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winPromotionKpiDo) Create(values ...*model.WinPromotionKpi) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winPromotionKpiDo) CreateInBatches(values []*model.WinPromotionKpi, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winPromotionKpiDo) Save(values ...*model.WinPromotionKpi) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winPromotionKpiDo) First() (*model.WinPromotionKpi, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinPromotionKpi), nil
	}
}

func (w winPromotionKpiDo) Take() (*model.WinPromotionKpi, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinPromotionKpi), nil
	}
}

func (w winPromotionKpiDo) Last() (*model.WinPromotionKpi, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinPromotionKpi), nil
	}
}

func (w winPromotionKpiDo) Find() ([]*model.WinPromotionKpi, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinPromotionKpi), err
}

func (w winPromotionKpiDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinPromotionKpi, err error) {
	buf := make([]*model.WinPromotionKpi, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winPromotionKpiDo) FindInBatches(result *[]*model.WinPromotionKpi, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winPromotionKpiDo) Attrs(attrs ...field.AssignExpr) IWinPromotionKpiDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winPromotionKpiDo) Assign(attrs ...field.AssignExpr) IWinPromotionKpiDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winPromotionKpiDo) Joins(fields ...field.RelationField) IWinPromotionKpiDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winPromotionKpiDo) Preload(fields ...field.RelationField) IWinPromotionKpiDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winPromotionKpiDo) FirstOrInit() (*model.WinPromotionKpi, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinPromotionKpi), nil
	}
}

func (w winPromotionKpiDo) FirstOrCreate() (*model.WinPromotionKpi, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinPromotionKpi), nil
	}
}

func (w winPromotionKpiDo) FindByPage(offset int, limit int) (result []*model.WinPromotionKpi, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winPromotionKpiDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winPromotionKpiDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winPromotionKpiDo) Delete(models ...*model.WinPromotionKpi) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winPromotionKpiDo) withDO(do gen.Dao) *winPromotionKpiDo {
	w.DO = *do.(*gen.DO)
	return w
}
