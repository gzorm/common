// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newFbSportsMatchMarketOptions(db *gorm.DB, opts ...gen.DOOption) fbSportsMatchMarketOptions {
	_fbSportsMatchMarketOptions := fbSportsMatchMarketOptions{}

	_fbSportsMatchMarketOptions.fbSportsMatchMarketOptionsDo.UseDB(db, opts...)
	_fbSportsMatchMarketOptions.fbSportsMatchMarketOptionsDo.UseModel(&model.FbSportsMatchMarketOptions{})

	tableName := _fbSportsMatchMarketOptions.fbSportsMatchMarketOptionsDo.TableName()
	_fbSportsMatchMarketOptions.ALL = field.NewAsterisk(tableName)
	_fbSportsMatchMarketOptions.ID = field.NewInt64(tableName, "id")
	_fbSportsMatchMarketOptions.MatchID = field.NewInt64(tableName, "match_id")
	_fbSportsMatchMarketOptions.MarketID = field.NewInt64(tableName, "market_id")
	_fbSportsMatchMarketOptions.SelectionNameFull = field.NewString(tableName, "selection_name_full")
	_fbSportsMatchMarketOptions.SelectionNameShort = field.NewString(tableName, "selection_name_short")
	_fbSportsMatchMarketOptions.TeamID = field.NewInt64(tableName, "team_id")
	_fbSportsMatchMarketOptions.SelectionType = field.NewInt64(tableName, "selection_type")
	_fbSportsMatchMarketOptions.OddsEuropean = field.NewField(tableName, "odds_european")
	_fbSportsMatchMarketOptions.Odds = field.NewField(tableName, "odds")
	_fbSportsMatchMarketOptions.OddsType = field.NewInt64(tableName, "odds_type")
	_fbSportsMatchMarketOptions.Outcome = field.NewInt64(tableName, "outcome")
	_fbSportsMatchMarketOptions.LineOld = field.NewString(tableName, "line_old")
	_fbSportsMatchMarketOptions.MarketSaleStatus = field.NewInt64(tableName, "market_sale_status")
	_fbSportsMatchMarketOptions.IsAccumulator = field.NewInt64(tableName, "is_accumulator")
	_fbSportsMatchMarketOptions.IsBestLine = field.NewInt64(tableName, "is_best_line")
	_fbSportsMatchMarketOptions.LineValue = field.NewString(tableName, "line_value")
	_fbSportsMatchMarketOptions.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbSportsMatchMarketOptions.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_fbSportsMatchMarketOptions.fillFieldMap()

	return _fbSportsMatchMarketOptions
}

// fbSportsMatchMarketOptions 玩法选项表
type fbSportsMatchMarketOptions struct {
	fbSportsMatchMarketOptionsDo

	ALL                field.Asterisk
	ID                 field.Int64  // 主键ID
	MatchID            field.Int64  // 赛事ID
	MarketID           field.Int64  // 玩法ID，关联到具体的玩法
	SelectionNameFull  field.String // 选项全称，投注框一般用全称展示
	SelectionNameShort field.String // 选项简称(全名or简名，订单相关为全名，否则为简名)
	TeamID             field.Int64  // 球员玩法球队ID
	SelectionType      field.Int64  // 选项类型，主、客、大、小等，投注时需要提交该字段作为选中的选项参数
	OddsEuropean       field.Field  // 欧盘赔率，目前我们只提供欧洲盘赔率，投注时请提交该字段赔率值作为选项赔率，赔率小于0代表锁盘
	Odds               field.Field  // 赔率，根据请求参数返回对应类型赔率
	OddsType           field.Int64  // 赔率类型
	Outcome            field.Int64  // 选项结算结果，仅虚拟体育展示
	LineOld            field.String // 带线玩法的线，老版本兼容字段，可忽略。如大小球 大 2.5 中的 2.5
	MarketSaleStatus   field.Int64  // 玩法销售状态，0暂停，1开售，-1未开售（未开售状态一般是不展示的）
	IsAccumulator      field.Int64  // 是否支持串关，0 不可串关，1 可串关
	IsBestLine         field.Int64  // 是否为最优线，带线玩法可用该字段进行排序，从小到大
	LineValue          field.String // line值，带线玩法的线，例如大小球2.5线，部分玩法展示可用该字段进行分组展示
	CreatedAt          field.Int64  // 创建时间
	UpdatedAt          field.Int64  // 更新时间

	fieldMap map[string]field.Expr
}

func (f fbSportsMatchMarketOptions) Table(newTableName string) *fbSportsMatchMarketOptions {
	f.fbSportsMatchMarketOptionsDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbSportsMatchMarketOptions) As(alias string) *fbSportsMatchMarketOptions {
	f.fbSportsMatchMarketOptionsDo.DO = *(f.fbSportsMatchMarketOptionsDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbSportsMatchMarketOptions) updateTableName(table string) *fbSportsMatchMarketOptions {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.MatchID = field.NewInt64(table, "match_id")
	f.MarketID = field.NewInt64(table, "market_id")
	f.SelectionNameFull = field.NewString(table, "selection_name_full")
	f.SelectionNameShort = field.NewString(table, "selection_name_short")
	f.TeamID = field.NewInt64(table, "team_id")
	f.SelectionType = field.NewInt64(table, "selection_type")
	f.OddsEuropean = field.NewField(table, "odds_european")
	f.Odds = field.NewField(table, "odds")
	f.OddsType = field.NewInt64(table, "odds_type")
	f.Outcome = field.NewInt64(table, "outcome")
	f.LineOld = field.NewString(table, "line_old")
	f.MarketSaleStatus = field.NewInt64(table, "market_sale_status")
	f.IsAccumulator = field.NewInt64(table, "is_accumulator")
	f.IsBestLine = field.NewInt64(table, "is_best_line")
	f.LineValue = field.NewString(table, "line_value")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fbSportsMatchMarketOptions) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbSportsMatchMarketOptions) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 18)
	f.fieldMap["id"] = f.ID
	f.fieldMap["match_id"] = f.MatchID
	f.fieldMap["market_id"] = f.MarketID
	f.fieldMap["selection_name_full"] = f.SelectionNameFull
	f.fieldMap["selection_name_short"] = f.SelectionNameShort
	f.fieldMap["team_id"] = f.TeamID
	f.fieldMap["selection_type"] = f.SelectionType
	f.fieldMap["odds_european"] = f.OddsEuropean
	f.fieldMap["odds"] = f.Odds
	f.fieldMap["odds_type"] = f.OddsType
	f.fieldMap["outcome"] = f.Outcome
	f.fieldMap["line_old"] = f.LineOld
	f.fieldMap["market_sale_status"] = f.MarketSaleStatus
	f.fieldMap["is_accumulator"] = f.IsAccumulator
	f.fieldMap["is_best_line"] = f.IsBestLine
	f.fieldMap["line_value"] = f.LineValue
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fbSportsMatchMarketOptions) clone(db *gorm.DB) fbSportsMatchMarketOptions {
	f.fbSportsMatchMarketOptionsDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbSportsMatchMarketOptions) replaceDB(db *gorm.DB) fbSportsMatchMarketOptions {
	f.fbSportsMatchMarketOptionsDo.ReplaceDB(db)
	return f
}

type fbSportsMatchMarketOptionsDo struct{ gen.DO }

type IFbSportsMatchMarketOptionsDo interface {
	gen.SubQuery
	Debug() IFbSportsMatchMarketOptionsDo
	WithContext(ctx context.Context) IFbSportsMatchMarketOptionsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbSportsMatchMarketOptionsDo
	WriteDB() IFbSportsMatchMarketOptionsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbSportsMatchMarketOptionsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbSportsMatchMarketOptionsDo
	Not(conds ...gen.Condition) IFbSportsMatchMarketOptionsDo
	Or(conds ...gen.Condition) IFbSportsMatchMarketOptionsDo
	Select(conds ...field.Expr) IFbSportsMatchMarketOptionsDo
	Where(conds ...gen.Condition) IFbSportsMatchMarketOptionsDo
	Order(conds ...field.Expr) IFbSportsMatchMarketOptionsDo
	Distinct(cols ...field.Expr) IFbSportsMatchMarketOptionsDo
	Omit(cols ...field.Expr) IFbSportsMatchMarketOptionsDo
	Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOptionsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOptionsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOptionsDo
	Group(cols ...field.Expr) IFbSportsMatchMarketOptionsDo
	Having(conds ...gen.Condition) IFbSportsMatchMarketOptionsDo
	Limit(limit int) IFbSportsMatchMarketOptionsDo
	Offset(offset int) IFbSportsMatchMarketOptionsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchMarketOptionsDo
	Unscoped() IFbSportsMatchMarketOptionsDo
	Create(values ...*model.FbSportsMatchMarketOptions) error
	CreateInBatches(values []*model.FbSportsMatchMarketOptions, batchSize int) error
	Save(values ...*model.FbSportsMatchMarketOptions) error
	First() (*model.FbSportsMatchMarketOptions, error)
	Take() (*model.FbSportsMatchMarketOptions, error)
	Last() (*model.FbSportsMatchMarketOptions, error)
	Find() ([]*model.FbSportsMatchMarketOptions, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchMarketOptions, err error)
	FindInBatches(result *[]*model.FbSportsMatchMarketOptions, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbSportsMatchMarketOptions) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbSportsMatchMarketOptionsDo
	Assign(attrs ...field.AssignExpr) IFbSportsMatchMarketOptionsDo
	Joins(fields ...field.RelationField) IFbSportsMatchMarketOptionsDo
	Preload(fields ...field.RelationField) IFbSportsMatchMarketOptionsDo
	FirstOrInit() (*model.FbSportsMatchMarketOptions, error)
	FirstOrCreate() (*model.FbSportsMatchMarketOptions, error)
	FindByPage(offset int, limit int) (result []*model.FbSportsMatchMarketOptions, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbSportsMatchMarketOptionsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbSportsMatchMarketOptionsDo) Debug() IFbSportsMatchMarketOptionsDo {
	return f.withDO(f.DO.Debug())
}

func (f fbSportsMatchMarketOptionsDo) WithContext(ctx context.Context) IFbSportsMatchMarketOptionsDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbSportsMatchMarketOptionsDo) ReadDB() IFbSportsMatchMarketOptionsDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbSportsMatchMarketOptionsDo) WriteDB() IFbSportsMatchMarketOptionsDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbSportsMatchMarketOptionsDo) Session(config *gorm.Session) IFbSportsMatchMarketOptionsDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbSportsMatchMarketOptionsDo) Clauses(conds ...clause.Expression) IFbSportsMatchMarketOptionsDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbSportsMatchMarketOptionsDo) Returning(value interface{}, columns ...string) IFbSportsMatchMarketOptionsDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbSportsMatchMarketOptionsDo) Not(conds ...gen.Condition) IFbSportsMatchMarketOptionsDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbSportsMatchMarketOptionsDo) Or(conds ...gen.Condition) IFbSportsMatchMarketOptionsDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbSportsMatchMarketOptionsDo) Select(conds ...field.Expr) IFbSportsMatchMarketOptionsDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbSportsMatchMarketOptionsDo) Where(conds ...gen.Condition) IFbSportsMatchMarketOptionsDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbSportsMatchMarketOptionsDo) Order(conds ...field.Expr) IFbSportsMatchMarketOptionsDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbSportsMatchMarketOptionsDo) Distinct(cols ...field.Expr) IFbSportsMatchMarketOptionsDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbSportsMatchMarketOptionsDo) Omit(cols ...field.Expr) IFbSportsMatchMarketOptionsDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbSportsMatchMarketOptionsDo) Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOptionsDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbSportsMatchMarketOptionsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOptionsDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbSportsMatchMarketOptionsDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOptionsDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbSportsMatchMarketOptionsDo) Group(cols ...field.Expr) IFbSportsMatchMarketOptionsDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbSportsMatchMarketOptionsDo) Having(conds ...gen.Condition) IFbSportsMatchMarketOptionsDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbSportsMatchMarketOptionsDo) Limit(limit int) IFbSportsMatchMarketOptionsDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbSportsMatchMarketOptionsDo) Offset(offset int) IFbSportsMatchMarketOptionsDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbSportsMatchMarketOptionsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchMarketOptionsDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbSportsMatchMarketOptionsDo) Unscoped() IFbSportsMatchMarketOptionsDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbSportsMatchMarketOptionsDo) Create(values ...*model.FbSportsMatchMarketOptions) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbSportsMatchMarketOptionsDo) CreateInBatches(values []*model.FbSportsMatchMarketOptions, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbSportsMatchMarketOptionsDo) Save(values ...*model.FbSportsMatchMarketOptions) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbSportsMatchMarketOptionsDo) First() (*model.FbSportsMatchMarketOptions, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketOptions), nil
	}
}

func (f fbSportsMatchMarketOptionsDo) Take() (*model.FbSportsMatchMarketOptions, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketOptions), nil
	}
}

func (f fbSportsMatchMarketOptionsDo) Last() (*model.FbSportsMatchMarketOptions, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketOptions), nil
	}
}

func (f fbSportsMatchMarketOptionsDo) Find() ([]*model.FbSportsMatchMarketOptions, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbSportsMatchMarketOptions), err
}

func (f fbSportsMatchMarketOptionsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchMarketOptions, err error) {
	buf := make([]*model.FbSportsMatchMarketOptions, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbSportsMatchMarketOptionsDo) FindInBatches(result *[]*model.FbSportsMatchMarketOptions, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbSportsMatchMarketOptionsDo) Attrs(attrs ...field.AssignExpr) IFbSportsMatchMarketOptionsDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbSportsMatchMarketOptionsDo) Assign(attrs ...field.AssignExpr) IFbSportsMatchMarketOptionsDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbSportsMatchMarketOptionsDo) Joins(fields ...field.RelationField) IFbSportsMatchMarketOptionsDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbSportsMatchMarketOptionsDo) Preload(fields ...field.RelationField) IFbSportsMatchMarketOptionsDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbSportsMatchMarketOptionsDo) FirstOrInit() (*model.FbSportsMatchMarketOptions, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketOptions), nil
	}
}

func (f fbSportsMatchMarketOptionsDo) FirstOrCreate() (*model.FbSportsMatchMarketOptions, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketOptions), nil
	}
}

func (f fbSportsMatchMarketOptionsDo) FindByPage(offset int, limit int) (result []*model.FbSportsMatchMarketOptions, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbSportsMatchMarketOptionsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbSportsMatchMarketOptionsDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbSportsMatchMarketOptionsDo) Delete(models ...*model.FbSportsMatchMarketOptions) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbSportsMatchMarketOptionsDo) withDO(do gen.Dao) *fbSportsMatchMarketOptionsDo {
	f.DO = *do.(*gen.DO)
	return f
}
