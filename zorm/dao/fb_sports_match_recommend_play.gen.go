// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newFbSportsMatchRecommendPlay(db *gorm.DB, opts ...gen.DOOption) fbSportsMatchRecommendPlay {
	_fbSportsMatchRecommendPlay := fbSportsMatchRecommendPlay{}

	_fbSportsMatchRecommendPlay.fbSportsMatchRecommendPlayDo.UseDB(db, opts...)
	_fbSportsMatchRecommendPlay.fbSportsMatchRecommendPlayDo.UseModel(&model.FbSportsMatchRecommendPlay{})

	tableName := _fbSportsMatchRecommendPlay.fbSportsMatchRecommendPlayDo.TableName()
	_fbSportsMatchRecommendPlay.ALL = field.NewAsterisk(tableName)
	_fbSportsMatchRecommendPlay.ID = field.NewInt64(tableName, "id")
	_fbSportsMatchRecommendPlay.Mid = field.NewInt64(tableName, "mid")
	_fbSportsMatchRecommendPlay.Bt = field.NewInt64(tableName, "bt")
	_fbSportsMatchRecommendPlay.Ms = field.NewInt64(tableName, "ms")
	_fbSportsMatchRecommendPlay.DescText = field.NewString(tableName, "desc_text")
	_fbSportsMatchRecommendPlay.Nm = field.NewString(tableName, "nm")
	_fbSportsMatchRecommendPlay.PlayID = field.NewInt64(tableName, "play_id")
	_fbSportsMatchRecommendPlay.Ss = field.NewInt64(tableName, "ss")
	_fbSportsMatchRecommendPlay.Au = field.NewInt64(tableName, "au")
	_fbSportsMatchRecommendPlay.Mbl = field.NewInt64(tableName, "mbl")
	_fbSportsMatchRecommendPlay.Li = field.NewString(tableName, "li")
	_fbSportsMatchRecommendPlay.Mty = field.NewInt64(tableName, "mty")
	_fbSportsMatchRecommendPlay.Na = field.NewString(tableName, "na")
	_fbSportsMatchRecommendPlay.NmShort = field.NewString(tableName, "nm_short")
	_fbSportsMatchRecommendPlay.Tid = field.NewInt64(tableName, "tid")
	_fbSportsMatchRecommendPlay.Ty = field.NewInt64(tableName, "ty")
	_fbSportsMatchRecommendPlay.Od = field.NewField(tableName, "od")
	_fbSportsMatchRecommendPlay.Bod = field.NewField(tableName, "bod")
	_fbSportsMatchRecommendPlay.Odt = field.NewInt64(tableName, "odt")
	_fbSportsMatchRecommendPlay.Otcm = field.NewInt64(tableName, "otcm")
	_fbSportsMatchRecommendPlay.LiOld = field.NewString(tableName, "li_old")
	_fbSportsMatchRecommendPlay.LgNa = field.NewString(tableName, "lg_na")
	_fbSportsMatchRecommendPlay.LgID = field.NewInt64(tableName, "lg_id")
	_fbSportsMatchRecommendPlay.TsNa = field.NewString(tableName, "ts_na")
	_fbSportsMatchRecommendPlay.TsID = field.NewInt64(tableName, "ts_id")
	_fbSportsMatchRecommendPlay.TsLurl = field.NewString(tableName, "ts_lurl")
	_fbSportsMatchRecommendPlay.CreatedAt = field.NewTime(tableName, "created_at")
	_fbSportsMatchRecommendPlay.UpdatedAt = field.NewTime(tableName, "updated_at")

	_fbSportsMatchRecommendPlay.fillFieldMap()

	return _fbSportsMatchRecommendPlay
}

// fbSportsMatchRecommendPlay 玩法推荐表
type fbSportsMatchRecommendPlay struct {
	fbSportsMatchRecommendPlayDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键ID
	Mid       field.Int64  // 赛事ID
	Bt        field.Int64  // 赛事开赛时间
	Ms        field.Int64  // 赛事进行状态
	DescText  field.String // 推荐原因
	Nm        field.String // 盘口组名
	PlayID    field.Int64  // 玩法ID
	Ss        field.Int64  // 玩法销售状态 (0: 暂停, 1: 开售, -1: 未开售)
	Au        field.Int64  // 是否支持串关 (0: 不可串关, 1: 可串关)
	Mbl       field.Int64  // 是否为最优线 (用于带线玩法排序)
	Li        field.String // line值，例如大小球2.5线
	Mty       field.Int64  // 玩法类型，如亚盘、大小球等
	Na        field.String // 选项全称 (投注框展示)
	NmShort   field.String // 选项简称 (赔率列表展示)
	Tid       field.Int64  // 球员玩法球队ID
	Ty        field.Int64  // 选项类型 (主、客、大、小等)
	Od        field.Field  // 欧盘赔率 (小于0代表锁盘)
	Bod       field.Field  // 赔率，返回对应类型赔率
	Odt       field.Int64  // 赔率类型
	Otcm      field.Int64  // 选项结算结果 (仅虚拟体育展示)
	LiOld     field.String // 带线玩法的线 (老版本兼容字段)
	LgNa      field.String // 联赛名称
	LgID      field.Int64  // 联赛ID
	TsNa      field.String // 球队名称
	TsID      field.Int64  // 球队ID
	TsLurl    field.String // 球队图标地址
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (f fbSportsMatchRecommendPlay) Table(newTableName string) *fbSportsMatchRecommendPlay {
	f.fbSportsMatchRecommendPlayDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbSportsMatchRecommendPlay) As(alias string) *fbSportsMatchRecommendPlay {
	f.fbSportsMatchRecommendPlayDo.DO = *(f.fbSportsMatchRecommendPlayDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbSportsMatchRecommendPlay) updateTableName(table string) *fbSportsMatchRecommendPlay {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Mid = field.NewInt64(table, "mid")
	f.Bt = field.NewInt64(table, "bt")
	f.Ms = field.NewInt64(table, "ms")
	f.DescText = field.NewString(table, "desc_text")
	f.Nm = field.NewString(table, "nm")
	f.PlayID = field.NewInt64(table, "play_id")
	f.Ss = field.NewInt64(table, "ss")
	f.Au = field.NewInt64(table, "au")
	f.Mbl = field.NewInt64(table, "mbl")
	f.Li = field.NewString(table, "li")
	f.Mty = field.NewInt64(table, "mty")
	f.Na = field.NewString(table, "na")
	f.NmShort = field.NewString(table, "nm_short")
	f.Tid = field.NewInt64(table, "tid")
	f.Ty = field.NewInt64(table, "ty")
	f.Od = field.NewField(table, "od")
	f.Bod = field.NewField(table, "bod")
	f.Odt = field.NewInt64(table, "odt")
	f.Otcm = field.NewInt64(table, "otcm")
	f.LiOld = field.NewString(table, "li_old")
	f.LgNa = field.NewString(table, "lg_na")
	f.LgID = field.NewInt64(table, "lg_id")
	f.TsNa = field.NewString(table, "ts_na")
	f.TsID = field.NewInt64(table, "ts_id")
	f.TsLurl = field.NewString(table, "ts_lurl")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fbSportsMatchRecommendPlay) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbSportsMatchRecommendPlay) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 28)
	f.fieldMap["id"] = f.ID
	f.fieldMap["mid"] = f.Mid
	f.fieldMap["bt"] = f.Bt
	f.fieldMap["ms"] = f.Ms
	f.fieldMap["desc_text"] = f.DescText
	f.fieldMap["nm"] = f.Nm
	f.fieldMap["play_id"] = f.PlayID
	f.fieldMap["ss"] = f.Ss
	f.fieldMap["au"] = f.Au
	f.fieldMap["mbl"] = f.Mbl
	f.fieldMap["li"] = f.Li
	f.fieldMap["mty"] = f.Mty
	f.fieldMap["na"] = f.Na
	f.fieldMap["nm_short"] = f.NmShort
	f.fieldMap["tid"] = f.Tid
	f.fieldMap["ty"] = f.Ty
	f.fieldMap["od"] = f.Od
	f.fieldMap["bod"] = f.Bod
	f.fieldMap["odt"] = f.Odt
	f.fieldMap["otcm"] = f.Otcm
	f.fieldMap["li_old"] = f.LiOld
	f.fieldMap["lg_na"] = f.LgNa
	f.fieldMap["lg_id"] = f.LgID
	f.fieldMap["ts_na"] = f.TsNa
	f.fieldMap["ts_id"] = f.TsID
	f.fieldMap["ts_lurl"] = f.TsLurl
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fbSportsMatchRecommendPlay) clone(db *gorm.DB) fbSportsMatchRecommendPlay {
	f.fbSportsMatchRecommendPlayDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbSportsMatchRecommendPlay) replaceDB(db *gorm.DB) fbSportsMatchRecommendPlay {
	f.fbSportsMatchRecommendPlayDo.ReplaceDB(db)
	return f
}

type fbSportsMatchRecommendPlayDo struct{ gen.DO }

type IFbSportsMatchRecommendPlayDo interface {
	gen.SubQuery
	Debug() IFbSportsMatchRecommendPlayDo
	WithContext(ctx context.Context) IFbSportsMatchRecommendPlayDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbSportsMatchRecommendPlayDo
	WriteDB() IFbSportsMatchRecommendPlayDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbSportsMatchRecommendPlayDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbSportsMatchRecommendPlayDo
	Not(conds ...gen.Condition) IFbSportsMatchRecommendPlayDo
	Or(conds ...gen.Condition) IFbSportsMatchRecommendPlayDo
	Select(conds ...field.Expr) IFbSportsMatchRecommendPlayDo
	Where(conds ...gen.Condition) IFbSportsMatchRecommendPlayDo
	Order(conds ...field.Expr) IFbSportsMatchRecommendPlayDo
	Distinct(cols ...field.Expr) IFbSportsMatchRecommendPlayDo
	Omit(cols ...field.Expr) IFbSportsMatchRecommendPlayDo
	Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchRecommendPlayDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchRecommendPlayDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchRecommendPlayDo
	Group(cols ...field.Expr) IFbSportsMatchRecommendPlayDo
	Having(conds ...gen.Condition) IFbSportsMatchRecommendPlayDo
	Limit(limit int) IFbSportsMatchRecommendPlayDo
	Offset(offset int) IFbSportsMatchRecommendPlayDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchRecommendPlayDo
	Unscoped() IFbSportsMatchRecommendPlayDo
	Create(values ...*model.FbSportsMatchRecommendPlay) error
	CreateInBatches(values []*model.FbSportsMatchRecommendPlay, batchSize int) error
	Save(values ...*model.FbSportsMatchRecommendPlay) error
	First() (*model.FbSportsMatchRecommendPlay, error)
	Take() (*model.FbSportsMatchRecommendPlay, error)
	Last() (*model.FbSportsMatchRecommendPlay, error)
	Find() ([]*model.FbSportsMatchRecommendPlay, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchRecommendPlay, err error)
	FindInBatches(result *[]*model.FbSportsMatchRecommendPlay, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbSportsMatchRecommendPlay) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbSportsMatchRecommendPlayDo
	Assign(attrs ...field.AssignExpr) IFbSportsMatchRecommendPlayDo
	Joins(fields ...field.RelationField) IFbSportsMatchRecommendPlayDo
	Preload(fields ...field.RelationField) IFbSportsMatchRecommendPlayDo
	FirstOrInit() (*model.FbSportsMatchRecommendPlay, error)
	FirstOrCreate() (*model.FbSportsMatchRecommendPlay, error)
	FindByPage(offset int, limit int) (result []*model.FbSportsMatchRecommendPlay, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbSportsMatchRecommendPlayDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbSportsMatchRecommendPlayDo) Debug() IFbSportsMatchRecommendPlayDo {
	return f.withDO(f.DO.Debug())
}

func (f fbSportsMatchRecommendPlayDo) WithContext(ctx context.Context) IFbSportsMatchRecommendPlayDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbSportsMatchRecommendPlayDo) ReadDB() IFbSportsMatchRecommendPlayDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbSportsMatchRecommendPlayDo) WriteDB() IFbSportsMatchRecommendPlayDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbSportsMatchRecommendPlayDo) Session(config *gorm.Session) IFbSportsMatchRecommendPlayDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbSportsMatchRecommendPlayDo) Clauses(conds ...clause.Expression) IFbSportsMatchRecommendPlayDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbSportsMatchRecommendPlayDo) Returning(value interface{}, columns ...string) IFbSportsMatchRecommendPlayDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbSportsMatchRecommendPlayDo) Not(conds ...gen.Condition) IFbSportsMatchRecommendPlayDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbSportsMatchRecommendPlayDo) Or(conds ...gen.Condition) IFbSportsMatchRecommendPlayDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbSportsMatchRecommendPlayDo) Select(conds ...field.Expr) IFbSportsMatchRecommendPlayDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbSportsMatchRecommendPlayDo) Where(conds ...gen.Condition) IFbSportsMatchRecommendPlayDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbSportsMatchRecommendPlayDo) Order(conds ...field.Expr) IFbSportsMatchRecommendPlayDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbSportsMatchRecommendPlayDo) Distinct(cols ...field.Expr) IFbSportsMatchRecommendPlayDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbSportsMatchRecommendPlayDo) Omit(cols ...field.Expr) IFbSportsMatchRecommendPlayDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbSportsMatchRecommendPlayDo) Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchRecommendPlayDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbSportsMatchRecommendPlayDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchRecommendPlayDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbSportsMatchRecommendPlayDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchRecommendPlayDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbSportsMatchRecommendPlayDo) Group(cols ...field.Expr) IFbSportsMatchRecommendPlayDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbSportsMatchRecommendPlayDo) Having(conds ...gen.Condition) IFbSportsMatchRecommendPlayDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbSportsMatchRecommendPlayDo) Limit(limit int) IFbSportsMatchRecommendPlayDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbSportsMatchRecommendPlayDo) Offset(offset int) IFbSportsMatchRecommendPlayDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbSportsMatchRecommendPlayDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchRecommendPlayDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbSportsMatchRecommendPlayDo) Unscoped() IFbSportsMatchRecommendPlayDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbSportsMatchRecommendPlayDo) Create(values ...*model.FbSportsMatchRecommendPlay) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbSportsMatchRecommendPlayDo) CreateInBatches(values []*model.FbSportsMatchRecommendPlay, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbSportsMatchRecommendPlayDo) Save(values ...*model.FbSportsMatchRecommendPlay) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbSportsMatchRecommendPlayDo) First() (*model.FbSportsMatchRecommendPlay, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchRecommendPlay), nil
	}
}

func (f fbSportsMatchRecommendPlayDo) Take() (*model.FbSportsMatchRecommendPlay, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchRecommendPlay), nil
	}
}

func (f fbSportsMatchRecommendPlayDo) Last() (*model.FbSportsMatchRecommendPlay, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchRecommendPlay), nil
	}
}

func (f fbSportsMatchRecommendPlayDo) Find() ([]*model.FbSportsMatchRecommendPlay, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbSportsMatchRecommendPlay), err
}

func (f fbSportsMatchRecommendPlayDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchRecommendPlay, err error) {
	buf := make([]*model.FbSportsMatchRecommendPlay, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbSportsMatchRecommendPlayDo) FindInBatches(result *[]*model.FbSportsMatchRecommendPlay, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbSportsMatchRecommendPlayDo) Attrs(attrs ...field.AssignExpr) IFbSportsMatchRecommendPlayDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbSportsMatchRecommendPlayDo) Assign(attrs ...field.AssignExpr) IFbSportsMatchRecommendPlayDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbSportsMatchRecommendPlayDo) Joins(fields ...field.RelationField) IFbSportsMatchRecommendPlayDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbSportsMatchRecommendPlayDo) Preload(fields ...field.RelationField) IFbSportsMatchRecommendPlayDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbSportsMatchRecommendPlayDo) FirstOrInit() (*model.FbSportsMatchRecommendPlay, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchRecommendPlay), nil
	}
}

func (f fbSportsMatchRecommendPlayDo) FirstOrCreate() (*model.FbSportsMatchRecommendPlay, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchRecommendPlay), nil
	}
}

func (f fbSportsMatchRecommendPlayDo) FindByPage(offset int, limit int) (result []*model.FbSportsMatchRecommendPlay, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbSportsMatchRecommendPlayDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbSportsMatchRecommendPlayDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbSportsMatchRecommendPlayDo) Delete(models ...*model.FbSportsMatchRecommendPlay) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbSportsMatchRecommendPlayDo) withDO(do gen.Dao) *fbSportsMatchRecommendPlayDo {
	f.DO = *do.(*gen.DO)
	return f
}
