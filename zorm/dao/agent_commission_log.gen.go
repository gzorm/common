// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/common/zorm/model"
)

func newAgentCommissionLog(db *gorm.DB, opts ...gen.DOOption) agentCommissionLog {
	_agentCommissionLog := agentCommissionLog{}

	_agentCommissionLog.agentCommissionLogDo.UseDB(db, opts...)
	_agentCommissionLog.agentCommissionLogDo.UseModel(&model.AgentCommissionLog{})

	tableName := _agentCommissionLog.agentCommissionLogDo.TableName()
	_agentCommissionLog.ALL = field.NewAsterisk(tableName)
	_agentCommissionLog.ID = field.NewInt64(tableName, "id")
	_agentCommissionLog.OrderID = field.NewString(tableName, "order_id")
	_agentCommissionLog.AgentID = field.NewInt64(tableName, "agent_id")
	_agentCommissionLog.AgentId1 = field.NewInt64(tableName, "agent_id1")
	_agentCommissionLog.AgentId2 = field.NewInt64(tableName, "agent_id2")
	_agentCommissionLog.AgentId3 = field.NewInt64(tableName, "agent_id3")
	_agentCommissionLog.AgentName = field.NewString(tableName, "agent_name")
	_agentCommissionLog.TradeType = field.NewInt64(tableName, "trade_type")
	_agentCommissionLog.OutIn = field.NewInt64(tableName, "out_in")
	_agentCommissionLog.CoinBefore = field.NewField(tableName, "coin_before")
	_agentCommissionLog.Coin = field.NewField(tableName, "coin")
	_agentCommissionLog.CoinAfter = field.NewField(tableName, "coin_after")
	_agentCommissionLog.CreateTime = field.NewInt64(tableName, "create_time")

	_agentCommissionLog.fillFieldMap()

	return _agentCommissionLog
}

// agentCommissionLog 代理商佣金记录
type agentCommissionLog struct {
	agentCommissionLogDo

	ALL        field.Asterisk
	ID         field.Int64  // 主键序号
	OrderID    field.String // 订单序号
	AgentID    field.Int64  // 代理商序号
	AgentId1   field.Int64  // 一级代理序号
	AgentId2   field.Int64  // 二级代理序号
	AgentId3   field.Int64  // 三级代理序号
	AgentName  field.String // 代理账号
	TradeType  field.Int64  // 交易类型 1==发放 2==扣除 3==提现成功  4==提现失败
	OutIn      field.Int64  // 收支类型 0==支出  1==收入
	CoinBefore field.Field  // 交易前金额
	Coin       field.Field  // 交易金额
	CoinAfter  field.Field  // 交易后金额
	CreateTime field.Int64  // 交易时间

	fieldMap map[string]field.Expr
}

func (a agentCommissionLog) Table(newTableName string) *agentCommissionLog {
	a.agentCommissionLogDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agentCommissionLog) As(alias string) *agentCommissionLog {
	a.agentCommissionLogDo.DO = *(a.agentCommissionLogDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agentCommissionLog) updateTableName(table string) *agentCommissionLog {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.OrderID = field.NewString(table, "order_id")
	a.AgentID = field.NewInt64(table, "agent_id")
	a.AgentId1 = field.NewInt64(table, "agent_id1")
	a.AgentId2 = field.NewInt64(table, "agent_id2")
	a.AgentId3 = field.NewInt64(table, "agent_id3")
	a.AgentName = field.NewString(table, "agent_name")
	a.TradeType = field.NewInt64(table, "trade_type")
	a.OutIn = field.NewInt64(table, "out_in")
	a.CoinBefore = field.NewField(table, "coin_before")
	a.Coin = field.NewField(table, "coin")
	a.CoinAfter = field.NewField(table, "coin_after")
	a.CreateTime = field.NewInt64(table, "create_time")

	a.fillFieldMap()

	return a
}

func (a *agentCommissionLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agentCommissionLog) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 13)
	a.fieldMap["id"] = a.ID
	a.fieldMap["order_id"] = a.OrderID
	a.fieldMap["agent_id"] = a.AgentID
	a.fieldMap["agent_id1"] = a.AgentId1
	a.fieldMap["agent_id2"] = a.AgentId2
	a.fieldMap["agent_id3"] = a.AgentId3
	a.fieldMap["agent_name"] = a.AgentName
	a.fieldMap["trade_type"] = a.TradeType
	a.fieldMap["out_in"] = a.OutIn
	a.fieldMap["coin_before"] = a.CoinBefore
	a.fieldMap["coin"] = a.Coin
	a.fieldMap["coin_after"] = a.CoinAfter
	a.fieldMap["create_time"] = a.CreateTime
}

func (a agentCommissionLog) clone(db *gorm.DB) agentCommissionLog {
	a.agentCommissionLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agentCommissionLog) replaceDB(db *gorm.DB) agentCommissionLog {
	a.agentCommissionLogDo.ReplaceDB(db)
	return a
}

type agentCommissionLogDo struct{ gen.DO }

type IAgentCommissionLogDo interface {
	gen.SubQuery
	Debug() IAgentCommissionLogDo
	WithContext(ctx context.Context) IAgentCommissionLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgentCommissionLogDo
	WriteDB() IAgentCommissionLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgentCommissionLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgentCommissionLogDo
	Not(conds ...gen.Condition) IAgentCommissionLogDo
	Or(conds ...gen.Condition) IAgentCommissionLogDo
	Select(conds ...field.Expr) IAgentCommissionLogDo
	Where(conds ...gen.Condition) IAgentCommissionLogDo
	Order(conds ...field.Expr) IAgentCommissionLogDo
	Distinct(cols ...field.Expr) IAgentCommissionLogDo
	Omit(cols ...field.Expr) IAgentCommissionLogDo
	Join(table schema.Tabler, on ...field.Expr) IAgentCommissionLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgentCommissionLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgentCommissionLogDo
	Group(cols ...field.Expr) IAgentCommissionLogDo
	Having(conds ...gen.Condition) IAgentCommissionLogDo
	Limit(limit int) IAgentCommissionLogDo
	Offset(offset int) IAgentCommissionLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentCommissionLogDo
	Unscoped() IAgentCommissionLogDo
	Create(values ...*model.AgentCommissionLog) error
	CreateInBatches(values []*model.AgentCommissionLog, batchSize int) error
	Save(values ...*model.AgentCommissionLog) error
	First() (*model.AgentCommissionLog, error)
	Take() (*model.AgentCommissionLog, error)
	Last() (*model.AgentCommissionLog, error)
	Find() ([]*model.AgentCommissionLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentCommissionLog, err error)
	FindInBatches(result *[]*model.AgentCommissionLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AgentCommissionLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgentCommissionLogDo
	Assign(attrs ...field.AssignExpr) IAgentCommissionLogDo
	Joins(fields ...field.RelationField) IAgentCommissionLogDo
	Preload(fields ...field.RelationField) IAgentCommissionLogDo
	FirstOrInit() (*model.AgentCommissionLog, error)
	FirstOrCreate() (*model.AgentCommissionLog, error)
	FindByPage(offset int, limit int) (result []*model.AgentCommissionLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgentCommissionLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agentCommissionLogDo) Debug() IAgentCommissionLogDo {
	return a.withDO(a.DO.Debug())
}

func (a agentCommissionLogDo) WithContext(ctx context.Context) IAgentCommissionLogDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentCommissionLogDo) ReadDB() IAgentCommissionLogDo {
	return a.Clauses(dbresolver.Read)
}

func (a agentCommissionLogDo) WriteDB() IAgentCommissionLogDo {
	return a.Clauses(dbresolver.Write)
}

func (a agentCommissionLogDo) Session(config *gorm.Session) IAgentCommissionLogDo {
	return a.withDO(a.DO.Session(config))
}

func (a agentCommissionLogDo) Clauses(conds ...clause.Expression) IAgentCommissionLogDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentCommissionLogDo) Returning(value interface{}, columns ...string) IAgentCommissionLogDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentCommissionLogDo) Not(conds ...gen.Condition) IAgentCommissionLogDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentCommissionLogDo) Or(conds ...gen.Condition) IAgentCommissionLogDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentCommissionLogDo) Select(conds ...field.Expr) IAgentCommissionLogDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentCommissionLogDo) Where(conds ...gen.Condition) IAgentCommissionLogDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentCommissionLogDo) Order(conds ...field.Expr) IAgentCommissionLogDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentCommissionLogDo) Distinct(cols ...field.Expr) IAgentCommissionLogDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentCommissionLogDo) Omit(cols ...field.Expr) IAgentCommissionLogDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentCommissionLogDo) Join(table schema.Tabler, on ...field.Expr) IAgentCommissionLogDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentCommissionLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgentCommissionLogDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentCommissionLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgentCommissionLogDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentCommissionLogDo) Group(cols ...field.Expr) IAgentCommissionLogDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentCommissionLogDo) Having(conds ...gen.Condition) IAgentCommissionLogDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentCommissionLogDo) Limit(limit int) IAgentCommissionLogDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentCommissionLogDo) Offset(offset int) IAgentCommissionLogDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentCommissionLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentCommissionLogDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentCommissionLogDo) Unscoped() IAgentCommissionLogDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agentCommissionLogDo) Create(values ...*model.AgentCommissionLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentCommissionLogDo) CreateInBatches(values []*model.AgentCommissionLog, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentCommissionLogDo) Save(values ...*model.AgentCommissionLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentCommissionLogDo) First() (*model.AgentCommissionLog, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentCommissionLog), nil
	}
}

func (a agentCommissionLogDo) Take() (*model.AgentCommissionLog, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentCommissionLog), nil
	}
}

func (a agentCommissionLogDo) Last() (*model.AgentCommissionLog, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentCommissionLog), nil
	}
}

func (a agentCommissionLogDo) Find() ([]*model.AgentCommissionLog, error) {
	result, err := a.DO.Find()
	return result.([]*model.AgentCommissionLog), err
}

func (a agentCommissionLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentCommissionLog, err error) {
	buf := make([]*model.AgentCommissionLog, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentCommissionLogDo) FindInBatches(result *[]*model.AgentCommissionLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentCommissionLogDo) Attrs(attrs ...field.AssignExpr) IAgentCommissionLogDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentCommissionLogDo) Assign(attrs ...field.AssignExpr) IAgentCommissionLogDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentCommissionLogDo) Joins(fields ...field.RelationField) IAgentCommissionLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentCommissionLogDo) Preload(fields ...field.RelationField) IAgentCommissionLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentCommissionLogDo) FirstOrInit() (*model.AgentCommissionLog, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentCommissionLog), nil
	}
}

func (a agentCommissionLogDo) FirstOrCreate() (*model.AgentCommissionLog, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentCommissionLog), nil
	}
}

func (a agentCommissionLogDo) FindByPage(offset int, limit int) (result []*model.AgentCommissionLog, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentCommissionLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentCommissionLogDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentCommissionLogDo) Delete(models ...*model.AgentCommissionLog) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentCommissionLogDo) withDO(do gen.Dao) *agentCommissionLogDo {
	a.DO = *do.(*gen.DO)
	return a
}
