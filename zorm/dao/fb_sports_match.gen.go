// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newFbSportsMatch(db *gorm.DB, opts ...gen.DOOption) fbSportsMatch {
	_fbSportsMatch := fbSportsMatch{}

	_fbSportsMatch.fbSportsMatchDo.UseDB(db, opts...)
	_fbSportsMatch.fbSportsMatchDo.UseModel(&model.FbSportsMatch{})

	tableName := _fbSportsMatch.fbSportsMatchDo.TableName()
	_fbSportsMatch.ALL = field.NewAsterisk(tableName)
	_fbSportsMatch.ID = field.NewInt64(tableName, "id")
	_fbSportsMatch.FbID = field.NewInt64(tableName, "fb_id")
	_fbSportsMatch.LanguageType = field.NewString(tableName, "languageType")
	_fbSportsMatch.MatchPlayType = field.NewInt64(tableName, "match_play_type")
	_fbSportsMatch.Nsg = field.NewString(tableName, "nsg")
	_fbSportsMatch.Mg = field.NewString(tableName, "mg")
	_fbSportsMatch.Tms = field.NewInt64(tableName, "tms")
	_fbSportsMatch.Tps = field.NewString(tableName, "tps")
	_fbSportsMatch.Lg = field.NewString(tableName, "lg")
	_fbSportsMatch.Ts = field.NewString(tableName, "ts")
	_fbSportsMatch.Mc = field.NewString(tableName, "mc")
	_fbSportsMatch.Bt = field.NewInt64(tableName, "bt")
	_fbSportsMatch.Ms = field.NewInt64(tableName, "ms")
	_fbSportsMatch.Fid = field.NewInt64(tableName, "fid")
	_fbSportsMatch.Fmt = field.NewInt64(tableName, "fmt")
	_fbSportsMatch.Ss = field.NewInt64(tableName, "ss")
	_fbSportsMatch.Ne = field.NewInt64(tableName, "ne")
	_fbSportsMatch.As_ = field.NewString(tableName, "as")
	_fbSportsMatch.Sid = field.NewInt64(tableName, "sid")
	_fbSportsMatch.Ssi = field.NewInt64(tableName, "ssi")
	_fbSportsMatch.Mp = field.NewString(tableName, "mp")
	_fbSportsMatch.Smt = field.NewInt64(tableName, "smt")
	_fbSportsMatch.Ty = field.NewInt64(tableName, "ty")
	_fbSportsMatch.Ye = field.NewString(tableName, "ye")
	_fbSportsMatch.Nm = field.NewString(tableName, "nm")
	_fbSportsMatch.Sb = field.NewString(tableName, "sb")
	_fbSportsMatch.Pl = field.NewInt64(tableName, "pl")
	_fbSportsMatch.CreatedAt = field.NewTime(tableName, "created_at")
	_fbSportsMatch.UpdatedAt = field.NewTime(tableName, "updated_at")

	_fbSportsMatch.fillFieldMap()

	return _fbSportsMatch
}

// fbSportsMatch 赛事表
type fbSportsMatch struct {
	fbSportsMatchDo

	ALL           field.Asterisk
	ID            field.Int64
	FbID          field.Int64  // 赛事ID
	LanguageType  field.String // 语言类型
	MatchPlayType field.Int64  // 赛事分组类型
	Nsg           field.String // 比分列表，提供各个赛事阶段的比分
	Mg            field.String // 赔率列表
	Tms           field.Int64  // 单个赛事玩法总数
	Tps           field.String // 盘口组标签集合
	Lg            field.String // 联赛信息
	Ts            field.String // 球队信息，包含主队和客队
	Mc            field.String // 比赛时钟信息
	Bt            field.Int64  // 开赛时间
	Ms            field.Int64  // 赛事进行状态
	Fid           field.Int64  // 赛制的场次、局数、节数
	Fmt           field.Int64  // 赛制
	Ss            field.Int64  // 销售状态 1 开售，2 暂停，其他状态都不展示
	Ne            field.Int64  // 中立场标记 0 非中立场 ，1 中立场
	As_           field.String // 动画直播地址集合
	Sid           field.Int64  // 运动ID
	Ssi           field.Int64  // 主/客发球 1主队发球 2客队发球
	Mp            field.String // 赛事辅助标记，如附加赛、季前赛等
	Smt           field.Int64  // 滚球赛事当前阶段标识：常规时间，加时赛，点球大战等
	Ty            field.Int64  // 赛事类型 1 冠军投注赛事，2 正常赛事 , see enum: match_type
	Ye            field.String // 冠军赛事联赛赛季，如：2019年
	Nm            field.String // 冠军赛赛事名称，用于展示
	Sb            field.String // 比分板
	Pl            field.Int64  // 是否可以开售滚球盘口 0 否，1 是
	CreatedAt     field.Time   // 创建时间
	UpdatedAt     field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (f fbSportsMatch) Table(newTableName string) *fbSportsMatch {
	f.fbSportsMatchDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbSportsMatch) As(alias string) *fbSportsMatch {
	f.fbSportsMatchDo.DO = *(f.fbSportsMatchDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbSportsMatch) updateTableName(table string) *fbSportsMatch {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.FbID = field.NewInt64(table, "fb_id")
	f.LanguageType = field.NewString(table, "languageType")
	f.MatchPlayType = field.NewInt64(table, "match_play_type")
	f.Nsg = field.NewString(table, "nsg")
	f.Mg = field.NewString(table, "mg")
	f.Tms = field.NewInt64(table, "tms")
	f.Tps = field.NewString(table, "tps")
	f.Lg = field.NewString(table, "lg")
	f.Ts = field.NewString(table, "ts")
	f.Mc = field.NewString(table, "mc")
	f.Bt = field.NewInt64(table, "bt")
	f.Ms = field.NewInt64(table, "ms")
	f.Fid = field.NewInt64(table, "fid")
	f.Fmt = field.NewInt64(table, "fmt")
	f.Ss = field.NewInt64(table, "ss")
	f.Ne = field.NewInt64(table, "ne")
	f.As_ = field.NewString(table, "as")
	f.Sid = field.NewInt64(table, "sid")
	f.Ssi = field.NewInt64(table, "ssi")
	f.Mp = field.NewString(table, "mp")
	f.Smt = field.NewInt64(table, "smt")
	f.Ty = field.NewInt64(table, "ty")
	f.Ye = field.NewString(table, "ye")
	f.Nm = field.NewString(table, "nm")
	f.Sb = field.NewString(table, "sb")
	f.Pl = field.NewInt64(table, "pl")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fbSportsMatch) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbSportsMatch) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 29)
	f.fieldMap["id"] = f.ID
	f.fieldMap["fb_id"] = f.FbID
	f.fieldMap["languageType"] = f.LanguageType
	f.fieldMap["match_play_type"] = f.MatchPlayType
	f.fieldMap["nsg"] = f.Nsg
	f.fieldMap["mg"] = f.Mg
	f.fieldMap["tms"] = f.Tms
	f.fieldMap["tps"] = f.Tps
	f.fieldMap["lg"] = f.Lg
	f.fieldMap["ts"] = f.Ts
	f.fieldMap["mc"] = f.Mc
	f.fieldMap["bt"] = f.Bt
	f.fieldMap["ms"] = f.Ms
	f.fieldMap["fid"] = f.Fid
	f.fieldMap["fmt"] = f.Fmt
	f.fieldMap["ss"] = f.Ss
	f.fieldMap["ne"] = f.Ne
	f.fieldMap["as"] = f.As_
	f.fieldMap["sid"] = f.Sid
	f.fieldMap["ssi"] = f.Ssi
	f.fieldMap["mp"] = f.Mp
	f.fieldMap["smt"] = f.Smt
	f.fieldMap["ty"] = f.Ty
	f.fieldMap["ye"] = f.Ye
	f.fieldMap["nm"] = f.Nm
	f.fieldMap["sb"] = f.Sb
	f.fieldMap["pl"] = f.Pl
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fbSportsMatch) clone(db *gorm.DB) fbSportsMatch {
	f.fbSportsMatchDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbSportsMatch) replaceDB(db *gorm.DB) fbSportsMatch {
	f.fbSportsMatchDo.ReplaceDB(db)
	return f
}

type fbSportsMatchDo struct{ gen.DO }

type IFbSportsMatchDo interface {
	gen.SubQuery
	Debug() IFbSportsMatchDo
	WithContext(ctx context.Context) IFbSportsMatchDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbSportsMatchDo
	WriteDB() IFbSportsMatchDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbSportsMatchDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbSportsMatchDo
	Not(conds ...gen.Condition) IFbSportsMatchDo
	Or(conds ...gen.Condition) IFbSportsMatchDo
	Select(conds ...field.Expr) IFbSportsMatchDo
	Where(conds ...gen.Condition) IFbSportsMatchDo
	Order(conds ...field.Expr) IFbSportsMatchDo
	Distinct(cols ...field.Expr) IFbSportsMatchDo
	Omit(cols ...field.Expr) IFbSportsMatchDo
	Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchDo
	Group(cols ...field.Expr) IFbSportsMatchDo
	Having(conds ...gen.Condition) IFbSportsMatchDo
	Limit(limit int) IFbSportsMatchDo
	Offset(offset int) IFbSportsMatchDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchDo
	Unscoped() IFbSportsMatchDo
	Create(values ...*model.FbSportsMatch) error
	CreateInBatches(values []*model.FbSportsMatch, batchSize int) error
	Save(values ...*model.FbSportsMatch) error
	First() (*model.FbSportsMatch, error)
	Take() (*model.FbSportsMatch, error)
	Last() (*model.FbSportsMatch, error)
	Find() ([]*model.FbSportsMatch, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatch, err error)
	FindInBatches(result *[]*model.FbSportsMatch, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbSportsMatch) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbSportsMatchDo
	Assign(attrs ...field.AssignExpr) IFbSportsMatchDo
	Joins(fields ...field.RelationField) IFbSportsMatchDo
	Preload(fields ...field.RelationField) IFbSportsMatchDo
	FirstOrInit() (*model.FbSportsMatch, error)
	FirstOrCreate() (*model.FbSportsMatch, error)
	FindByPage(offset int, limit int) (result []*model.FbSportsMatch, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbSportsMatchDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbSportsMatchDo) Debug() IFbSportsMatchDo {
	return f.withDO(f.DO.Debug())
}

func (f fbSportsMatchDo) WithContext(ctx context.Context) IFbSportsMatchDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbSportsMatchDo) ReadDB() IFbSportsMatchDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbSportsMatchDo) WriteDB() IFbSportsMatchDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbSportsMatchDo) Session(config *gorm.Session) IFbSportsMatchDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbSportsMatchDo) Clauses(conds ...clause.Expression) IFbSportsMatchDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbSportsMatchDo) Returning(value interface{}, columns ...string) IFbSportsMatchDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbSportsMatchDo) Not(conds ...gen.Condition) IFbSportsMatchDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbSportsMatchDo) Or(conds ...gen.Condition) IFbSportsMatchDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbSportsMatchDo) Select(conds ...field.Expr) IFbSportsMatchDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbSportsMatchDo) Where(conds ...gen.Condition) IFbSportsMatchDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbSportsMatchDo) Order(conds ...field.Expr) IFbSportsMatchDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbSportsMatchDo) Distinct(cols ...field.Expr) IFbSportsMatchDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbSportsMatchDo) Omit(cols ...field.Expr) IFbSportsMatchDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbSportsMatchDo) Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbSportsMatchDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbSportsMatchDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbSportsMatchDo) Group(cols ...field.Expr) IFbSportsMatchDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbSportsMatchDo) Having(conds ...gen.Condition) IFbSportsMatchDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbSportsMatchDo) Limit(limit int) IFbSportsMatchDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbSportsMatchDo) Offset(offset int) IFbSportsMatchDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbSportsMatchDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbSportsMatchDo) Unscoped() IFbSportsMatchDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbSportsMatchDo) Create(values ...*model.FbSportsMatch) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbSportsMatchDo) CreateInBatches(values []*model.FbSportsMatch, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbSportsMatchDo) Save(values ...*model.FbSportsMatch) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbSportsMatchDo) First() (*model.FbSportsMatch, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatch), nil
	}
}

func (f fbSportsMatchDo) Take() (*model.FbSportsMatch, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatch), nil
	}
}

func (f fbSportsMatchDo) Last() (*model.FbSportsMatch, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatch), nil
	}
}

func (f fbSportsMatchDo) Find() ([]*model.FbSportsMatch, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbSportsMatch), err
}

func (f fbSportsMatchDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatch, err error) {
	buf := make([]*model.FbSportsMatch, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbSportsMatchDo) FindInBatches(result *[]*model.FbSportsMatch, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbSportsMatchDo) Attrs(attrs ...field.AssignExpr) IFbSportsMatchDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbSportsMatchDo) Assign(attrs ...field.AssignExpr) IFbSportsMatchDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbSportsMatchDo) Joins(fields ...field.RelationField) IFbSportsMatchDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbSportsMatchDo) Preload(fields ...field.RelationField) IFbSportsMatchDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbSportsMatchDo) FirstOrInit() (*model.FbSportsMatch, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatch), nil
	}
}

func (f fbSportsMatchDo) FirstOrCreate() (*model.FbSportsMatch, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatch), nil
	}
}

func (f fbSportsMatchDo) FindByPage(offset int, limit int) (result []*model.FbSportsMatch, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbSportsMatchDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbSportsMatchDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbSportsMatchDo) Delete(models ...*model.FbSportsMatch) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbSportsMatchDo) withDO(do gen.Dao) *fbSportsMatchDo {
	f.DO = *do.(*gen.DO)
	return f
}
