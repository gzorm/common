// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newFbSportsMatchStats(db *gorm.DB, opts ...gen.DOOption) fbSportsMatchStats {
	_fbSportsMatchStats := fbSportsMatchStats{}

	_fbSportsMatchStats.fbSportsMatchStatsDo.UseDB(db, opts...)
	_fbSportsMatchStats.fbSportsMatchStatsDo.UseModel(&model.FbSportsMatchStats{})

	tableName := _fbSportsMatchStats.fbSportsMatchStatsDo.TableName()
	_fbSportsMatchStats.ALL = field.NewAsterisk(tableName)
	_fbSportsMatchStats.ID = field.NewInt64(tableName, "id")
	_fbSportsMatchStats.LeagueID = field.NewInt64(tableName, "league_id")
	_fbSportsMatchStats.TypeForLeagueStat = field.NewInt64(tableName, "type_for_league_stat")
	_fbSportsMatchStats.TotalMatches = field.NewInt64(tableName, "total_matches")
	_fbSportsMatchStats.HotTotal = field.NewInt64(tableName, "hot_total")
	_fbSportsMatchStats.CategoryType = field.NewInt64(tableName, "category_type")
	_fbSportsMatchStats.CategoryDesc = field.NewString(tableName, "category_desc")
	_fbSportsMatchStats.CategoryTotal = field.NewInt64(tableName, "category_total")
	_fbSportsMatchStats.SportID = field.NewInt64(tableName, "sport_id")
	_fbSportsMatchStats.SportMatchCount = field.NewInt64(tableName, "sport_match_count")
	_fbSportsMatchStats.HotLeagueID = field.NewInt64(tableName, "hot_league_id")
	_fbSportsMatchStats.HotLeagueName = field.NewString(tableName, "hot_league_name")
	_fbSportsMatchStats.HotLeagueLogo = field.NewString(tableName, "hot_league_logo")
	_fbSportsMatchStats.MarketID = field.NewString(tableName, "market_id")
	_fbSportsMatchStats.MarketType = field.NewInt64(tableName, "market_type")
	_fbSportsMatchStats.MarketPeriod = field.NewInt64(tableName, "market_period")
	_fbSportsMatchStats.CreatedAt = field.NewTime(tableName, "created_at")
	_fbSportsMatchStats.UpdatedAt = field.NewTime(tableName, "updated_at")

	_fbSportsMatchStats.fillFieldMap()

	return _fbSportsMatchStats
}

// fbSportsMatchStats 赛事统计表
type fbSportsMatchStats struct {
	fbSportsMatchStatsDo

	ALL               field.Asterisk
	ID                field.Int64  // 主键ID
	LeagueID          field.Int64  // 联赛ID
	TypeForLeagueStat field.Int64  // 赛事分组类型 (影响 hls 字段)
	TotalMatches      field.Int64  // 赛事总数
	HotTotal          field.Int64  // 热门赛事总数 (包括竞彩赛事和热门联赛赛事)
	CategoryType      field.Int64  // 分类类型，如滚球、今日、早盘等
	CategoryDesc      field.String // 分类描述
	CategoryTotal     field.Int64  // 该分类下的赛事总数
	SportID           field.Int64  // 运动种类ID
	SportMatchCount   field.Int64  // 该运动种类下的赛事个数
	HotLeagueID       field.Int64  // 热门联赛ID
	HotLeagueName     field.String // 热门联赛名称
	HotLeagueLogo     field.String // 热门联赛logo URL
	MarketID          field.String // 盘口组合 ID (请求方定义)
	MarketType        field.Int64  // 盘口类型
	MarketPeriod      field.Int64  // 盘口阶段
	CreatedAt         field.Time   // 创建时间
	UpdatedAt         field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (f fbSportsMatchStats) Table(newTableName string) *fbSportsMatchStats {
	f.fbSportsMatchStatsDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbSportsMatchStats) As(alias string) *fbSportsMatchStats {
	f.fbSportsMatchStatsDo.DO = *(f.fbSportsMatchStatsDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbSportsMatchStats) updateTableName(table string) *fbSportsMatchStats {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.LeagueID = field.NewInt64(table, "league_id")
	f.TypeForLeagueStat = field.NewInt64(table, "type_for_league_stat")
	f.TotalMatches = field.NewInt64(table, "total_matches")
	f.HotTotal = field.NewInt64(table, "hot_total")
	f.CategoryType = field.NewInt64(table, "category_type")
	f.CategoryDesc = field.NewString(table, "category_desc")
	f.CategoryTotal = field.NewInt64(table, "category_total")
	f.SportID = field.NewInt64(table, "sport_id")
	f.SportMatchCount = field.NewInt64(table, "sport_match_count")
	f.HotLeagueID = field.NewInt64(table, "hot_league_id")
	f.HotLeagueName = field.NewString(table, "hot_league_name")
	f.HotLeagueLogo = field.NewString(table, "hot_league_logo")
	f.MarketID = field.NewString(table, "market_id")
	f.MarketType = field.NewInt64(table, "market_type")
	f.MarketPeriod = field.NewInt64(table, "market_period")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fbSportsMatchStats) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbSportsMatchStats) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 18)
	f.fieldMap["id"] = f.ID
	f.fieldMap["league_id"] = f.LeagueID
	f.fieldMap["type_for_league_stat"] = f.TypeForLeagueStat
	f.fieldMap["total_matches"] = f.TotalMatches
	f.fieldMap["hot_total"] = f.HotTotal
	f.fieldMap["category_type"] = f.CategoryType
	f.fieldMap["category_desc"] = f.CategoryDesc
	f.fieldMap["category_total"] = f.CategoryTotal
	f.fieldMap["sport_id"] = f.SportID
	f.fieldMap["sport_match_count"] = f.SportMatchCount
	f.fieldMap["hot_league_id"] = f.HotLeagueID
	f.fieldMap["hot_league_name"] = f.HotLeagueName
	f.fieldMap["hot_league_logo"] = f.HotLeagueLogo
	f.fieldMap["market_id"] = f.MarketID
	f.fieldMap["market_type"] = f.MarketType
	f.fieldMap["market_period"] = f.MarketPeriod
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fbSportsMatchStats) clone(db *gorm.DB) fbSportsMatchStats {
	f.fbSportsMatchStatsDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbSportsMatchStats) replaceDB(db *gorm.DB) fbSportsMatchStats {
	f.fbSportsMatchStatsDo.ReplaceDB(db)
	return f
}

type fbSportsMatchStatsDo struct{ gen.DO }

type IFbSportsMatchStatsDo interface {
	gen.SubQuery
	Debug() IFbSportsMatchStatsDo
	WithContext(ctx context.Context) IFbSportsMatchStatsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbSportsMatchStatsDo
	WriteDB() IFbSportsMatchStatsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbSportsMatchStatsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbSportsMatchStatsDo
	Not(conds ...gen.Condition) IFbSportsMatchStatsDo
	Or(conds ...gen.Condition) IFbSportsMatchStatsDo
	Select(conds ...field.Expr) IFbSportsMatchStatsDo
	Where(conds ...gen.Condition) IFbSportsMatchStatsDo
	Order(conds ...field.Expr) IFbSportsMatchStatsDo
	Distinct(cols ...field.Expr) IFbSportsMatchStatsDo
	Omit(cols ...field.Expr) IFbSportsMatchStatsDo
	Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchStatsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchStatsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchStatsDo
	Group(cols ...field.Expr) IFbSportsMatchStatsDo
	Having(conds ...gen.Condition) IFbSportsMatchStatsDo
	Limit(limit int) IFbSportsMatchStatsDo
	Offset(offset int) IFbSportsMatchStatsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchStatsDo
	Unscoped() IFbSportsMatchStatsDo
	Create(values ...*model.FbSportsMatchStats) error
	CreateInBatches(values []*model.FbSportsMatchStats, batchSize int) error
	Save(values ...*model.FbSportsMatchStats) error
	First() (*model.FbSportsMatchStats, error)
	Take() (*model.FbSportsMatchStats, error)
	Last() (*model.FbSportsMatchStats, error)
	Find() ([]*model.FbSportsMatchStats, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchStats, err error)
	FindInBatches(result *[]*model.FbSportsMatchStats, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbSportsMatchStats) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbSportsMatchStatsDo
	Assign(attrs ...field.AssignExpr) IFbSportsMatchStatsDo
	Joins(fields ...field.RelationField) IFbSportsMatchStatsDo
	Preload(fields ...field.RelationField) IFbSportsMatchStatsDo
	FirstOrInit() (*model.FbSportsMatchStats, error)
	FirstOrCreate() (*model.FbSportsMatchStats, error)
	FindByPage(offset int, limit int) (result []*model.FbSportsMatchStats, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbSportsMatchStatsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbSportsMatchStatsDo) Debug() IFbSportsMatchStatsDo {
	return f.withDO(f.DO.Debug())
}

func (f fbSportsMatchStatsDo) WithContext(ctx context.Context) IFbSportsMatchStatsDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbSportsMatchStatsDo) ReadDB() IFbSportsMatchStatsDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbSportsMatchStatsDo) WriteDB() IFbSportsMatchStatsDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbSportsMatchStatsDo) Session(config *gorm.Session) IFbSportsMatchStatsDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbSportsMatchStatsDo) Clauses(conds ...clause.Expression) IFbSportsMatchStatsDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbSportsMatchStatsDo) Returning(value interface{}, columns ...string) IFbSportsMatchStatsDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbSportsMatchStatsDo) Not(conds ...gen.Condition) IFbSportsMatchStatsDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbSportsMatchStatsDo) Or(conds ...gen.Condition) IFbSportsMatchStatsDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbSportsMatchStatsDo) Select(conds ...field.Expr) IFbSportsMatchStatsDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbSportsMatchStatsDo) Where(conds ...gen.Condition) IFbSportsMatchStatsDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbSportsMatchStatsDo) Order(conds ...field.Expr) IFbSportsMatchStatsDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbSportsMatchStatsDo) Distinct(cols ...field.Expr) IFbSportsMatchStatsDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbSportsMatchStatsDo) Omit(cols ...field.Expr) IFbSportsMatchStatsDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbSportsMatchStatsDo) Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchStatsDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbSportsMatchStatsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchStatsDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbSportsMatchStatsDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchStatsDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbSportsMatchStatsDo) Group(cols ...field.Expr) IFbSportsMatchStatsDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbSportsMatchStatsDo) Having(conds ...gen.Condition) IFbSportsMatchStatsDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbSportsMatchStatsDo) Limit(limit int) IFbSportsMatchStatsDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbSportsMatchStatsDo) Offset(offset int) IFbSportsMatchStatsDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbSportsMatchStatsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchStatsDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbSportsMatchStatsDo) Unscoped() IFbSportsMatchStatsDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbSportsMatchStatsDo) Create(values ...*model.FbSportsMatchStats) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbSportsMatchStatsDo) CreateInBatches(values []*model.FbSportsMatchStats, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbSportsMatchStatsDo) Save(values ...*model.FbSportsMatchStats) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbSportsMatchStatsDo) First() (*model.FbSportsMatchStats, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchStats), nil
	}
}

func (f fbSportsMatchStatsDo) Take() (*model.FbSportsMatchStats, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchStats), nil
	}
}

func (f fbSportsMatchStatsDo) Last() (*model.FbSportsMatchStats, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchStats), nil
	}
}

func (f fbSportsMatchStatsDo) Find() ([]*model.FbSportsMatchStats, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbSportsMatchStats), err
}

func (f fbSportsMatchStatsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchStats, err error) {
	buf := make([]*model.FbSportsMatchStats, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbSportsMatchStatsDo) FindInBatches(result *[]*model.FbSportsMatchStats, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbSportsMatchStatsDo) Attrs(attrs ...field.AssignExpr) IFbSportsMatchStatsDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbSportsMatchStatsDo) Assign(attrs ...field.AssignExpr) IFbSportsMatchStatsDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbSportsMatchStatsDo) Joins(fields ...field.RelationField) IFbSportsMatchStatsDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbSportsMatchStatsDo) Preload(fields ...field.RelationField) IFbSportsMatchStatsDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbSportsMatchStatsDo) FirstOrInit() (*model.FbSportsMatchStats, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchStats), nil
	}
}

func (f fbSportsMatchStatsDo) FirstOrCreate() (*model.FbSportsMatchStats, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchStats), nil
	}
}

func (f fbSportsMatchStatsDo) FindByPage(offset int, limit int) (result []*model.FbSportsMatchStats, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbSportsMatchStatsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbSportsMatchStatsDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbSportsMatchStatsDo) Delete(models ...*model.FbSportsMatchStats) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbSportsMatchStatsDo) withDO(do gen.Dao) *fbSportsMatchStatsDo {
	f.DO = *do.(*gen.DO)
	return f
}
