// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newFbSportsMatchTeamRank(db *gorm.DB, opts ...gen.DOOption) fbSportsMatchTeamRank {
	_fbSportsMatchTeamRank := fbSportsMatchTeamRank{}

	_fbSportsMatchTeamRank.fbSportsMatchTeamRankDo.UseDB(db, opts...)
	_fbSportsMatchTeamRank.fbSportsMatchTeamRankDo.UseModel(&model.FbSportsMatchTeamRank{})

	tableName := _fbSportsMatchTeamRank.fbSportsMatchTeamRankDo.TableName()
	_fbSportsMatchTeamRank.ALL = field.NewAsterisk(tableName)
	_fbSportsMatchTeamRank.ID = field.NewInt64(tableName, "id")
	_fbSportsMatchTeamRank.LeaguePhase = field.NewInt64(tableName, "league_phase")
	_fbSportsMatchTeamRank.LeagueSubphase = field.NewInt64(tableName, "league_subphase")
	_fbSportsMatchTeamRank.TeamID = field.NewInt64(tableName, "team_id")
	_fbSportsMatchTeamRank.Wins = field.NewInt64(tableName, "wins")
	_fbSportsMatchTeamRank.Draws = field.NewInt64(tableName, "draws")
	_fbSportsMatchTeamRank.Losses = field.NewInt64(tableName, "losses")
	_fbSportsMatchTeamRank.GoalsScored = field.NewInt64(tableName, "goals_scored")
	_fbSportsMatchTeamRank.GoalsAgainst = field.NewInt64(tableName, "goals_against")
	_fbSportsMatchTeamRank.GoalDifference = field.NewInt64(tableName, "goal_difference")
	_fbSportsMatchTeamRank.Points = field.NewInt64(tableName, "points")
	_fbSportsMatchTeamRank.TeamLogo = field.NewString(tableName, "team_logo")
	_fbSportsMatchTeamRank.TeamName = field.NewString(tableName, "team_name")
	_fbSportsMatchTeamRank.GroupThirdPlace = field.NewInt64(tableName, "group_third_place")
	_fbSportsMatchTeamRank.TopicID = field.NewInt64(tableName, "topic_id")
	_fbSportsMatchTeamRank.LeagueID = field.NewInt64(tableName, "league_id")
	_fbSportsMatchTeamRank.LanguageType = field.NewString(tableName, "language_type")
	_fbSportsMatchTeamRank.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbSportsMatchTeamRank.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_fbSportsMatchTeamRank.fillFieldMap()

	return _fbSportsMatchTeamRank
}

// fbSportsMatchTeamRank 球队排行榜数据表
type fbSportsMatchTeamRank struct {
	fbSportsMatchTeamRankDo

	ALL             field.Asterisk
	ID              field.Int64  // 球队ID
	LeaguePhase     field.Int64  // 联赛阶段
	LeagueSubphase  field.Int64  // 联赛子阶段
	TeamID          field.Int64  // 球队ID
	Wins            field.Int64  // 胜场数
	Draws           field.Int64  // 平场数
	Losses          field.Int64  // 负场数
	GoalsScored     field.Int64  // 进球数
	GoalsAgainst    field.Int64  // 失球数
	GoalDifference  field.Int64  // 净胜球
	Points          field.Int64  // 积分
	TeamLogo        field.String // 球队logo路径
	TeamName        field.String // 球队名称
	GroupThirdPlace field.Int64  // 小组第三排名
	TopicID         field.Int64  // 专题ID
	LeagueID        field.Int64  // 联赛ID
	LanguageType    field.String // 语言类型
	CreatedAt       field.Int64  // 记录创建时间
	UpdatedAt       field.Int64  // 记录更新时间

	fieldMap map[string]field.Expr
}

func (f fbSportsMatchTeamRank) Table(newTableName string) *fbSportsMatchTeamRank {
	f.fbSportsMatchTeamRankDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbSportsMatchTeamRank) As(alias string) *fbSportsMatchTeamRank {
	f.fbSportsMatchTeamRankDo.DO = *(f.fbSportsMatchTeamRankDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbSportsMatchTeamRank) updateTableName(table string) *fbSportsMatchTeamRank {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.LeaguePhase = field.NewInt64(table, "league_phase")
	f.LeagueSubphase = field.NewInt64(table, "league_subphase")
	f.TeamID = field.NewInt64(table, "team_id")
	f.Wins = field.NewInt64(table, "wins")
	f.Draws = field.NewInt64(table, "draws")
	f.Losses = field.NewInt64(table, "losses")
	f.GoalsScored = field.NewInt64(table, "goals_scored")
	f.GoalsAgainst = field.NewInt64(table, "goals_against")
	f.GoalDifference = field.NewInt64(table, "goal_difference")
	f.Points = field.NewInt64(table, "points")
	f.TeamLogo = field.NewString(table, "team_logo")
	f.TeamName = field.NewString(table, "team_name")
	f.GroupThirdPlace = field.NewInt64(table, "group_third_place")
	f.TopicID = field.NewInt64(table, "topic_id")
	f.LeagueID = field.NewInt64(table, "league_id")
	f.LanguageType = field.NewString(table, "language_type")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fbSportsMatchTeamRank) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbSportsMatchTeamRank) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 19)
	f.fieldMap["id"] = f.ID
	f.fieldMap["league_phase"] = f.LeaguePhase
	f.fieldMap["league_subphase"] = f.LeagueSubphase
	f.fieldMap["team_id"] = f.TeamID
	f.fieldMap["wins"] = f.Wins
	f.fieldMap["draws"] = f.Draws
	f.fieldMap["losses"] = f.Losses
	f.fieldMap["goals_scored"] = f.GoalsScored
	f.fieldMap["goals_against"] = f.GoalsAgainst
	f.fieldMap["goal_difference"] = f.GoalDifference
	f.fieldMap["points"] = f.Points
	f.fieldMap["team_logo"] = f.TeamLogo
	f.fieldMap["team_name"] = f.TeamName
	f.fieldMap["group_third_place"] = f.GroupThirdPlace
	f.fieldMap["topic_id"] = f.TopicID
	f.fieldMap["league_id"] = f.LeagueID
	f.fieldMap["language_type"] = f.LanguageType
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fbSportsMatchTeamRank) clone(db *gorm.DB) fbSportsMatchTeamRank {
	f.fbSportsMatchTeamRankDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbSportsMatchTeamRank) replaceDB(db *gorm.DB) fbSportsMatchTeamRank {
	f.fbSportsMatchTeamRankDo.ReplaceDB(db)
	return f
}

type fbSportsMatchTeamRankDo struct{ gen.DO }

type IFbSportsMatchTeamRankDo interface {
	gen.SubQuery
	Debug() IFbSportsMatchTeamRankDo
	WithContext(ctx context.Context) IFbSportsMatchTeamRankDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbSportsMatchTeamRankDo
	WriteDB() IFbSportsMatchTeamRankDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbSportsMatchTeamRankDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbSportsMatchTeamRankDo
	Not(conds ...gen.Condition) IFbSportsMatchTeamRankDo
	Or(conds ...gen.Condition) IFbSportsMatchTeamRankDo
	Select(conds ...field.Expr) IFbSportsMatchTeamRankDo
	Where(conds ...gen.Condition) IFbSportsMatchTeamRankDo
	Order(conds ...field.Expr) IFbSportsMatchTeamRankDo
	Distinct(cols ...field.Expr) IFbSportsMatchTeamRankDo
	Omit(cols ...field.Expr) IFbSportsMatchTeamRankDo
	Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchTeamRankDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchTeamRankDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchTeamRankDo
	Group(cols ...field.Expr) IFbSportsMatchTeamRankDo
	Having(conds ...gen.Condition) IFbSportsMatchTeamRankDo
	Limit(limit int) IFbSportsMatchTeamRankDo
	Offset(offset int) IFbSportsMatchTeamRankDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchTeamRankDo
	Unscoped() IFbSportsMatchTeamRankDo
	Create(values ...*model.FbSportsMatchTeamRank) error
	CreateInBatches(values []*model.FbSportsMatchTeamRank, batchSize int) error
	Save(values ...*model.FbSportsMatchTeamRank) error
	First() (*model.FbSportsMatchTeamRank, error)
	Take() (*model.FbSportsMatchTeamRank, error)
	Last() (*model.FbSportsMatchTeamRank, error)
	Find() ([]*model.FbSportsMatchTeamRank, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchTeamRank, err error)
	FindInBatches(result *[]*model.FbSportsMatchTeamRank, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbSportsMatchTeamRank) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbSportsMatchTeamRankDo
	Assign(attrs ...field.AssignExpr) IFbSportsMatchTeamRankDo
	Joins(fields ...field.RelationField) IFbSportsMatchTeamRankDo
	Preload(fields ...field.RelationField) IFbSportsMatchTeamRankDo
	FirstOrInit() (*model.FbSportsMatchTeamRank, error)
	FirstOrCreate() (*model.FbSportsMatchTeamRank, error)
	FindByPage(offset int, limit int) (result []*model.FbSportsMatchTeamRank, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbSportsMatchTeamRankDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbSportsMatchTeamRankDo) Debug() IFbSportsMatchTeamRankDo {
	return f.withDO(f.DO.Debug())
}

func (f fbSportsMatchTeamRankDo) WithContext(ctx context.Context) IFbSportsMatchTeamRankDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbSportsMatchTeamRankDo) ReadDB() IFbSportsMatchTeamRankDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbSportsMatchTeamRankDo) WriteDB() IFbSportsMatchTeamRankDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbSportsMatchTeamRankDo) Session(config *gorm.Session) IFbSportsMatchTeamRankDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbSportsMatchTeamRankDo) Clauses(conds ...clause.Expression) IFbSportsMatchTeamRankDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbSportsMatchTeamRankDo) Returning(value interface{}, columns ...string) IFbSportsMatchTeamRankDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbSportsMatchTeamRankDo) Not(conds ...gen.Condition) IFbSportsMatchTeamRankDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbSportsMatchTeamRankDo) Or(conds ...gen.Condition) IFbSportsMatchTeamRankDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbSportsMatchTeamRankDo) Select(conds ...field.Expr) IFbSportsMatchTeamRankDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbSportsMatchTeamRankDo) Where(conds ...gen.Condition) IFbSportsMatchTeamRankDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbSportsMatchTeamRankDo) Order(conds ...field.Expr) IFbSportsMatchTeamRankDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbSportsMatchTeamRankDo) Distinct(cols ...field.Expr) IFbSportsMatchTeamRankDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbSportsMatchTeamRankDo) Omit(cols ...field.Expr) IFbSportsMatchTeamRankDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbSportsMatchTeamRankDo) Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchTeamRankDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbSportsMatchTeamRankDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchTeamRankDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbSportsMatchTeamRankDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchTeamRankDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbSportsMatchTeamRankDo) Group(cols ...field.Expr) IFbSportsMatchTeamRankDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbSportsMatchTeamRankDo) Having(conds ...gen.Condition) IFbSportsMatchTeamRankDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbSportsMatchTeamRankDo) Limit(limit int) IFbSportsMatchTeamRankDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbSportsMatchTeamRankDo) Offset(offset int) IFbSportsMatchTeamRankDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbSportsMatchTeamRankDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchTeamRankDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbSportsMatchTeamRankDo) Unscoped() IFbSportsMatchTeamRankDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbSportsMatchTeamRankDo) Create(values ...*model.FbSportsMatchTeamRank) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbSportsMatchTeamRankDo) CreateInBatches(values []*model.FbSportsMatchTeamRank, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbSportsMatchTeamRankDo) Save(values ...*model.FbSportsMatchTeamRank) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbSportsMatchTeamRankDo) First() (*model.FbSportsMatchTeamRank, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchTeamRank), nil
	}
}

func (f fbSportsMatchTeamRankDo) Take() (*model.FbSportsMatchTeamRank, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchTeamRank), nil
	}
}

func (f fbSportsMatchTeamRankDo) Last() (*model.FbSportsMatchTeamRank, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchTeamRank), nil
	}
}

func (f fbSportsMatchTeamRankDo) Find() ([]*model.FbSportsMatchTeamRank, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbSportsMatchTeamRank), err
}

func (f fbSportsMatchTeamRankDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchTeamRank, err error) {
	buf := make([]*model.FbSportsMatchTeamRank, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbSportsMatchTeamRankDo) FindInBatches(result *[]*model.FbSportsMatchTeamRank, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbSportsMatchTeamRankDo) Attrs(attrs ...field.AssignExpr) IFbSportsMatchTeamRankDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbSportsMatchTeamRankDo) Assign(attrs ...field.AssignExpr) IFbSportsMatchTeamRankDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbSportsMatchTeamRankDo) Joins(fields ...field.RelationField) IFbSportsMatchTeamRankDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbSportsMatchTeamRankDo) Preload(fields ...field.RelationField) IFbSportsMatchTeamRankDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbSportsMatchTeamRankDo) FirstOrInit() (*model.FbSportsMatchTeamRank, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchTeamRank), nil
	}
}

func (f fbSportsMatchTeamRankDo) FirstOrCreate() (*model.FbSportsMatchTeamRank, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchTeamRank), nil
	}
}

func (f fbSportsMatchTeamRankDo) FindByPage(offset int, limit int) (result []*model.FbSportsMatchTeamRank, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbSportsMatchTeamRankDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbSportsMatchTeamRankDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbSportsMatchTeamRankDo) Delete(models ...*model.FbSportsMatchTeamRank) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbSportsMatchTeamRankDo) withDO(do gen.Dao) *fbSportsMatchTeamRankDo {
	f.DO = *do.(*gen.DO)
	return f
}
