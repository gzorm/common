// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newUserDailyReport(db *gorm.DB, opts ...gen.DOOption) userDailyReport {
	_userDailyReport := userDailyReport{}

	_userDailyReport.userDailyReportDo.UseDB(db, opts...)
	_userDailyReport.userDailyReportDo.UseModel(&model.UserDailyReport{})

	tableName := _userDailyReport.userDailyReportDo.TableName()
	_userDailyReport.ALL = field.NewAsterisk(tableName)
	_userDailyReport.ID = field.NewInt64(tableName, "id")
	_userDailyReport.UID = field.NewInt64(tableName, "uid")
	_userDailyReport.Username = field.NewString(tableName, "username")
	_userDailyReport.RegisterAt = field.NewInt64(tableName, "register_at")
	_userDailyReport.ExpiredAt = field.NewInt64(tableName, "expired_at")
	_userDailyReport.AgentLevelOne = field.NewString(tableName, "agent_level_one")
	_userDailyReport.AgentLevelTwo = field.NewString(tableName, "agent_level_two")
	_userDailyReport.AgentLevelThree = field.NewString(tableName, "agent_level_three")
	_userDailyReport.BelongAgentLevel = field.NewInt64(tableName, "belong_agent_level")
	_userDailyReport.DailyDate = field.NewInt64(tableName, "daily_date")
	_userDailyReport.CommissionRateLevelOne = field.NewField(tableName, "commission_rate_level_one")
	_userDailyReport.CommissionRateLevelTwo = field.NewField(tableName, "commission_rate_level_two")
	_userDailyReport.CommissionRateLevelThree = field.NewField(tableName, "commission_rate_level_three")
	_userDailyReport.CommissionAmountLevelOne = field.NewField(tableName, "commission_amount_level_one")
	_userDailyReport.CommissionAmountLevelTwo = field.NewField(tableName, "commission_amount_level_two")
	_userDailyReport.CommissionAmountLevelThree = field.NewField(tableName, "commission_amount_level_three")
	_userDailyReport.ProviderFeeTotal = field.NewField(tableName, "provider_fee_total")
	_userDailyReport.BonusAmount = field.NewField(tableName, "bonus_amount")
	_userDailyReport.BetAmountReal = field.NewField(tableName, "bet_amount_real")
	_userDailyReport.BetAmountSport = field.NewField(tableName, "bet_amount_sport")
	_userDailyReport.BetAmountSlot = field.NewField(tableName, "bet_amount_slot")
	_userDailyReport.BetAmountMachine = field.NewField(tableName, "bet_amount_machine")
	_userDailyReport.PlAmountReal = field.NewField(tableName, "pl_amount_real")
	_userDailyReport.PlAmountSport = field.NewField(tableName, "pl_amount_sport")
	_userDailyReport.PlAmountSlot = field.NewField(tableName, "pl_amount_slot")
	_userDailyReport.PlAmountMachine = field.NewField(tableName, "pl_amount_machine")
	_userDailyReport.DepositFee = field.NewField(tableName, "deposit_fee")
	_userDailyReport.DepositAmount = field.NewField(tableName, "deposit_amount")
	_userDailyReport.WithdrawalAmount = field.NewField(tableName, "withdrawal_amount")
	_userDailyReport.ProviderRateReal = field.NewField(tableName, "provider_rate_real")
	_userDailyReport.ProviderRateSport = field.NewField(tableName, "provider_rate_sport")
	_userDailyReport.ProviderRateSlot = field.NewField(tableName, "provider_rate_slot")
	_userDailyReport.ProviderRateMachine = field.NewField(tableName, "provider_rate_machine")
	_userDailyReport.DepositRate = field.NewField(tableName, "deposit_rate")

	_userDailyReport.fillFieldMap()

	return _userDailyReport
}

type userDailyReport struct {
	userDailyReportDo

	ALL                        field.Asterisk
	ID                         field.Int64
	UID                        field.Int64  // 代理商序号
	Username                   field.String // 代理商名称
	RegisterAt                 field.Int64  // 创建时间
	ExpiredAt                  field.Int64  // 过期天数
	AgentLevelOne              field.String // 一级代理商名称
	AgentLevelTwo              field.String // 二级代理商名称
	AgentLevelThree            field.String // 三级代理商名称
	BelongAgentLevel           field.Int64
	DailyDate                  field.Int64 // 统计日期
	CommissionRateLevelOne     field.Field // 一级佣金比例
	CommissionRateLevelTwo     field.Field // 二级佣金比例
	CommissionRateLevelThree   field.Field // 三级佣金比例
	CommissionAmountLevelOne   field.Field // 一级佣金金额
	CommissionAmountLevelTwo   field.Field // 二级佣金金额
	CommissionAmountLevelThree field.Field // 三级佣金金额
	ProviderFeeTotal           field.Field // 厂商总的费率
	BonusAmount                field.Field // 彩金金额
	BetAmountReal              field.Field // 真人投注金额
	BetAmountSport             field.Field // 体育投注金额
	BetAmountSlot              field.Field // 老虎机投注金额
	BetAmountMachine           field.Field // 真人老虎机投注金额
	PlAmountReal               field.Field // 真人游戏盈亏金额
	PlAmountSport              field.Field // 体育游戏盈亏金额
	PlAmountSlot               field.Field // 老虎机游戏盈亏金额
	PlAmountMachine            field.Field // 真人老虎机游戏盈亏金额
	DepositFee                 field.Field // 存款手续费
	DepositAmount              field.Field // 存款金额
	WithdrawalAmount           field.Field // 提现金额
	ProviderRateReal           field.Field // 厂商真人游戏费率
	ProviderRateSport          field.Field // 厂商体育游戏费率
	ProviderRateSlot           field.Field // 厂商老虎机游戏费率
	ProviderRateMachine        field.Field // 厂商真人老虎机游戏费率
	DepositRate                field.Field // 存款费率

	fieldMap map[string]field.Expr
}

func (u userDailyReport) Table(newTableName string) *userDailyReport {
	u.userDailyReportDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userDailyReport) As(alias string) *userDailyReport {
	u.userDailyReportDo.DO = *(u.userDailyReportDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userDailyReport) updateTableName(table string) *userDailyReport {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UID = field.NewInt64(table, "uid")
	u.Username = field.NewString(table, "username")
	u.RegisterAt = field.NewInt64(table, "register_at")
	u.ExpiredAt = field.NewInt64(table, "expired_at")
	u.AgentLevelOne = field.NewString(table, "agent_level_one")
	u.AgentLevelTwo = field.NewString(table, "agent_level_two")
	u.AgentLevelThree = field.NewString(table, "agent_level_three")
	u.BelongAgentLevel = field.NewInt64(table, "belong_agent_level")
	u.DailyDate = field.NewInt64(table, "daily_date")
	u.CommissionRateLevelOne = field.NewField(table, "commission_rate_level_one")
	u.CommissionRateLevelTwo = field.NewField(table, "commission_rate_level_two")
	u.CommissionRateLevelThree = field.NewField(table, "commission_rate_level_three")
	u.CommissionAmountLevelOne = field.NewField(table, "commission_amount_level_one")
	u.CommissionAmountLevelTwo = field.NewField(table, "commission_amount_level_two")
	u.CommissionAmountLevelThree = field.NewField(table, "commission_amount_level_three")
	u.ProviderFeeTotal = field.NewField(table, "provider_fee_total")
	u.BonusAmount = field.NewField(table, "bonus_amount")
	u.BetAmountReal = field.NewField(table, "bet_amount_real")
	u.BetAmountSport = field.NewField(table, "bet_amount_sport")
	u.BetAmountSlot = field.NewField(table, "bet_amount_slot")
	u.BetAmountMachine = field.NewField(table, "bet_amount_machine")
	u.PlAmountReal = field.NewField(table, "pl_amount_real")
	u.PlAmountSport = field.NewField(table, "pl_amount_sport")
	u.PlAmountSlot = field.NewField(table, "pl_amount_slot")
	u.PlAmountMachine = field.NewField(table, "pl_amount_machine")
	u.DepositFee = field.NewField(table, "deposit_fee")
	u.DepositAmount = field.NewField(table, "deposit_amount")
	u.WithdrawalAmount = field.NewField(table, "withdrawal_amount")
	u.ProviderRateReal = field.NewField(table, "provider_rate_real")
	u.ProviderRateSport = field.NewField(table, "provider_rate_sport")
	u.ProviderRateSlot = field.NewField(table, "provider_rate_slot")
	u.ProviderRateMachine = field.NewField(table, "provider_rate_machine")
	u.DepositRate = field.NewField(table, "deposit_rate")

	u.fillFieldMap()

	return u
}

func (u *userDailyReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userDailyReport) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 34)
	u.fieldMap["id"] = u.ID
	u.fieldMap["uid"] = u.UID
	u.fieldMap["username"] = u.Username
	u.fieldMap["register_at"] = u.RegisterAt
	u.fieldMap["expired_at"] = u.ExpiredAt
	u.fieldMap["agent_level_one"] = u.AgentLevelOne
	u.fieldMap["agent_level_two"] = u.AgentLevelTwo
	u.fieldMap["agent_level_three"] = u.AgentLevelThree
	u.fieldMap["belong_agent_level"] = u.BelongAgentLevel
	u.fieldMap["daily_date"] = u.DailyDate
	u.fieldMap["commission_rate_level_one"] = u.CommissionRateLevelOne
	u.fieldMap["commission_rate_level_two"] = u.CommissionRateLevelTwo
	u.fieldMap["commission_rate_level_three"] = u.CommissionRateLevelThree
	u.fieldMap["commission_amount_level_one"] = u.CommissionAmountLevelOne
	u.fieldMap["commission_amount_level_two"] = u.CommissionAmountLevelTwo
	u.fieldMap["commission_amount_level_three"] = u.CommissionAmountLevelThree
	u.fieldMap["provider_fee_total"] = u.ProviderFeeTotal
	u.fieldMap["bonus_amount"] = u.BonusAmount
	u.fieldMap["bet_amount_real"] = u.BetAmountReal
	u.fieldMap["bet_amount_sport"] = u.BetAmountSport
	u.fieldMap["bet_amount_slot"] = u.BetAmountSlot
	u.fieldMap["bet_amount_machine"] = u.BetAmountMachine
	u.fieldMap["pl_amount_real"] = u.PlAmountReal
	u.fieldMap["pl_amount_sport"] = u.PlAmountSport
	u.fieldMap["pl_amount_slot"] = u.PlAmountSlot
	u.fieldMap["pl_amount_machine"] = u.PlAmountMachine
	u.fieldMap["deposit_fee"] = u.DepositFee
	u.fieldMap["deposit_amount"] = u.DepositAmount
	u.fieldMap["withdrawal_amount"] = u.WithdrawalAmount
	u.fieldMap["provider_rate_real"] = u.ProviderRateReal
	u.fieldMap["provider_rate_sport"] = u.ProviderRateSport
	u.fieldMap["provider_rate_slot"] = u.ProviderRateSlot
	u.fieldMap["provider_rate_machine"] = u.ProviderRateMachine
	u.fieldMap["deposit_rate"] = u.DepositRate
}

func (u userDailyReport) clone(db *gorm.DB) userDailyReport {
	u.userDailyReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userDailyReport) replaceDB(db *gorm.DB) userDailyReport {
	u.userDailyReportDo.ReplaceDB(db)
	return u
}

type userDailyReportDo struct{ gen.DO }

type IUserDailyReportDo interface {
	gen.SubQuery
	Debug() IUserDailyReportDo
	WithContext(ctx context.Context) IUserDailyReportDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserDailyReportDo
	WriteDB() IUserDailyReportDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserDailyReportDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserDailyReportDo
	Not(conds ...gen.Condition) IUserDailyReportDo
	Or(conds ...gen.Condition) IUserDailyReportDo
	Select(conds ...field.Expr) IUserDailyReportDo
	Where(conds ...gen.Condition) IUserDailyReportDo
	Order(conds ...field.Expr) IUserDailyReportDo
	Distinct(cols ...field.Expr) IUserDailyReportDo
	Omit(cols ...field.Expr) IUserDailyReportDo
	Join(table schema.Tabler, on ...field.Expr) IUserDailyReportDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserDailyReportDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserDailyReportDo
	Group(cols ...field.Expr) IUserDailyReportDo
	Having(conds ...gen.Condition) IUserDailyReportDo
	Limit(limit int) IUserDailyReportDo
	Offset(offset int) IUserDailyReportDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDailyReportDo
	Unscoped() IUserDailyReportDo
	Create(values ...*model.UserDailyReport) error
	CreateInBatches(values []*model.UserDailyReport, batchSize int) error
	Save(values ...*model.UserDailyReport) error
	First() (*model.UserDailyReport, error)
	Take() (*model.UserDailyReport, error)
	Last() (*model.UserDailyReport, error)
	Find() ([]*model.UserDailyReport, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserDailyReport, err error)
	FindInBatches(result *[]*model.UserDailyReport, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserDailyReport) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserDailyReportDo
	Assign(attrs ...field.AssignExpr) IUserDailyReportDo
	Joins(fields ...field.RelationField) IUserDailyReportDo
	Preload(fields ...field.RelationField) IUserDailyReportDo
	FirstOrInit() (*model.UserDailyReport, error)
	FirstOrCreate() (*model.UserDailyReport, error)
	FindByPage(offset int, limit int) (result []*model.UserDailyReport, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserDailyReportDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userDailyReportDo) Debug() IUserDailyReportDo {
	return u.withDO(u.DO.Debug())
}

func (u userDailyReportDo) WithContext(ctx context.Context) IUserDailyReportDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDailyReportDo) ReadDB() IUserDailyReportDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDailyReportDo) WriteDB() IUserDailyReportDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDailyReportDo) Session(config *gorm.Session) IUserDailyReportDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDailyReportDo) Clauses(conds ...clause.Expression) IUserDailyReportDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDailyReportDo) Returning(value interface{}, columns ...string) IUserDailyReportDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDailyReportDo) Not(conds ...gen.Condition) IUserDailyReportDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDailyReportDo) Or(conds ...gen.Condition) IUserDailyReportDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDailyReportDo) Select(conds ...field.Expr) IUserDailyReportDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDailyReportDo) Where(conds ...gen.Condition) IUserDailyReportDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDailyReportDo) Order(conds ...field.Expr) IUserDailyReportDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDailyReportDo) Distinct(cols ...field.Expr) IUserDailyReportDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDailyReportDo) Omit(cols ...field.Expr) IUserDailyReportDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDailyReportDo) Join(table schema.Tabler, on ...field.Expr) IUserDailyReportDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDailyReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserDailyReportDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDailyReportDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserDailyReportDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDailyReportDo) Group(cols ...field.Expr) IUserDailyReportDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDailyReportDo) Having(conds ...gen.Condition) IUserDailyReportDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDailyReportDo) Limit(limit int) IUserDailyReportDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDailyReportDo) Offset(offset int) IUserDailyReportDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDailyReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDailyReportDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDailyReportDo) Unscoped() IUserDailyReportDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDailyReportDo) Create(values ...*model.UserDailyReport) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDailyReportDo) CreateInBatches(values []*model.UserDailyReport, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDailyReportDo) Save(values ...*model.UserDailyReport) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDailyReportDo) First() (*model.UserDailyReport, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDailyReport), nil
	}
}

func (u userDailyReportDo) Take() (*model.UserDailyReport, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDailyReport), nil
	}
}

func (u userDailyReportDo) Last() (*model.UserDailyReport, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDailyReport), nil
	}
}

func (u userDailyReportDo) Find() ([]*model.UserDailyReport, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserDailyReport), err
}

func (u userDailyReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserDailyReport, err error) {
	buf := make([]*model.UserDailyReport, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDailyReportDo) FindInBatches(result *[]*model.UserDailyReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDailyReportDo) Attrs(attrs ...field.AssignExpr) IUserDailyReportDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDailyReportDo) Assign(attrs ...field.AssignExpr) IUserDailyReportDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDailyReportDo) Joins(fields ...field.RelationField) IUserDailyReportDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDailyReportDo) Preload(fields ...field.RelationField) IUserDailyReportDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDailyReportDo) FirstOrInit() (*model.UserDailyReport, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDailyReport), nil
	}
}

func (u userDailyReportDo) FirstOrCreate() (*model.UserDailyReport, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDailyReport), nil
	}
}

func (u userDailyReportDo) FindByPage(offset int, limit int) (result []*model.UserDailyReport, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDailyReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDailyReportDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDailyReportDo) Delete(models ...*model.UserDailyReport) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDailyReportDo) withDO(do gen.Dao) *userDailyReportDo {
	u.DO = *do.(*gen.DO)
	return u
}
