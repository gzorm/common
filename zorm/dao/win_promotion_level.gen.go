// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/common/zorm/model"
)

func newWinPromotionLevel(db *gorm.DB, opts ...gen.DOOption) winPromotionLevel {
	_winPromotionLevel := winPromotionLevel{}

	_winPromotionLevel.winPromotionLevelDo.UseDB(db, opts...)
	_winPromotionLevel.winPromotionLevelDo.UseModel(&model.WinPromotionLevel{})

	tableName := _winPromotionLevel.winPromotionLevelDo.TableName()
	_winPromotionLevel.ALL = field.NewAsterisk(tableName)
	_winPromotionLevel.ID = field.NewInt64(tableName, "id")
	_winPromotionLevel.LevelName = field.NewString(tableName, "level_name")
	_winPromotionLevel.NegativeProfit = field.NewString(tableName, "negative_profit")
	_winPromotionLevel.RevenueShare = field.NewString(tableName, "revenue_share")
	_winPromotionLevel.MaxReward = field.NewString(tableName, "max_reward")
	_winPromotionLevel.CreatedAt = field.NewInt64(tableName, "created_at")
	_winPromotionLevel.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_winPromotionLevel.fillFieldMap()

	return _winPromotionLevel
}

// winPromotionLevel 推广等级奖励
type winPromotionLevel struct {
	winPromotionLevelDo

	ALL            field.Asterisk
	ID             field.Int64
	LevelName      field.String // 级别名称
	NegativeProfit field.String // 负盈利总额
	RevenueShare   field.String // 分成比例
	MaxReward      field.String // 最大奖励
	CreatedAt      field.Int64  // 创建时间
	UpdatedAt      field.Int64  // 更新时间

	fieldMap map[string]field.Expr
}

func (w winPromotionLevel) Table(newTableName string) *winPromotionLevel {
	w.winPromotionLevelDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winPromotionLevel) As(alias string) *winPromotionLevel {
	w.winPromotionLevelDo.DO = *(w.winPromotionLevelDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winPromotionLevel) updateTableName(table string) *winPromotionLevel {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.LevelName = field.NewString(table, "level_name")
	w.NegativeProfit = field.NewString(table, "negative_profit")
	w.RevenueShare = field.NewString(table, "revenue_share")
	w.MaxReward = field.NewString(table, "max_reward")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *winPromotionLevel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winPromotionLevel) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 7)
	w.fieldMap["id"] = w.ID
	w.fieldMap["level_name"] = w.LevelName
	w.fieldMap["negative_profit"] = w.NegativeProfit
	w.fieldMap["revenue_share"] = w.RevenueShare
	w.fieldMap["max_reward"] = w.MaxReward
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w winPromotionLevel) clone(db *gorm.DB) winPromotionLevel {
	w.winPromotionLevelDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winPromotionLevel) replaceDB(db *gorm.DB) winPromotionLevel {
	w.winPromotionLevelDo.ReplaceDB(db)
	return w
}

type winPromotionLevelDo struct{ gen.DO }

type IWinPromotionLevelDo interface {
	gen.SubQuery
	Debug() IWinPromotionLevelDo
	WithContext(ctx context.Context) IWinPromotionLevelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinPromotionLevelDo
	WriteDB() IWinPromotionLevelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinPromotionLevelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinPromotionLevelDo
	Not(conds ...gen.Condition) IWinPromotionLevelDo
	Or(conds ...gen.Condition) IWinPromotionLevelDo
	Select(conds ...field.Expr) IWinPromotionLevelDo
	Where(conds ...gen.Condition) IWinPromotionLevelDo
	Order(conds ...field.Expr) IWinPromotionLevelDo
	Distinct(cols ...field.Expr) IWinPromotionLevelDo
	Omit(cols ...field.Expr) IWinPromotionLevelDo
	Join(table schema.Tabler, on ...field.Expr) IWinPromotionLevelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinPromotionLevelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinPromotionLevelDo
	Group(cols ...field.Expr) IWinPromotionLevelDo
	Having(conds ...gen.Condition) IWinPromotionLevelDo
	Limit(limit int) IWinPromotionLevelDo
	Offset(offset int) IWinPromotionLevelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinPromotionLevelDo
	Unscoped() IWinPromotionLevelDo
	Create(values ...*model.WinPromotionLevel) error
	CreateInBatches(values []*model.WinPromotionLevel, batchSize int) error
	Save(values ...*model.WinPromotionLevel) error
	First() (*model.WinPromotionLevel, error)
	Take() (*model.WinPromotionLevel, error)
	Last() (*model.WinPromotionLevel, error)
	Find() ([]*model.WinPromotionLevel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinPromotionLevel, err error)
	FindInBatches(result *[]*model.WinPromotionLevel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinPromotionLevel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinPromotionLevelDo
	Assign(attrs ...field.AssignExpr) IWinPromotionLevelDo
	Joins(fields ...field.RelationField) IWinPromotionLevelDo
	Preload(fields ...field.RelationField) IWinPromotionLevelDo
	FirstOrInit() (*model.WinPromotionLevel, error)
	FirstOrCreate() (*model.WinPromotionLevel, error)
	FindByPage(offset int, limit int) (result []*model.WinPromotionLevel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinPromotionLevelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winPromotionLevelDo) Debug() IWinPromotionLevelDo {
	return w.withDO(w.DO.Debug())
}

func (w winPromotionLevelDo) WithContext(ctx context.Context) IWinPromotionLevelDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winPromotionLevelDo) ReadDB() IWinPromotionLevelDo {
	return w.Clauses(dbresolver.Read)
}

func (w winPromotionLevelDo) WriteDB() IWinPromotionLevelDo {
	return w.Clauses(dbresolver.Write)
}

func (w winPromotionLevelDo) Session(config *gorm.Session) IWinPromotionLevelDo {
	return w.withDO(w.DO.Session(config))
}

func (w winPromotionLevelDo) Clauses(conds ...clause.Expression) IWinPromotionLevelDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winPromotionLevelDo) Returning(value interface{}, columns ...string) IWinPromotionLevelDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winPromotionLevelDo) Not(conds ...gen.Condition) IWinPromotionLevelDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winPromotionLevelDo) Or(conds ...gen.Condition) IWinPromotionLevelDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winPromotionLevelDo) Select(conds ...field.Expr) IWinPromotionLevelDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winPromotionLevelDo) Where(conds ...gen.Condition) IWinPromotionLevelDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winPromotionLevelDo) Order(conds ...field.Expr) IWinPromotionLevelDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winPromotionLevelDo) Distinct(cols ...field.Expr) IWinPromotionLevelDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winPromotionLevelDo) Omit(cols ...field.Expr) IWinPromotionLevelDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winPromotionLevelDo) Join(table schema.Tabler, on ...field.Expr) IWinPromotionLevelDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winPromotionLevelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinPromotionLevelDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winPromotionLevelDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinPromotionLevelDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winPromotionLevelDo) Group(cols ...field.Expr) IWinPromotionLevelDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winPromotionLevelDo) Having(conds ...gen.Condition) IWinPromotionLevelDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winPromotionLevelDo) Limit(limit int) IWinPromotionLevelDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winPromotionLevelDo) Offset(offset int) IWinPromotionLevelDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winPromotionLevelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinPromotionLevelDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winPromotionLevelDo) Unscoped() IWinPromotionLevelDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winPromotionLevelDo) Create(values ...*model.WinPromotionLevel) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winPromotionLevelDo) CreateInBatches(values []*model.WinPromotionLevel, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winPromotionLevelDo) Save(values ...*model.WinPromotionLevel) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winPromotionLevelDo) First() (*model.WinPromotionLevel, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinPromotionLevel), nil
	}
}

func (w winPromotionLevelDo) Take() (*model.WinPromotionLevel, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinPromotionLevel), nil
	}
}

func (w winPromotionLevelDo) Last() (*model.WinPromotionLevel, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinPromotionLevel), nil
	}
}

func (w winPromotionLevelDo) Find() ([]*model.WinPromotionLevel, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinPromotionLevel), err
}

func (w winPromotionLevelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinPromotionLevel, err error) {
	buf := make([]*model.WinPromotionLevel, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winPromotionLevelDo) FindInBatches(result *[]*model.WinPromotionLevel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winPromotionLevelDo) Attrs(attrs ...field.AssignExpr) IWinPromotionLevelDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winPromotionLevelDo) Assign(attrs ...field.AssignExpr) IWinPromotionLevelDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winPromotionLevelDo) Joins(fields ...field.RelationField) IWinPromotionLevelDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winPromotionLevelDo) Preload(fields ...field.RelationField) IWinPromotionLevelDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winPromotionLevelDo) FirstOrInit() (*model.WinPromotionLevel, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinPromotionLevel), nil
	}
}

func (w winPromotionLevelDo) FirstOrCreate() (*model.WinPromotionLevel, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinPromotionLevel), nil
	}
}

func (w winPromotionLevelDo) FindByPage(offset int, limit int) (result []*model.WinPromotionLevel, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winPromotionLevelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winPromotionLevelDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winPromotionLevelDo) Delete(models ...*model.WinPromotionLevel) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winPromotionLevelDo) withDO(do gen.Dao) *winPromotionLevelDo {
	w.DO = *do.(*gen.DO)
	return w
}
