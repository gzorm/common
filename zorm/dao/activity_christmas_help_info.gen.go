// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/common/zorm/model"
)

func newActivityChristmasHelpInfo(db *gorm.DB, opts ...gen.DOOption) activityChristmasHelpInfo {
	_activityChristmasHelpInfo := activityChristmasHelpInfo{}

	_activityChristmasHelpInfo.activityChristmasHelpInfoDo.UseDB(db, opts...)
	_activityChristmasHelpInfo.activityChristmasHelpInfoDo.UseModel(&model.ActivityChristmasHelpInfo{})

	tableName := _activityChristmasHelpInfo.activityChristmasHelpInfoDo.TableName()
	_activityChristmasHelpInfo.ALL = field.NewAsterisk(tableName)
	_activityChristmasHelpInfo.ID = field.NewInt64(tableName, "id")
	_activityChristmasHelpInfo.LaunchID = field.NewInt64(tableName, "launch_id")
	_activityChristmasHelpInfo.ActivityTitle = field.NewString(tableName, "activity_title")
	_activityChristmasHelpInfo.ActivityID = field.NewInt64(tableName, "activity_id")
	_activityChristmasHelpInfo.UID = field.NewInt64(tableName, "uid")
	_activityChristmasHelpInfo.HelpPoint = field.NewField(tableName, "help_point")
	_activityChristmasHelpInfo.HelpUID = field.NewInt64(tableName, "help_uid")
	_activityChristmasHelpInfo.Username = field.NewString(tableName, "username")
	_activityChristmasHelpInfo.Mobile = field.NewInt64(tableName, "mobile")
	_activityChristmasHelpInfo.ThirdAccount = field.NewString(tableName, "third_account")
	_activityChristmasHelpInfo.NewOldUser = field.NewInt64(tableName, "new_old_user")
	_activityChristmasHelpInfo.HelpStatus = field.NewInt64(tableName, "help_status")
	_activityChristmasHelpInfo.NewHelpBonus = field.NewField(tableName, "new_help_bonus")
	_activityChristmasHelpInfo.CreateAt = field.NewInt64(tableName, "create_at")
	_activityChristmasHelpInfo.UpdateAt = field.NewInt64(tableName, "update_at")
	_activityChristmasHelpInfo.OpUser = field.NewString(tableName, "op_user")

	_activityChristmasHelpInfo.fillFieldMap()

	return _activityChristmasHelpInfo
}

// activityChristmasHelpInfo 助力信息表
type activityChristmasHelpInfo struct {
	activityChristmasHelpInfoDo

	ALL           field.Asterisk
	ID            field.Int64  // 助力表ID，自增主键
	LaunchID      field.Int64  // 用户发起助力表ID
	ActivityTitle field.String // 活动标题
	ActivityID    field.Int64  // 活动ID
	UID           field.Int64  // 被助力用户ID
	HelpPoint     field.Field  // 本次助力点数
	HelpUID       field.Int64  // 助力人ID
	Username      field.String // 助力人用户名
	Mobile        field.Int64  // 手机号码
	ThirdAccount  field.String // 三方账号
	NewOldUser    field.Int64  // 0-新用户,1-老用户
	HelpStatus    field.Int64  // 助力状态：0-助力中，1-助力成功，2-助力失败
	NewHelpBonus  field.Field  // 新用户助力奖金
	CreateAt      field.Int64  // 创建时间
	UpdateAt      field.Int64  // 修改时间
	OpUser        field.String // 操作人

	fieldMap map[string]field.Expr
}

func (a activityChristmasHelpInfo) Table(newTableName string) *activityChristmasHelpInfo {
	a.activityChristmasHelpInfoDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activityChristmasHelpInfo) As(alias string) *activityChristmasHelpInfo {
	a.activityChristmasHelpInfoDo.DO = *(a.activityChristmasHelpInfoDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activityChristmasHelpInfo) updateTableName(table string) *activityChristmasHelpInfo {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.LaunchID = field.NewInt64(table, "launch_id")
	a.ActivityTitle = field.NewString(table, "activity_title")
	a.ActivityID = field.NewInt64(table, "activity_id")
	a.UID = field.NewInt64(table, "uid")
	a.HelpPoint = field.NewField(table, "help_point")
	a.HelpUID = field.NewInt64(table, "help_uid")
	a.Username = field.NewString(table, "username")
	a.Mobile = field.NewInt64(table, "mobile")
	a.ThirdAccount = field.NewString(table, "third_account")
	a.NewOldUser = field.NewInt64(table, "new_old_user")
	a.HelpStatus = field.NewInt64(table, "help_status")
	a.NewHelpBonus = field.NewField(table, "new_help_bonus")
	a.CreateAt = field.NewInt64(table, "create_at")
	a.UpdateAt = field.NewInt64(table, "update_at")
	a.OpUser = field.NewString(table, "op_user")

	a.fillFieldMap()

	return a
}

func (a *activityChristmasHelpInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activityChristmasHelpInfo) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 16)
	a.fieldMap["id"] = a.ID
	a.fieldMap["launch_id"] = a.LaunchID
	a.fieldMap["activity_title"] = a.ActivityTitle
	a.fieldMap["activity_id"] = a.ActivityID
	a.fieldMap["uid"] = a.UID
	a.fieldMap["help_point"] = a.HelpPoint
	a.fieldMap["help_uid"] = a.HelpUID
	a.fieldMap["username"] = a.Username
	a.fieldMap["mobile"] = a.Mobile
	a.fieldMap["third_account"] = a.ThirdAccount
	a.fieldMap["new_old_user"] = a.NewOldUser
	a.fieldMap["help_status"] = a.HelpStatus
	a.fieldMap["new_help_bonus"] = a.NewHelpBonus
	a.fieldMap["create_at"] = a.CreateAt
	a.fieldMap["update_at"] = a.UpdateAt
	a.fieldMap["op_user"] = a.OpUser
}

func (a activityChristmasHelpInfo) clone(db *gorm.DB) activityChristmasHelpInfo {
	a.activityChristmasHelpInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activityChristmasHelpInfo) replaceDB(db *gorm.DB) activityChristmasHelpInfo {
	a.activityChristmasHelpInfoDo.ReplaceDB(db)
	return a
}

type activityChristmasHelpInfoDo struct{ gen.DO }

type IActivityChristmasHelpInfoDo interface {
	gen.SubQuery
	Debug() IActivityChristmasHelpInfoDo
	WithContext(ctx context.Context) IActivityChristmasHelpInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivityChristmasHelpInfoDo
	WriteDB() IActivityChristmasHelpInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivityChristmasHelpInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivityChristmasHelpInfoDo
	Not(conds ...gen.Condition) IActivityChristmasHelpInfoDo
	Or(conds ...gen.Condition) IActivityChristmasHelpInfoDo
	Select(conds ...field.Expr) IActivityChristmasHelpInfoDo
	Where(conds ...gen.Condition) IActivityChristmasHelpInfoDo
	Order(conds ...field.Expr) IActivityChristmasHelpInfoDo
	Distinct(cols ...field.Expr) IActivityChristmasHelpInfoDo
	Omit(cols ...field.Expr) IActivityChristmasHelpInfoDo
	Join(table schema.Tabler, on ...field.Expr) IActivityChristmasHelpInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivityChristmasHelpInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActivityChristmasHelpInfoDo
	Group(cols ...field.Expr) IActivityChristmasHelpInfoDo
	Having(conds ...gen.Condition) IActivityChristmasHelpInfoDo
	Limit(limit int) IActivityChristmasHelpInfoDo
	Offset(offset int) IActivityChristmasHelpInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityChristmasHelpInfoDo
	Unscoped() IActivityChristmasHelpInfoDo
	Create(values ...*model.ActivityChristmasHelpInfo) error
	CreateInBatches(values []*model.ActivityChristmasHelpInfo, batchSize int) error
	Save(values ...*model.ActivityChristmasHelpInfo) error
	First() (*model.ActivityChristmasHelpInfo, error)
	Take() (*model.ActivityChristmasHelpInfo, error)
	Last() (*model.ActivityChristmasHelpInfo, error)
	Find() ([]*model.ActivityChristmasHelpInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityChristmasHelpInfo, err error)
	FindInBatches(result *[]*model.ActivityChristmasHelpInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActivityChristmasHelpInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivityChristmasHelpInfoDo
	Assign(attrs ...field.AssignExpr) IActivityChristmasHelpInfoDo
	Joins(fields ...field.RelationField) IActivityChristmasHelpInfoDo
	Preload(fields ...field.RelationField) IActivityChristmasHelpInfoDo
	FirstOrInit() (*model.ActivityChristmasHelpInfo, error)
	FirstOrCreate() (*model.ActivityChristmasHelpInfo, error)
	FindByPage(offset int, limit int) (result []*model.ActivityChristmasHelpInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivityChristmasHelpInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activityChristmasHelpInfoDo) Debug() IActivityChristmasHelpInfoDo {
	return a.withDO(a.DO.Debug())
}

func (a activityChristmasHelpInfoDo) WithContext(ctx context.Context) IActivityChristmasHelpInfoDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityChristmasHelpInfoDo) ReadDB() IActivityChristmasHelpInfoDo {
	return a.Clauses(dbresolver.Read)
}

func (a activityChristmasHelpInfoDo) WriteDB() IActivityChristmasHelpInfoDo {
	return a.Clauses(dbresolver.Write)
}

func (a activityChristmasHelpInfoDo) Session(config *gorm.Session) IActivityChristmasHelpInfoDo {
	return a.withDO(a.DO.Session(config))
}

func (a activityChristmasHelpInfoDo) Clauses(conds ...clause.Expression) IActivityChristmasHelpInfoDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityChristmasHelpInfoDo) Returning(value interface{}, columns ...string) IActivityChristmasHelpInfoDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityChristmasHelpInfoDo) Not(conds ...gen.Condition) IActivityChristmasHelpInfoDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityChristmasHelpInfoDo) Or(conds ...gen.Condition) IActivityChristmasHelpInfoDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityChristmasHelpInfoDo) Select(conds ...field.Expr) IActivityChristmasHelpInfoDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityChristmasHelpInfoDo) Where(conds ...gen.Condition) IActivityChristmasHelpInfoDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityChristmasHelpInfoDo) Order(conds ...field.Expr) IActivityChristmasHelpInfoDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityChristmasHelpInfoDo) Distinct(cols ...field.Expr) IActivityChristmasHelpInfoDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityChristmasHelpInfoDo) Omit(cols ...field.Expr) IActivityChristmasHelpInfoDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityChristmasHelpInfoDo) Join(table schema.Tabler, on ...field.Expr) IActivityChristmasHelpInfoDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityChristmasHelpInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActivityChristmasHelpInfoDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityChristmasHelpInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IActivityChristmasHelpInfoDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityChristmasHelpInfoDo) Group(cols ...field.Expr) IActivityChristmasHelpInfoDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityChristmasHelpInfoDo) Having(conds ...gen.Condition) IActivityChristmasHelpInfoDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityChristmasHelpInfoDo) Limit(limit int) IActivityChristmasHelpInfoDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityChristmasHelpInfoDo) Offset(offset int) IActivityChristmasHelpInfoDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityChristmasHelpInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityChristmasHelpInfoDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityChristmasHelpInfoDo) Unscoped() IActivityChristmasHelpInfoDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activityChristmasHelpInfoDo) Create(values ...*model.ActivityChristmasHelpInfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityChristmasHelpInfoDo) CreateInBatches(values []*model.ActivityChristmasHelpInfo, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityChristmasHelpInfoDo) Save(values ...*model.ActivityChristmasHelpInfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityChristmasHelpInfoDo) First() (*model.ActivityChristmasHelpInfo, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityChristmasHelpInfo), nil
	}
}

func (a activityChristmasHelpInfoDo) Take() (*model.ActivityChristmasHelpInfo, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityChristmasHelpInfo), nil
	}
}

func (a activityChristmasHelpInfoDo) Last() (*model.ActivityChristmasHelpInfo, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityChristmasHelpInfo), nil
	}
}

func (a activityChristmasHelpInfoDo) Find() ([]*model.ActivityChristmasHelpInfo, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivityChristmasHelpInfo), err
}

func (a activityChristmasHelpInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityChristmasHelpInfo, err error) {
	buf := make([]*model.ActivityChristmasHelpInfo, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityChristmasHelpInfoDo) FindInBatches(result *[]*model.ActivityChristmasHelpInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityChristmasHelpInfoDo) Attrs(attrs ...field.AssignExpr) IActivityChristmasHelpInfoDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityChristmasHelpInfoDo) Assign(attrs ...field.AssignExpr) IActivityChristmasHelpInfoDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityChristmasHelpInfoDo) Joins(fields ...field.RelationField) IActivityChristmasHelpInfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityChristmasHelpInfoDo) Preload(fields ...field.RelationField) IActivityChristmasHelpInfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityChristmasHelpInfoDo) FirstOrInit() (*model.ActivityChristmasHelpInfo, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityChristmasHelpInfo), nil
	}
}

func (a activityChristmasHelpInfoDo) FirstOrCreate() (*model.ActivityChristmasHelpInfo, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityChristmasHelpInfo), nil
	}
}

func (a activityChristmasHelpInfoDo) FindByPage(offset int, limit int) (result []*model.ActivityChristmasHelpInfo, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityChristmasHelpInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityChristmasHelpInfoDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityChristmasHelpInfoDo) Delete(models ...*model.ActivityChristmasHelpInfo) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityChristmasHelpInfoDo) withDO(do gen.Dao) *activityChristmasHelpInfoDo {
	a.DO = *do.(*gen.DO)
	return a
}
