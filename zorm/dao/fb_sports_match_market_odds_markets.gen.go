// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newFbSportsMatchMarketOddsMarkets(db *gorm.DB, opts ...gen.DOOption) fbSportsMatchMarketOddsMarkets {
	_fbSportsMatchMarketOddsMarkets := fbSportsMatchMarketOddsMarkets{}

	_fbSportsMatchMarketOddsMarkets.fbSportsMatchMarketOddsMarketsDo.UseDB(db, opts...)
	_fbSportsMatchMarketOddsMarkets.fbSportsMatchMarketOddsMarketsDo.UseModel(&model.FbSportsMatchMarketOddsMarkets{})

	tableName := _fbSportsMatchMarketOddsMarkets.fbSportsMatchMarketOddsMarketsDo.TableName()
	_fbSportsMatchMarketOddsMarkets.ALL = field.NewAsterisk(tableName)
	_fbSportsMatchMarketOddsMarkets.ID = field.NewInt64(tableName, "id")
	_fbSportsMatchMarketOddsMarkets.MatchID = field.NewInt64(tableName, "match_id")
	_fbSportsMatchMarketOddsMarkets.OddsID = field.NewInt64(tableName, "odds_id")
	_fbSportsMatchMarketOddsMarkets.PlayID = field.NewInt64(tableName, "play_id")
	_fbSportsMatchMarketOddsMarkets.Op = field.NewString(tableName, "op")
	_fbSportsMatchMarketOddsMarkets.Line = field.NewString(tableName, "line")
	_fbSportsMatchMarketOddsMarkets.IsBestLine = field.NewInt64(tableName, "is_best_line")
	_fbSportsMatchMarketOddsMarkets.Status = field.NewInt64(tableName, "status")
	_fbSportsMatchMarketOddsMarkets.Parlay = field.NewInt64(tableName, "parlay")
	_fbSportsMatchMarketOddsMarkets.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbSportsMatchMarketOddsMarkets.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_fbSportsMatchMarketOddsMarkets.fillFieldMap()

	return _fbSportsMatchMarketOddsMarkets
}

// fbSportsMatchMarketOddsMarkets 玩法表
type fbSportsMatchMarketOddsMarkets struct {
	fbSportsMatchMarketOddsMarketsDo

	ALL        field.Asterisk
	ID         field.Int64  // 主键，自增 ID
	MatchID    field.Int64  // 赛事ID
	OddsID     field.Int64  // 外键，对应赔率表的 ID
	PlayID     field.Int64  // 玩法 ID
	Op         field.String // 玩法选项
	Line       field.String // 带线玩法的线，例如大小球 2.5
	IsBestLine field.Int64  // 是否为最优线
	Status     field.Int64  // 玩法销售状态
	Parlay     field.Int64  // 是否支持串关
	CreatedAt  field.Int64  // 创建时间
	UpdatedAt  field.Int64  // 更新时间

	fieldMap map[string]field.Expr
}

func (f fbSportsMatchMarketOddsMarkets) Table(newTableName string) *fbSportsMatchMarketOddsMarkets {
	f.fbSportsMatchMarketOddsMarketsDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbSportsMatchMarketOddsMarkets) As(alias string) *fbSportsMatchMarketOddsMarkets {
	f.fbSportsMatchMarketOddsMarketsDo.DO = *(f.fbSportsMatchMarketOddsMarketsDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbSportsMatchMarketOddsMarkets) updateTableName(table string) *fbSportsMatchMarketOddsMarkets {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.MatchID = field.NewInt64(table, "match_id")
	f.OddsID = field.NewInt64(table, "odds_id")
	f.PlayID = field.NewInt64(table, "play_id")
	f.Op = field.NewString(table, "op")
	f.Line = field.NewString(table, "line")
	f.IsBestLine = field.NewInt64(table, "is_best_line")
	f.Status = field.NewInt64(table, "status")
	f.Parlay = field.NewInt64(table, "parlay")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fbSportsMatchMarketOddsMarkets) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbSportsMatchMarketOddsMarkets) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 11)
	f.fieldMap["id"] = f.ID
	f.fieldMap["match_id"] = f.MatchID
	f.fieldMap["odds_id"] = f.OddsID
	f.fieldMap["play_id"] = f.PlayID
	f.fieldMap["op"] = f.Op
	f.fieldMap["line"] = f.Line
	f.fieldMap["is_best_line"] = f.IsBestLine
	f.fieldMap["status"] = f.Status
	f.fieldMap["parlay"] = f.Parlay
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fbSportsMatchMarketOddsMarkets) clone(db *gorm.DB) fbSportsMatchMarketOddsMarkets {
	f.fbSportsMatchMarketOddsMarketsDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbSportsMatchMarketOddsMarkets) replaceDB(db *gorm.DB) fbSportsMatchMarketOddsMarkets {
	f.fbSportsMatchMarketOddsMarketsDo.ReplaceDB(db)
	return f
}

type fbSportsMatchMarketOddsMarketsDo struct{ gen.DO }

type IFbSportsMatchMarketOddsMarketsDo interface {
	gen.SubQuery
	Debug() IFbSportsMatchMarketOddsMarketsDo
	WithContext(ctx context.Context) IFbSportsMatchMarketOddsMarketsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbSportsMatchMarketOddsMarketsDo
	WriteDB() IFbSportsMatchMarketOddsMarketsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbSportsMatchMarketOddsMarketsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbSportsMatchMarketOddsMarketsDo
	Not(conds ...gen.Condition) IFbSportsMatchMarketOddsMarketsDo
	Or(conds ...gen.Condition) IFbSportsMatchMarketOddsMarketsDo
	Select(conds ...field.Expr) IFbSportsMatchMarketOddsMarketsDo
	Where(conds ...gen.Condition) IFbSportsMatchMarketOddsMarketsDo
	Order(conds ...field.Expr) IFbSportsMatchMarketOddsMarketsDo
	Distinct(cols ...field.Expr) IFbSportsMatchMarketOddsMarketsDo
	Omit(cols ...field.Expr) IFbSportsMatchMarketOddsMarketsDo
	Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOddsMarketsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOddsMarketsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOddsMarketsDo
	Group(cols ...field.Expr) IFbSportsMatchMarketOddsMarketsDo
	Having(conds ...gen.Condition) IFbSportsMatchMarketOddsMarketsDo
	Limit(limit int) IFbSportsMatchMarketOddsMarketsDo
	Offset(offset int) IFbSportsMatchMarketOddsMarketsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchMarketOddsMarketsDo
	Unscoped() IFbSportsMatchMarketOddsMarketsDo
	Create(values ...*model.FbSportsMatchMarketOddsMarkets) error
	CreateInBatches(values []*model.FbSportsMatchMarketOddsMarkets, batchSize int) error
	Save(values ...*model.FbSportsMatchMarketOddsMarkets) error
	First() (*model.FbSportsMatchMarketOddsMarkets, error)
	Take() (*model.FbSportsMatchMarketOddsMarkets, error)
	Last() (*model.FbSportsMatchMarketOddsMarkets, error)
	Find() ([]*model.FbSportsMatchMarketOddsMarkets, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchMarketOddsMarkets, err error)
	FindInBatches(result *[]*model.FbSportsMatchMarketOddsMarkets, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbSportsMatchMarketOddsMarkets) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbSportsMatchMarketOddsMarketsDo
	Assign(attrs ...field.AssignExpr) IFbSportsMatchMarketOddsMarketsDo
	Joins(fields ...field.RelationField) IFbSportsMatchMarketOddsMarketsDo
	Preload(fields ...field.RelationField) IFbSportsMatchMarketOddsMarketsDo
	FirstOrInit() (*model.FbSportsMatchMarketOddsMarkets, error)
	FirstOrCreate() (*model.FbSportsMatchMarketOddsMarkets, error)
	FindByPage(offset int, limit int) (result []*model.FbSportsMatchMarketOddsMarkets, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbSportsMatchMarketOddsMarketsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbSportsMatchMarketOddsMarketsDo) Debug() IFbSportsMatchMarketOddsMarketsDo {
	return f.withDO(f.DO.Debug())
}

func (f fbSportsMatchMarketOddsMarketsDo) WithContext(ctx context.Context) IFbSportsMatchMarketOddsMarketsDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbSportsMatchMarketOddsMarketsDo) ReadDB() IFbSportsMatchMarketOddsMarketsDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbSportsMatchMarketOddsMarketsDo) WriteDB() IFbSportsMatchMarketOddsMarketsDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbSportsMatchMarketOddsMarketsDo) Session(config *gorm.Session) IFbSportsMatchMarketOddsMarketsDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbSportsMatchMarketOddsMarketsDo) Clauses(conds ...clause.Expression) IFbSportsMatchMarketOddsMarketsDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbSportsMatchMarketOddsMarketsDo) Returning(value interface{}, columns ...string) IFbSportsMatchMarketOddsMarketsDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbSportsMatchMarketOddsMarketsDo) Not(conds ...gen.Condition) IFbSportsMatchMarketOddsMarketsDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbSportsMatchMarketOddsMarketsDo) Or(conds ...gen.Condition) IFbSportsMatchMarketOddsMarketsDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbSportsMatchMarketOddsMarketsDo) Select(conds ...field.Expr) IFbSportsMatchMarketOddsMarketsDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbSportsMatchMarketOddsMarketsDo) Where(conds ...gen.Condition) IFbSportsMatchMarketOddsMarketsDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbSportsMatchMarketOddsMarketsDo) Order(conds ...field.Expr) IFbSportsMatchMarketOddsMarketsDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbSportsMatchMarketOddsMarketsDo) Distinct(cols ...field.Expr) IFbSportsMatchMarketOddsMarketsDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbSportsMatchMarketOddsMarketsDo) Omit(cols ...field.Expr) IFbSportsMatchMarketOddsMarketsDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbSportsMatchMarketOddsMarketsDo) Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOddsMarketsDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbSportsMatchMarketOddsMarketsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOddsMarketsDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbSportsMatchMarketOddsMarketsDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOddsMarketsDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbSportsMatchMarketOddsMarketsDo) Group(cols ...field.Expr) IFbSportsMatchMarketOddsMarketsDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbSportsMatchMarketOddsMarketsDo) Having(conds ...gen.Condition) IFbSportsMatchMarketOddsMarketsDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbSportsMatchMarketOddsMarketsDo) Limit(limit int) IFbSportsMatchMarketOddsMarketsDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbSportsMatchMarketOddsMarketsDo) Offset(offset int) IFbSportsMatchMarketOddsMarketsDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbSportsMatchMarketOddsMarketsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchMarketOddsMarketsDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbSportsMatchMarketOddsMarketsDo) Unscoped() IFbSportsMatchMarketOddsMarketsDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbSportsMatchMarketOddsMarketsDo) Create(values ...*model.FbSportsMatchMarketOddsMarkets) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbSportsMatchMarketOddsMarketsDo) CreateInBatches(values []*model.FbSportsMatchMarketOddsMarkets, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbSportsMatchMarketOddsMarketsDo) Save(values ...*model.FbSportsMatchMarketOddsMarkets) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbSportsMatchMarketOddsMarketsDo) First() (*model.FbSportsMatchMarketOddsMarkets, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketOddsMarkets), nil
	}
}

func (f fbSportsMatchMarketOddsMarketsDo) Take() (*model.FbSportsMatchMarketOddsMarkets, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketOddsMarkets), nil
	}
}

func (f fbSportsMatchMarketOddsMarketsDo) Last() (*model.FbSportsMatchMarketOddsMarkets, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketOddsMarkets), nil
	}
}

func (f fbSportsMatchMarketOddsMarketsDo) Find() ([]*model.FbSportsMatchMarketOddsMarkets, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbSportsMatchMarketOddsMarkets), err
}

func (f fbSportsMatchMarketOddsMarketsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchMarketOddsMarkets, err error) {
	buf := make([]*model.FbSportsMatchMarketOddsMarkets, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbSportsMatchMarketOddsMarketsDo) FindInBatches(result *[]*model.FbSportsMatchMarketOddsMarkets, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbSportsMatchMarketOddsMarketsDo) Attrs(attrs ...field.AssignExpr) IFbSportsMatchMarketOddsMarketsDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbSportsMatchMarketOddsMarketsDo) Assign(attrs ...field.AssignExpr) IFbSportsMatchMarketOddsMarketsDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbSportsMatchMarketOddsMarketsDo) Joins(fields ...field.RelationField) IFbSportsMatchMarketOddsMarketsDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbSportsMatchMarketOddsMarketsDo) Preload(fields ...field.RelationField) IFbSportsMatchMarketOddsMarketsDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbSportsMatchMarketOddsMarketsDo) FirstOrInit() (*model.FbSportsMatchMarketOddsMarkets, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketOddsMarkets), nil
	}
}

func (f fbSportsMatchMarketOddsMarketsDo) FirstOrCreate() (*model.FbSportsMatchMarketOddsMarkets, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketOddsMarkets), nil
	}
}

func (f fbSportsMatchMarketOddsMarketsDo) FindByPage(offset int, limit int) (result []*model.FbSportsMatchMarketOddsMarkets, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbSportsMatchMarketOddsMarketsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbSportsMatchMarketOddsMarketsDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbSportsMatchMarketOddsMarketsDo) Delete(models ...*model.FbSportsMatchMarketOddsMarkets) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbSportsMatchMarketOddsMarketsDo) withDO(do gen.Dao) *fbSportsMatchMarketOddsMarketsDo {
	f.DO = *do.(*gen.DO)
	return f
}
