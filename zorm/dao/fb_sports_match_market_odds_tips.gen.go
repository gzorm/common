// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newFbSportsMatchMarketOddsTips(db *gorm.DB, opts ...gen.DOOption) fbSportsMatchMarketOddsTips {
	_fbSportsMatchMarketOddsTips := fbSportsMatchMarketOddsTips{}

	_fbSportsMatchMarketOddsTips.fbSportsMatchMarketOddsTipsDo.UseDB(db, opts...)
	_fbSportsMatchMarketOddsTips.fbSportsMatchMarketOddsTipsDo.UseModel(&model.FbSportsMatchMarketOddsTips{})

	tableName := _fbSportsMatchMarketOddsTips.fbSportsMatchMarketOddsTipsDo.TableName()
	_fbSportsMatchMarketOddsTips.ALL = field.NewAsterisk(tableName)
	_fbSportsMatchMarketOddsTips.ID = field.NewInt64(tableName, "id")
	_fbSportsMatchMarketOddsTips.MatchID = field.NewInt64(tableName, "match_id")
	_fbSportsMatchMarketOddsTips.Options = field.NewString(tableName, "options")
	_fbSportsMatchMarketOddsTips.TeamsInfo = field.NewString(tableName, "teams_info")
	_fbSportsMatchMarketOddsTips.StartTime = field.NewInt64(tableName, "start_time")
	_fbSportsMatchMarketOddsTips.LeagueInfo = field.NewString(tableName, "league_info")
	_fbSportsMatchMarketOddsTips.MatchStatus = field.NewInt64(tableName, "match_status")
	_fbSportsMatchMarketOddsTips.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbSportsMatchMarketOddsTips.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_fbSportsMatchMarketOddsTips.fillFieldMap()

	return _fbSportsMatchMarketOddsTips
}

// fbSportsMatchMarketOddsTips 赛事玩法推荐
type fbSportsMatchMarketOddsTips struct {
	fbSportsMatchMarketOddsTipsDo

	ALL         field.Asterisk
	ID          field.Int64
	MatchID     field.Int64  // 赛事ID 原 mid
	Options     field.String // 选项集合 原 ops
	TeamsInfo   field.String // 球队信息，第一个是主队，第二个是客队 原 ts
	StartTime   field.Int64  // 赛事开赛时间 原 bt
	LeagueInfo  field.String // 联赛信息 原 lg
	MatchStatus field.Int64  // 赛事进行状态 原 ms
	CreatedAt   field.Int64  // 创建时间戳
	UpdatedAt   field.Int64  // 更新时间戳

	fieldMap map[string]field.Expr
}

func (f fbSportsMatchMarketOddsTips) Table(newTableName string) *fbSportsMatchMarketOddsTips {
	f.fbSportsMatchMarketOddsTipsDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbSportsMatchMarketOddsTips) As(alias string) *fbSportsMatchMarketOddsTips {
	f.fbSportsMatchMarketOddsTipsDo.DO = *(f.fbSportsMatchMarketOddsTipsDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbSportsMatchMarketOddsTips) updateTableName(table string) *fbSportsMatchMarketOddsTips {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.MatchID = field.NewInt64(table, "match_id")
	f.Options = field.NewString(table, "options")
	f.TeamsInfo = field.NewString(table, "teams_info")
	f.StartTime = field.NewInt64(table, "start_time")
	f.LeagueInfo = field.NewString(table, "league_info")
	f.MatchStatus = field.NewInt64(table, "match_status")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fbSportsMatchMarketOddsTips) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbSportsMatchMarketOddsTips) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 9)
	f.fieldMap["id"] = f.ID
	f.fieldMap["match_id"] = f.MatchID
	f.fieldMap["options"] = f.Options
	f.fieldMap["teams_info"] = f.TeamsInfo
	f.fieldMap["start_time"] = f.StartTime
	f.fieldMap["league_info"] = f.LeagueInfo
	f.fieldMap["match_status"] = f.MatchStatus
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fbSportsMatchMarketOddsTips) clone(db *gorm.DB) fbSportsMatchMarketOddsTips {
	f.fbSportsMatchMarketOddsTipsDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbSportsMatchMarketOddsTips) replaceDB(db *gorm.DB) fbSportsMatchMarketOddsTips {
	f.fbSportsMatchMarketOddsTipsDo.ReplaceDB(db)
	return f
}

type fbSportsMatchMarketOddsTipsDo struct{ gen.DO }

type IFbSportsMatchMarketOddsTipsDo interface {
	gen.SubQuery
	Debug() IFbSportsMatchMarketOddsTipsDo
	WithContext(ctx context.Context) IFbSportsMatchMarketOddsTipsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbSportsMatchMarketOddsTipsDo
	WriteDB() IFbSportsMatchMarketOddsTipsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbSportsMatchMarketOddsTipsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbSportsMatchMarketOddsTipsDo
	Not(conds ...gen.Condition) IFbSportsMatchMarketOddsTipsDo
	Or(conds ...gen.Condition) IFbSportsMatchMarketOddsTipsDo
	Select(conds ...field.Expr) IFbSportsMatchMarketOddsTipsDo
	Where(conds ...gen.Condition) IFbSportsMatchMarketOddsTipsDo
	Order(conds ...field.Expr) IFbSportsMatchMarketOddsTipsDo
	Distinct(cols ...field.Expr) IFbSportsMatchMarketOddsTipsDo
	Omit(cols ...field.Expr) IFbSportsMatchMarketOddsTipsDo
	Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOddsTipsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOddsTipsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOddsTipsDo
	Group(cols ...field.Expr) IFbSportsMatchMarketOddsTipsDo
	Having(conds ...gen.Condition) IFbSportsMatchMarketOddsTipsDo
	Limit(limit int) IFbSportsMatchMarketOddsTipsDo
	Offset(offset int) IFbSportsMatchMarketOddsTipsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchMarketOddsTipsDo
	Unscoped() IFbSportsMatchMarketOddsTipsDo
	Create(values ...*model.FbSportsMatchMarketOddsTips) error
	CreateInBatches(values []*model.FbSportsMatchMarketOddsTips, batchSize int) error
	Save(values ...*model.FbSportsMatchMarketOddsTips) error
	First() (*model.FbSportsMatchMarketOddsTips, error)
	Take() (*model.FbSportsMatchMarketOddsTips, error)
	Last() (*model.FbSportsMatchMarketOddsTips, error)
	Find() ([]*model.FbSportsMatchMarketOddsTips, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchMarketOddsTips, err error)
	FindInBatches(result *[]*model.FbSportsMatchMarketOddsTips, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbSportsMatchMarketOddsTips) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbSportsMatchMarketOddsTipsDo
	Assign(attrs ...field.AssignExpr) IFbSportsMatchMarketOddsTipsDo
	Joins(fields ...field.RelationField) IFbSportsMatchMarketOddsTipsDo
	Preload(fields ...field.RelationField) IFbSportsMatchMarketOddsTipsDo
	FirstOrInit() (*model.FbSportsMatchMarketOddsTips, error)
	FirstOrCreate() (*model.FbSportsMatchMarketOddsTips, error)
	FindByPage(offset int, limit int) (result []*model.FbSportsMatchMarketOddsTips, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbSportsMatchMarketOddsTipsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbSportsMatchMarketOddsTipsDo) Debug() IFbSportsMatchMarketOddsTipsDo {
	return f.withDO(f.DO.Debug())
}

func (f fbSportsMatchMarketOddsTipsDo) WithContext(ctx context.Context) IFbSportsMatchMarketOddsTipsDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbSportsMatchMarketOddsTipsDo) ReadDB() IFbSportsMatchMarketOddsTipsDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbSportsMatchMarketOddsTipsDo) WriteDB() IFbSportsMatchMarketOddsTipsDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbSportsMatchMarketOddsTipsDo) Session(config *gorm.Session) IFbSportsMatchMarketOddsTipsDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbSportsMatchMarketOddsTipsDo) Clauses(conds ...clause.Expression) IFbSportsMatchMarketOddsTipsDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbSportsMatchMarketOddsTipsDo) Returning(value interface{}, columns ...string) IFbSportsMatchMarketOddsTipsDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbSportsMatchMarketOddsTipsDo) Not(conds ...gen.Condition) IFbSportsMatchMarketOddsTipsDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbSportsMatchMarketOddsTipsDo) Or(conds ...gen.Condition) IFbSportsMatchMarketOddsTipsDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbSportsMatchMarketOddsTipsDo) Select(conds ...field.Expr) IFbSportsMatchMarketOddsTipsDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbSportsMatchMarketOddsTipsDo) Where(conds ...gen.Condition) IFbSportsMatchMarketOddsTipsDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbSportsMatchMarketOddsTipsDo) Order(conds ...field.Expr) IFbSportsMatchMarketOddsTipsDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbSportsMatchMarketOddsTipsDo) Distinct(cols ...field.Expr) IFbSportsMatchMarketOddsTipsDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbSportsMatchMarketOddsTipsDo) Omit(cols ...field.Expr) IFbSportsMatchMarketOddsTipsDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbSportsMatchMarketOddsTipsDo) Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOddsTipsDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbSportsMatchMarketOddsTipsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOddsTipsDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbSportsMatchMarketOddsTipsDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOddsTipsDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbSportsMatchMarketOddsTipsDo) Group(cols ...field.Expr) IFbSportsMatchMarketOddsTipsDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbSportsMatchMarketOddsTipsDo) Having(conds ...gen.Condition) IFbSportsMatchMarketOddsTipsDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbSportsMatchMarketOddsTipsDo) Limit(limit int) IFbSportsMatchMarketOddsTipsDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbSportsMatchMarketOddsTipsDo) Offset(offset int) IFbSportsMatchMarketOddsTipsDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbSportsMatchMarketOddsTipsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchMarketOddsTipsDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbSportsMatchMarketOddsTipsDo) Unscoped() IFbSportsMatchMarketOddsTipsDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbSportsMatchMarketOddsTipsDo) Create(values ...*model.FbSportsMatchMarketOddsTips) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbSportsMatchMarketOddsTipsDo) CreateInBatches(values []*model.FbSportsMatchMarketOddsTips, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbSportsMatchMarketOddsTipsDo) Save(values ...*model.FbSportsMatchMarketOddsTips) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbSportsMatchMarketOddsTipsDo) First() (*model.FbSportsMatchMarketOddsTips, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketOddsTips), nil
	}
}

func (f fbSportsMatchMarketOddsTipsDo) Take() (*model.FbSportsMatchMarketOddsTips, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketOddsTips), nil
	}
}

func (f fbSportsMatchMarketOddsTipsDo) Last() (*model.FbSportsMatchMarketOddsTips, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketOddsTips), nil
	}
}

func (f fbSportsMatchMarketOddsTipsDo) Find() ([]*model.FbSportsMatchMarketOddsTips, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbSportsMatchMarketOddsTips), err
}

func (f fbSportsMatchMarketOddsTipsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchMarketOddsTips, err error) {
	buf := make([]*model.FbSportsMatchMarketOddsTips, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbSportsMatchMarketOddsTipsDo) FindInBatches(result *[]*model.FbSportsMatchMarketOddsTips, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbSportsMatchMarketOddsTipsDo) Attrs(attrs ...field.AssignExpr) IFbSportsMatchMarketOddsTipsDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbSportsMatchMarketOddsTipsDo) Assign(attrs ...field.AssignExpr) IFbSportsMatchMarketOddsTipsDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbSportsMatchMarketOddsTipsDo) Joins(fields ...field.RelationField) IFbSportsMatchMarketOddsTipsDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbSportsMatchMarketOddsTipsDo) Preload(fields ...field.RelationField) IFbSportsMatchMarketOddsTipsDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbSportsMatchMarketOddsTipsDo) FirstOrInit() (*model.FbSportsMatchMarketOddsTips, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketOddsTips), nil
	}
}

func (f fbSportsMatchMarketOddsTipsDo) FirstOrCreate() (*model.FbSportsMatchMarketOddsTips, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketOddsTips), nil
	}
}

func (f fbSportsMatchMarketOddsTipsDo) FindByPage(offset int, limit int) (result []*model.FbSportsMatchMarketOddsTips, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbSportsMatchMarketOddsTipsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbSportsMatchMarketOddsTipsDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbSportsMatchMarketOddsTipsDo) Delete(models ...*model.FbSportsMatchMarketOddsTips) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbSportsMatchMarketOddsTipsDo) withDO(do gen.Dao) *fbSportsMatchMarketOddsTipsDo {
	f.DO = *do.(*gen.DO)
	return f
}
