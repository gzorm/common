// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newFbSportsMatchStatisticsMarketType(db *gorm.DB, opts ...gen.DOOption) fbSportsMatchStatisticsMarketType {
	_fbSportsMatchStatisticsMarketType := fbSportsMatchStatisticsMarketType{}

	_fbSportsMatchStatisticsMarketType.fbSportsMatchStatisticsMarketTypeDo.UseDB(db, opts...)
	_fbSportsMatchStatisticsMarketType.fbSportsMatchStatisticsMarketTypeDo.UseModel(&model.FbSportsMatchStatisticsMarketType{})

	tableName := _fbSportsMatchStatisticsMarketType.fbSportsMatchStatisticsMarketTypeDo.TableName()
	_fbSportsMatchStatisticsMarketType.ALL = field.NewAsterisk(tableName)
	_fbSportsMatchStatisticsMarketType.ID = field.NewInt64(tableName, "id")
	_fbSportsMatchStatisticsMarketType.StatisticsID = field.NewInt64(tableName, "statistics_id")
	_fbSportsMatchStatisticsMarketType.MarketTypeID = field.NewString(tableName, "market_type_id")
	_fbSportsMatchStatisticsMarketType.SportID = field.NewInt64(tableName, "sport_id")
	_fbSportsMatchStatisticsMarketType.GroupStatistics = field.NewString(tableName, "group_statistics")
	_fbSportsMatchStatisticsMarketType.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbSportsMatchStatisticsMarketType.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_fbSportsMatchStatisticsMarketType.fillFieldMap()

	return _fbSportsMatchStatisticsMarketType
}

// fbSportsMatchStatisticsMarketType 盘口组合统计表，存储盘口组合下的赛事统计信息
type fbSportsMatchStatisticsMarketType struct {
	fbSportsMatchStatisticsMarketTypeDo

	ALL             field.Asterisk
	ID              field.Int64  // 主键ID
	StatisticsID    field.Int64  // 关联主表的 ID（对应主表 fb_sports_match_statistics.id）
	MarketTypeID    field.String // 盘口组合 ID（对应 data.mts.id）
	SportID         field.Int64  // 运动种类 ID（对应 data.mts.sid）
	GroupStatistics field.String // 按赛事分组类型统计的赛事总数集合（对应 data.mts.tps，存储为 JSON）
	CreatedAt       field.Int64  // 记录创建时间（时间戳）
	UpdatedAt       field.Int64  // 记录更新时间（时间戳）

	fieldMap map[string]field.Expr
}

func (f fbSportsMatchStatisticsMarketType) Table(newTableName string) *fbSportsMatchStatisticsMarketType {
	f.fbSportsMatchStatisticsMarketTypeDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbSportsMatchStatisticsMarketType) As(alias string) *fbSportsMatchStatisticsMarketType {
	f.fbSportsMatchStatisticsMarketTypeDo.DO = *(f.fbSportsMatchStatisticsMarketTypeDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbSportsMatchStatisticsMarketType) updateTableName(table string) *fbSportsMatchStatisticsMarketType {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.StatisticsID = field.NewInt64(table, "statistics_id")
	f.MarketTypeID = field.NewString(table, "market_type_id")
	f.SportID = field.NewInt64(table, "sport_id")
	f.GroupStatistics = field.NewString(table, "group_statistics")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fbSportsMatchStatisticsMarketType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbSportsMatchStatisticsMarketType) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 7)
	f.fieldMap["id"] = f.ID
	f.fieldMap["statistics_id"] = f.StatisticsID
	f.fieldMap["market_type_id"] = f.MarketTypeID
	f.fieldMap["sport_id"] = f.SportID
	f.fieldMap["group_statistics"] = f.GroupStatistics
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fbSportsMatchStatisticsMarketType) clone(db *gorm.DB) fbSportsMatchStatisticsMarketType {
	f.fbSportsMatchStatisticsMarketTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbSportsMatchStatisticsMarketType) replaceDB(db *gorm.DB) fbSportsMatchStatisticsMarketType {
	f.fbSportsMatchStatisticsMarketTypeDo.ReplaceDB(db)
	return f
}

type fbSportsMatchStatisticsMarketTypeDo struct{ gen.DO }

type IFbSportsMatchStatisticsMarketTypeDo interface {
	gen.SubQuery
	Debug() IFbSportsMatchStatisticsMarketTypeDo
	WithContext(ctx context.Context) IFbSportsMatchStatisticsMarketTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbSportsMatchStatisticsMarketTypeDo
	WriteDB() IFbSportsMatchStatisticsMarketTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbSportsMatchStatisticsMarketTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbSportsMatchStatisticsMarketTypeDo
	Not(conds ...gen.Condition) IFbSportsMatchStatisticsMarketTypeDo
	Or(conds ...gen.Condition) IFbSportsMatchStatisticsMarketTypeDo
	Select(conds ...field.Expr) IFbSportsMatchStatisticsMarketTypeDo
	Where(conds ...gen.Condition) IFbSportsMatchStatisticsMarketTypeDo
	Order(conds ...field.Expr) IFbSportsMatchStatisticsMarketTypeDo
	Distinct(cols ...field.Expr) IFbSportsMatchStatisticsMarketTypeDo
	Omit(cols ...field.Expr) IFbSportsMatchStatisticsMarketTypeDo
	Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchStatisticsMarketTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchStatisticsMarketTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchStatisticsMarketTypeDo
	Group(cols ...field.Expr) IFbSportsMatchStatisticsMarketTypeDo
	Having(conds ...gen.Condition) IFbSportsMatchStatisticsMarketTypeDo
	Limit(limit int) IFbSportsMatchStatisticsMarketTypeDo
	Offset(offset int) IFbSportsMatchStatisticsMarketTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchStatisticsMarketTypeDo
	Unscoped() IFbSportsMatchStatisticsMarketTypeDo
	Create(values ...*model.FbSportsMatchStatisticsMarketType) error
	CreateInBatches(values []*model.FbSportsMatchStatisticsMarketType, batchSize int) error
	Save(values ...*model.FbSportsMatchStatisticsMarketType) error
	First() (*model.FbSportsMatchStatisticsMarketType, error)
	Take() (*model.FbSportsMatchStatisticsMarketType, error)
	Last() (*model.FbSportsMatchStatisticsMarketType, error)
	Find() ([]*model.FbSportsMatchStatisticsMarketType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchStatisticsMarketType, err error)
	FindInBatches(result *[]*model.FbSportsMatchStatisticsMarketType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbSportsMatchStatisticsMarketType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbSportsMatchStatisticsMarketTypeDo
	Assign(attrs ...field.AssignExpr) IFbSportsMatchStatisticsMarketTypeDo
	Joins(fields ...field.RelationField) IFbSportsMatchStatisticsMarketTypeDo
	Preload(fields ...field.RelationField) IFbSportsMatchStatisticsMarketTypeDo
	FirstOrInit() (*model.FbSportsMatchStatisticsMarketType, error)
	FirstOrCreate() (*model.FbSportsMatchStatisticsMarketType, error)
	FindByPage(offset int, limit int) (result []*model.FbSportsMatchStatisticsMarketType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbSportsMatchStatisticsMarketTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbSportsMatchStatisticsMarketTypeDo) Debug() IFbSportsMatchStatisticsMarketTypeDo {
	return f.withDO(f.DO.Debug())
}

func (f fbSportsMatchStatisticsMarketTypeDo) WithContext(ctx context.Context) IFbSportsMatchStatisticsMarketTypeDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbSportsMatchStatisticsMarketTypeDo) ReadDB() IFbSportsMatchStatisticsMarketTypeDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbSportsMatchStatisticsMarketTypeDo) WriteDB() IFbSportsMatchStatisticsMarketTypeDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbSportsMatchStatisticsMarketTypeDo) Session(config *gorm.Session) IFbSportsMatchStatisticsMarketTypeDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbSportsMatchStatisticsMarketTypeDo) Clauses(conds ...clause.Expression) IFbSportsMatchStatisticsMarketTypeDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbSportsMatchStatisticsMarketTypeDo) Returning(value interface{}, columns ...string) IFbSportsMatchStatisticsMarketTypeDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbSportsMatchStatisticsMarketTypeDo) Not(conds ...gen.Condition) IFbSportsMatchStatisticsMarketTypeDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbSportsMatchStatisticsMarketTypeDo) Or(conds ...gen.Condition) IFbSportsMatchStatisticsMarketTypeDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbSportsMatchStatisticsMarketTypeDo) Select(conds ...field.Expr) IFbSportsMatchStatisticsMarketTypeDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbSportsMatchStatisticsMarketTypeDo) Where(conds ...gen.Condition) IFbSportsMatchStatisticsMarketTypeDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbSportsMatchStatisticsMarketTypeDo) Order(conds ...field.Expr) IFbSportsMatchStatisticsMarketTypeDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbSportsMatchStatisticsMarketTypeDo) Distinct(cols ...field.Expr) IFbSportsMatchStatisticsMarketTypeDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbSportsMatchStatisticsMarketTypeDo) Omit(cols ...field.Expr) IFbSportsMatchStatisticsMarketTypeDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbSportsMatchStatisticsMarketTypeDo) Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchStatisticsMarketTypeDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbSportsMatchStatisticsMarketTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchStatisticsMarketTypeDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbSportsMatchStatisticsMarketTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchStatisticsMarketTypeDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbSportsMatchStatisticsMarketTypeDo) Group(cols ...field.Expr) IFbSportsMatchStatisticsMarketTypeDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbSportsMatchStatisticsMarketTypeDo) Having(conds ...gen.Condition) IFbSportsMatchStatisticsMarketTypeDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbSportsMatchStatisticsMarketTypeDo) Limit(limit int) IFbSportsMatchStatisticsMarketTypeDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbSportsMatchStatisticsMarketTypeDo) Offset(offset int) IFbSportsMatchStatisticsMarketTypeDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbSportsMatchStatisticsMarketTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchStatisticsMarketTypeDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbSportsMatchStatisticsMarketTypeDo) Unscoped() IFbSportsMatchStatisticsMarketTypeDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbSportsMatchStatisticsMarketTypeDo) Create(values ...*model.FbSportsMatchStatisticsMarketType) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbSportsMatchStatisticsMarketTypeDo) CreateInBatches(values []*model.FbSportsMatchStatisticsMarketType, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbSportsMatchStatisticsMarketTypeDo) Save(values ...*model.FbSportsMatchStatisticsMarketType) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbSportsMatchStatisticsMarketTypeDo) First() (*model.FbSportsMatchStatisticsMarketType, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchStatisticsMarketType), nil
	}
}

func (f fbSportsMatchStatisticsMarketTypeDo) Take() (*model.FbSportsMatchStatisticsMarketType, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchStatisticsMarketType), nil
	}
}

func (f fbSportsMatchStatisticsMarketTypeDo) Last() (*model.FbSportsMatchStatisticsMarketType, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchStatisticsMarketType), nil
	}
}

func (f fbSportsMatchStatisticsMarketTypeDo) Find() ([]*model.FbSportsMatchStatisticsMarketType, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbSportsMatchStatisticsMarketType), err
}

func (f fbSportsMatchStatisticsMarketTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchStatisticsMarketType, err error) {
	buf := make([]*model.FbSportsMatchStatisticsMarketType, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbSportsMatchStatisticsMarketTypeDo) FindInBatches(result *[]*model.FbSportsMatchStatisticsMarketType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbSportsMatchStatisticsMarketTypeDo) Attrs(attrs ...field.AssignExpr) IFbSportsMatchStatisticsMarketTypeDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbSportsMatchStatisticsMarketTypeDo) Assign(attrs ...field.AssignExpr) IFbSportsMatchStatisticsMarketTypeDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbSportsMatchStatisticsMarketTypeDo) Joins(fields ...field.RelationField) IFbSportsMatchStatisticsMarketTypeDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbSportsMatchStatisticsMarketTypeDo) Preload(fields ...field.RelationField) IFbSportsMatchStatisticsMarketTypeDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbSportsMatchStatisticsMarketTypeDo) FirstOrInit() (*model.FbSportsMatchStatisticsMarketType, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchStatisticsMarketType), nil
	}
}

func (f fbSportsMatchStatisticsMarketTypeDo) FirstOrCreate() (*model.FbSportsMatchStatisticsMarketType, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchStatisticsMarketType), nil
	}
}

func (f fbSportsMatchStatisticsMarketTypeDo) FindByPage(offset int, limit int) (result []*model.FbSportsMatchStatisticsMarketType, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbSportsMatchStatisticsMarketTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbSportsMatchStatisticsMarketTypeDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbSportsMatchStatisticsMarketTypeDo) Delete(models ...*model.FbSportsMatchStatisticsMarketType) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbSportsMatchStatisticsMarketTypeDo) withDO(do gen.Dao) *fbSportsMatchStatisticsMarketTypeDo {
	f.DO = *do.(*gen.DO)
	return f
}
