// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newFbSportsMatchResultsStatistics(db *gorm.DB, opts ...gen.DOOption) fbSportsMatchResultsStatistics {
	_fbSportsMatchResultsStatistics := fbSportsMatchResultsStatistics{}

	_fbSportsMatchResultsStatistics.fbSportsMatchResultsStatisticsDo.UseDB(db, opts...)
	_fbSportsMatchResultsStatistics.fbSportsMatchResultsStatisticsDo.UseModel(&model.FbSportsMatchResultsStatistics{})

	tableName := _fbSportsMatchResultsStatistics.fbSportsMatchResultsStatisticsDo.TableName()
	_fbSportsMatchResultsStatistics.ALL = field.NewAsterisk(tableName)
	_fbSportsMatchResultsStatistics.ID = field.NewInt64(tableName, "id")
	_fbSportsMatchResultsStatistics.SportID = field.NewInt64(tableName, "sport_id")
	_fbSportsMatchResultsStatistics.MatchType = field.NewInt64(tableName, "match_type")
	_fbSportsMatchResultsStatistics.ResultCount = field.NewInt64(tableName, "result_count")
	_fbSportsMatchResultsStatistics.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbSportsMatchResultsStatistics.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_fbSportsMatchResultsStatistics.fillFieldMap()

	return _fbSportsMatchResultsStatistics
}

// fbSportsMatchResultsStatistics 赛果统计表
type fbSportsMatchResultsStatistics struct {
	fbSportsMatchResultsStatisticsDo

	ALL         field.Asterisk
	ID          field.Int64 // 主键ID
	SportID     field.Int64 // 运动ID，如足球、篮球
	MatchType   field.Int64 // 赛事类型，如常规赛、季后赛
	ResultCount field.Int64 // 赛果统计总数
	CreatedAt   field.Int64 // 记录创建时间
	UpdatedAt   field.Int64 // 记录更新时间

	fieldMap map[string]field.Expr
}

func (f fbSportsMatchResultsStatistics) Table(newTableName string) *fbSportsMatchResultsStatistics {
	f.fbSportsMatchResultsStatisticsDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbSportsMatchResultsStatistics) As(alias string) *fbSportsMatchResultsStatistics {
	f.fbSportsMatchResultsStatisticsDo.DO = *(f.fbSportsMatchResultsStatisticsDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbSportsMatchResultsStatistics) updateTableName(table string) *fbSportsMatchResultsStatistics {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.SportID = field.NewInt64(table, "sport_id")
	f.MatchType = field.NewInt64(table, "match_type")
	f.ResultCount = field.NewInt64(table, "result_count")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fbSportsMatchResultsStatistics) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbSportsMatchResultsStatistics) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["id"] = f.ID
	f.fieldMap["sport_id"] = f.SportID
	f.fieldMap["match_type"] = f.MatchType
	f.fieldMap["result_count"] = f.ResultCount
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fbSportsMatchResultsStatistics) clone(db *gorm.DB) fbSportsMatchResultsStatistics {
	f.fbSportsMatchResultsStatisticsDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbSportsMatchResultsStatistics) replaceDB(db *gorm.DB) fbSportsMatchResultsStatistics {
	f.fbSportsMatchResultsStatisticsDo.ReplaceDB(db)
	return f
}

type fbSportsMatchResultsStatisticsDo struct{ gen.DO }

type IFbSportsMatchResultsStatisticsDo interface {
	gen.SubQuery
	Debug() IFbSportsMatchResultsStatisticsDo
	WithContext(ctx context.Context) IFbSportsMatchResultsStatisticsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbSportsMatchResultsStatisticsDo
	WriteDB() IFbSportsMatchResultsStatisticsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbSportsMatchResultsStatisticsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbSportsMatchResultsStatisticsDo
	Not(conds ...gen.Condition) IFbSportsMatchResultsStatisticsDo
	Or(conds ...gen.Condition) IFbSportsMatchResultsStatisticsDo
	Select(conds ...field.Expr) IFbSportsMatchResultsStatisticsDo
	Where(conds ...gen.Condition) IFbSportsMatchResultsStatisticsDo
	Order(conds ...field.Expr) IFbSportsMatchResultsStatisticsDo
	Distinct(cols ...field.Expr) IFbSportsMatchResultsStatisticsDo
	Omit(cols ...field.Expr) IFbSportsMatchResultsStatisticsDo
	Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchResultsStatisticsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchResultsStatisticsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchResultsStatisticsDo
	Group(cols ...field.Expr) IFbSportsMatchResultsStatisticsDo
	Having(conds ...gen.Condition) IFbSportsMatchResultsStatisticsDo
	Limit(limit int) IFbSportsMatchResultsStatisticsDo
	Offset(offset int) IFbSportsMatchResultsStatisticsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchResultsStatisticsDo
	Unscoped() IFbSportsMatchResultsStatisticsDo
	Create(values ...*model.FbSportsMatchResultsStatistics) error
	CreateInBatches(values []*model.FbSportsMatchResultsStatistics, batchSize int) error
	Save(values ...*model.FbSportsMatchResultsStatistics) error
	First() (*model.FbSportsMatchResultsStatistics, error)
	Take() (*model.FbSportsMatchResultsStatistics, error)
	Last() (*model.FbSportsMatchResultsStatistics, error)
	Find() ([]*model.FbSportsMatchResultsStatistics, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchResultsStatistics, err error)
	FindInBatches(result *[]*model.FbSportsMatchResultsStatistics, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbSportsMatchResultsStatistics) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbSportsMatchResultsStatisticsDo
	Assign(attrs ...field.AssignExpr) IFbSportsMatchResultsStatisticsDo
	Joins(fields ...field.RelationField) IFbSportsMatchResultsStatisticsDo
	Preload(fields ...field.RelationField) IFbSportsMatchResultsStatisticsDo
	FirstOrInit() (*model.FbSportsMatchResultsStatistics, error)
	FirstOrCreate() (*model.FbSportsMatchResultsStatistics, error)
	FindByPage(offset int, limit int) (result []*model.FbSportsMatchResultsStatistics, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbSportsMatchResultsStatisticsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbSportsMatchResultsStatisticsDo) Debug() IFbSportsMatchResultsStatisticsDo {
	return f.withDO(f.DO.Debug())
}

func (f fbSportsMatchResultsStatisticsDo) WithContext(ctx context.Context) IFbSportsMatchResultsStatisticsDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbSportsMatchResultsStatisticsDo) ReadDB() IFbSportsMatchResultsStatisticsDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbSportsMatchResultsStatisticsDo) WriteDB() IFbSportsMatchResultsStatisticsDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbSportsMatchResultsStatisticsDo) Session(config *gorm.Session) IFbSportsMatchResultsStatisticsDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbSportsMatchResultsStatisticsDo) Clauses(conds ...clause.Expression) IFbSportsMatchResultsStatisticsDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbSportsMatchResultsStatisticsDo) Returning(value interface{}, columns ...string) IFbSportsMatchResultsStatisticsDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbSportsMatchResultsStatisticsDo) Not(conds ...gen.Condition) IFbSportsMatchResultsStatisticsDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbSportsMatchResultsStatisticsDo) Or(conds ...gen.Condition) IFbSportsMatchResultsStatisticsDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbSportsMatchResultsStatisticsDo) Select(conds ...field.Expr) IFbSportsMatchResultsStatisticsDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbSportsMatchResultsStatisticsDo) Where(conds ...gen.Condition) IFbSportsMatchResultsStatisticsDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbSportsMatchResultsStatisticsDo) Order(conds ...field.Expr) IFbSportsMatchResultsStatisticsDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbSportsMatchResultsStatisticsDo) Distinct(cols ...field.Expr) IFbSportsMatchResultsStatisticsDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbSportsMatchResultsStatisticsDo) Omit(cols ...field.Expr) IFbSportsMatchResultsStatisticsDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbSportsMatchResultsStatisticsDo) Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchResultsStatisticsDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbSportsMatchResultsStatisticsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchResultsStatisticsDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbSportsMatchResultsStatisticsDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchResultsStatisticsDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbSportsMatchResultsStatisticsDo) Group(cols ...field.Expr) IFbSportsMatchResultsStatisticsDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbSportsMatchResultsStatisticsDo) Having(conds ...gen.Condition) IFbSportsMatchResultsStatisticsDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbSportsMatchResultsStatisticsDo) Limit(limit int) IFbSportsMatchResultsStatisticsDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbSportsMatchResultsStatisticsDo) Offset(offset int) IFbSportsMatchResultsStatisticsDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbSportsMatchResultsStatisticsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchResultsStatisticsDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbSportsMatchResultsStatisticsDo) Unscoped() IFbSportsMatchResultsStatisticsDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbSportsMatchResultsStatisticsDo) Create(values ...*model.FbSportsMatchResultsStatistics) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbSportsMatchResultsStatisticsDo) CreateInBatches(values []*model.FbSportsMatchResultsStatistics, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbSportsMatchResultsStatisticsDo) Save(values ...*model.FbSportsMatchResultsStatistics) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbSportsMatchResultsStatisticsDo) First() (*model.FbSportsMatchResultsStatistics, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchResultsStatistics), nil
	}
}

func (f fbSportsMatchResultsStatisticsDo) Take() (*model.FbSportsMatchResultsStatistics, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchResultsStatistics), nil
	}
}

func (f fbSportsMatchResultsStatisticsDo) Last() (*model.FbSportsMatchResultsStatistics, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchResultsStatistics), nil
	}
}

func (f fbSportsMatchResultsStatisticsDo) Find() ([]*model.FbSportsMatchResultsStatistics, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbSportsMatchResultsStatistics), err
}

func (f fbSportsMatchResultsStatisticsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchResultsStatistics, err error) {
	buf := make([]*model.FbSportsMatchResultsStatistics, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbSportsMatchResultsStatisticsDo) FindInBatches(result *[]*model.FbSportsMatchResultsStatistics, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbSportsMatchResultsStatisticsDo) Attrs(attrs ...field.AssignExpr) IFbSportsMatchResultsStatisticsDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbSportsMatchResultsStatisticsDo) Assign(attrs ...field.AssignExpr) IFbSportsMatchResultsStatisticsDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbSportsMatchResultsStatisticsDo) Joins(fields ...field.RelationField) IFbSportsMatchResultsStatisticsDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbSportsMatchResultsStatisticsDo) Preload(fields ...field.RelationField) IFbSportsMatchResultsStatisticsDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbSportsMatchResultsStatisticsDo) FirstOrInit() (*model.FbSportsMatchResultsStatistics, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchResultsStatistics), nil
	}
}

func (f fbSportsMatchResultsStatisticsDo) FirstOrCreate() (*model.FbSportsMatchResultsStatistics, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchResultsStatistics), nil
	}
}

func (f fbSportsMatchResultsStatisticsDo) FindByPage(offset int, limit int) (result []*model.FbSportsMatchResultsStatistics, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbSportsMatchResultsStatisticsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbSportsMatchResultsStatisticsDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbSportsMatchResultsStatisticsDo) Delete(models ...*model.FbSportsMatchResultsStatistics) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbSportsMatchResultsStatisticsDo) withDO(do gen.Dao) *fbSportsMatchResultsStatisticsDo {
	f.DO = *do.(*gen.DO)
	return f
}
