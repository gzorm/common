// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newFbSportsMatchMarketOddsMarketsOptions(db *gorm.DB, opts ...gen.DOOption) fbSportsMatchMarketOddsMarketsOptions {
	_fbSportsMatchMarketOddsMarketsOptions := fbSportsMatchMarketOddsMarketsOptions{}

	_fbSportsMatchMarketOddsMarketsOptions.fbSportsMatchMarketOddsMarketsOptionsDo.UseDB(db, opts...)
	_fbSportsMatchMarketOddsMarketsOptions.fbSportsMatchMarketOddsMarketsOptionsDo.UseModel(&model.FbSportsMatchMarketOddsMarketsOptions{})

	tableName := _fbSportsMatchMarketOddsMarketsOptions.fbSportsMatchMarketOddsMarketsOptionsDo.TableName()
	_fbSportsMatchMarketOddsMarketsOptions.ALL = field.NewAsterisk(tableName)
	_fbSportsMatchMarketOddsMarketsOptions.ID = field.NewInt64(tableName, "id")
	_fbSportsMatchMarketOddsMarketsOptions.MarketID = field.NewInt64(tableName, "market_id")
	_fbSportsMatchMarketOddsMarketsOptions.NameFull = field.NewString(tableName, "name_full")
	_fbSportsMatchMarketOddsMarketsOptions.NameShort = field.NewString(tableName, "name_short")
	_fbSportsMatchMarketOddsMarketsOptions.TeamID = field.NewInt64(tableName, "team_id")
	_fbSportsMatchMarketOddsMarketsOptions.OpType = field.NewInt64(tableName, "op_type")
	_fbSportsMatchMarketOddsMarketsOptions.OddsEuro = field.NewField(tableName, "odds_euro")
	_fbSportsMatchMarketOddsMarketsOptions.OddsType = field.NewInt64(tableName, "odds_type")
	_fbSportsMatchMarketOddsMarketsOptions.Outcome = field.NewInt64(tableName, "outcome")
	_fbSportsMatchMarketOddsMarketsOptions.Line = field.NewString(tableName, "line")
	_fbSportsMatchMarketOddsMarketsOptions.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbSportsMatchMarketOddsMarketsOptions.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_fbSportsMatchMarketOddsMarketsOptions.fillFieldMap()

	return _fbSportsMatchMarketOddsMarketsOptions
}

// fbSportsMatchMarketOddsMarketsOptions 玩法选项表
type fbSportsMatchMarketOddsMarketsOptions struct {
	fbSportsMatchMarketOddsMarketsOptionsDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键，自增 ID
	MarketID  field.Int64  // 外键，对应玩法表的 ID
	NameFull  field.String // 选项全称
	NameShort field.String // 选项简称
	TeamID    field.Int64  // 球员或球队 ID
	OpType    field.Int64  // 选项类型，例如主、客、大、小
	OddsEuro  field.Field  // 欧盘赔率
	OddsType  field.Int64  // 赔率类型
	Outcome   field.Int64  // 选项结算结果
	Line      field.String // 带线玩法的线
	CreatedAt field.Int64  // 创建时间
	UpdatedAt field.Int64  // 更新时间

	fieldMap map[string]field.Expr
}

func (f fbSportsMatchMarketOddsMarketsOptions) Table(newTableName string) *fbSportsMatchMarketOddsMarketsOptions {
	f.fbSportsMatchMarketOddsMarketsOptionsDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbSportsMatchMarketOddsMarketsOptions) As(alias string) *fbSportsMatchMarketOddsMarketsOptions {
	f.fbSportsMatchMarketOddsMarketsOptionsDo.DO = *(f.fbSportsMatchMarketOddsMarketsOptionsDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbSportsMatchMarketOddsMarketsOptions) updateTableName(table string) *fbSportsMatchMarketOddsMarketsOptions {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.MarketID = field.NewInt64(table, "market_id")
	f.NameFull = field.NewString(table, "name_full")
	f.NameShort = field.NewString(table, "name_short")
	f.TeamID = field.NewInt64(table, "team_id")
	f.OpType = field.NewInt64(table, "op_type")
	f.OddsEuro = field.NewField(table, "odds_euro")
	f.OddsType = field.NewInt64(table, "odds_type")
	f.Outcome = field.NewInt64(table, "outcome")
	f.Line = field.NewString(table, "line")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fbSportsMatchMarketOddsMarketsOptions) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbSportsMatchMarketOddsMarketsOptions) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 12)
	f.fieldMap["id"] = f.ID
	f.fieldMap["market_id"] = f.MarketID
	f.fieldMap["name_full"] = f.NameFull
	f.fieldMap["name_short"] = f.NameShort
	f.fieldMap["team_id"] = f.TeamID
	f.fieldMap["op_type"] = f.OpType
	f.fieldMap["odds_euro"] = f.OddsEuro
	f.fieldMap["odds_type"] = f.OddsType
	f.fieldMap["outcome"] = f.Outcome
	f.fieldMap["line"] = f.Line
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fbSportsMatchMarketOddsMarketsOptions) clone(db *gorm.DB) fbSportsMatchMarketOddsMarketsOptions {
	f.fbSportsMatchMarketOddsMarketsOptionsDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbSportsMatchMarketOddsMarketsOptions) replaceDB(db *gorm.DB) fbSportsMatchMarketOddsMarketsOptions {
	f.fbSportsMatchMarketOddsMarketsOptionsDo.ReplaceDB(db)
	return f
}

type fbSportsMatchMarketOddsMarketsOptionsDo struct{ gen.DO }

type IFbSportsMatchMarketOddsMarketsOptionsDo interface {
	gen.SubQuery
	Debug() IFbSportsMatchMarketOddsMarketsOptionsDo
	WithContext(ctx context.Context) IFbSportsMatchMarketOddsMarketsOptionsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbSportsMatchMarketOddsMarketsOptionsDo
	WriteDB() IFbSportsMatchMarketOddsMarketsOptionsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbSportsMatchMarketOddsMarketsOptionsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbSportsMatchMarketOddsMarketsOptionsDo
	Not(conds ...gen.Condition) IFbSportsMatchMarketOddsMarketsOptionsDo
	Or(conds ...gen.Condition) IFbSportsMatchMarketOddsMarketsOptionsDo
	Select(conds ...field.Expr) IFbSportsMatchMarketOddsMarketsOptionsDo
	Where(conds ...gen.Condition) IFbSportsMatchMarketOddsMarketsOptionsDo
	Order(conds ...field.Expr) IFbSportsMatchMarketOddsMarketsOptionsDo
	Distinct(cols ...field.Expr) IFbSportsMatchMarketOddsMarketsOptionsDo
	Omit(cols ...field.Expr) IFbSportsMatchMarketOddsMarketsOptionsDo
	Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOddsMarketsOptionsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOddsMarketsOptionsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOddsMarketsOptionsDo
	Group(cols ...field.Expr) IFbSportsMatchMarketOddsMarketsOptionsDo
	Having(conds ...gen.Condition) IFbSportsMatchMarketOddsMarketsOptionsDo
	Limit(limit int) IFbSportsMatchMarketOddsMarketsOptionsDo
	Offset(offset int) IFbSportsMatchMarketOddsMarketsOptionsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchMarketOddsMarketsOptionsDo
	Unscoped() IFbSportsMatchMarketOddsMarketsOptionsDo
	Create(values ...*model.FbSportsMatchMarketOddsMarketsOptions) error
	CreateInBatches(values []*model.FbSportsMatchMarketOddsMarketsOptions, batchSize int) error
	Save(values ...*model.FbSportsMatchMarketOddsMarketsOptions) error
	First() (*model.FbSportsMatchMarketOddsMarketsOptions, error)
	Take() (*model.FbSportsMatchMarketOddsMarketsOptions, error)
	Last() (*model.FbSportsMatchMarketOddsMarketsOptions, error)
	Find() ([]*model.FbSportsMatchMarketOddsMarketsOptions, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchMarketOddsMarketsOptions, err error)
	FindInBatches(result *[]*model.FbSportsMatchMarketOddsMarketsOptions, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbSportsMatchMarketOddsMarketsOptions) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbSportsMatchMarketOddsMarketsOptionsDo
	Assign(attrs ...field.AssignExpr) IFbSportsMatchMarketOddsMarketsOptionsDo
	Joins(fields ...field.RelationField) IFbSportsMatchMarketOddsMarketsOptionsDo
	Preload(fields ...field.RelationField) IFbSportsMatchMarketOddsMarketsOptionsDo
	FirstOrInit() (*model.FbSportsMatchMarketOddsMarketsOptions, error)
	FirstOrCreate() (*model.FbSportsMatchMarketOddsMarketsOptions, error)
	FindByPage(offset int, limit int) (result []*model.FbSportsMatchMarketOddsMarketsOptions, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbSportsMatchMarketOddsMarketsOptionsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Debug() IFbSportsMatchMarketOddsMarketsOptionsDo {
	return f.withDO(f.DO.Debug())
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) WithContext(ctx context.Context) IFbSportsMatchMarketOddsMarketsOptionsDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) ReadDB() IFbSportsMatchMarketOddsMarketsOptionsDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) WriteDB() IFbSportsMatchMarketOddsMarketsOptionsDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Session(config *gorm.Session) IFbSportsMatchMarketOddsMarketsOptionsDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Clauses(conds ...clause.Expression) IFbSportsMatchMarketOddsMarketsOptionsDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Returning(value interface{}, columns ...string) IFbSportsMatchMarketOddsMarketsOptionsDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Not(conds ...gen.Condition) IFbSportsMatchMarketOddsMarketsOptionsDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Or(conds ...gen.Condition) IFbSportsMatchMarketOddsMarketsOptionsDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Select(conds ...field.Expr) IFbSportsMatchMarketOddsMarketsOptionsDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Where(conds ...gen.Condition) IFbSportsMatchMarketOddsMarketsOptionsDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Order(conds ...field.Expr) IFbSportsMatchMarketOddsMarketsOptionsDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Distinct(cols ...field.Expr) IFbSportsMatchMarketOddsMarketsOptionsDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Omit(cols ...field.Expr) IFbSportsMatchMarketOddsMarketsOptionsDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOddsMarketsOptionsDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOddsMarketsOptionsDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOddsMarketsOptionsDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Group(cols ...field.Expr) IFbSportsMatchMarketOddsMarketsOptionsDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Having(conds ...gen.Condition) IFbSportsMatchMarketOddsMarketsOptionsDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Limit(limit int) IFbSportsMatchMarketOddsMarketsOptionsDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Offset(offset int) IFbSportsMatchMarketOddsMarketsOptionsDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchMarketOddsMarketsOptionsDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Unscoped() IFbSportsMatchMarketOddsMarketsOptionsDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Create(values ...*model.FbSportsMatchMarketOddsMarketsOptions) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) CreateInBatches(values []*model.FbSportsMatchMarketOddsMarketsOptions, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbSportsMatchMarketOddsMarketsOptionsDo) Save(values ...*model.FbSportsMatchMarketOddsMarketsOptions) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) First() (*model.FbSportsMatchMarketOddsMarketsOptions, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketOddsMarketsOptions), nil
	}
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Take() (*model.FbSportsMatchMarketOddsMarketsOptions, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketOddsMarketsOptions), nil
	}
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Last() (*model.FbSportsMatchMarketOddsMarketsOptions, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketOddsMarketsOptions), nil
	}
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Find() ([]*model.FbSportsMatchMarketOddsMarketsOptions, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbSportsMatchMarketOddsMarketsOptions), err
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchMarketOddsMarketsOptions, err error) {
	buf := make([]*model.FbSportsMatchMarketOddsMarketsOptions, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) FindInBatches(result *[]*model.FbSportsMatchMarketOddsMarketsOptions, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Attrs(attrs ...field.AssignExpr) IFbSportsMatchMarketOddsMarketsOptionsDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Assign(attrs ...field.AssignExpr) IFbSportsMatchMarketOddsMarketsOptionsDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Joins(fields ...field.RelationField) IFbSportsMatchMarketOddsMarketsOptionsDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Preload(fields ...field.RelationField) IFbSportsMatchMarketOddsMarketsOptionsDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) FirstOrInit() (*model.FbSportsMatchMarketOddsMarketsOptions, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketOddsMarketsOptions), nil
	}
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) FirstOrCreate() (*model.FbSportsMatchMarketOddsMarketsOptions, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketOddsMarketsOptions), nil
	}
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) FindByPage(offset int, limit int) (result []*model.FbSportsMatchMarketOddsMarketsOptions, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbSportsMatchMarketOddsMarketsOptionsDo) Delete(models ...*model.FbSportsMatchMarketOddsMarketsOptions) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbSportsMatchMarketOddsMarketsOptionsDo) withDO(do gen.Dao) *fbSportsMatchMarketOddsMarketsOptionsDo {
	f.DO = *do.(*gen.DO)
	return f
}
