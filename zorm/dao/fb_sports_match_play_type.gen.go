// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newFbSportsMatchPlayType(db *gorm.DB, opts ...gen.DOOption) fbSportsMatchPlayType {
	_fbSportsMatchPlayType := fbSportsMatchPlayType{}

	_fbSportsMatchPlayType.fbSportsMatchPlayTypeDo.UseDB(db, opts...)
	_fbSportsMatchPlayType.fbSportsMatchPlayTypeDo.UseModel(&model.FbSportsMatchPlayType{})

	tableName := _fbSportsMatchPlayType.fbSportsMatchPlayTypeDo.TableName()
	_fbSportsMatchPlayType.ALL = field.NewAsterisk(tableName)
	_fbSportsMatchPlayType.ID = field.NewInt64(tableName, "id")
	_fbSportsMatchPlayType.MatchID = field.NewInt64(tableName, "match_id")
	_fbSportsMatchPlayType.MatchPlayType = field.NewInt64(tableName, "match_play_type")

	_fbSportsMatchPlayType.fillFieldMap()

	return _fbSportsMatchPlayType
}

// fbSportsMatchPlayType 赛事分组类型关联表
type fbSportsMatchPlayType struct {
	fbSportsMatchPlayTypeDo

	ALL           field.Asterisk
	ID            field.Int64
	MatchID       field.Int64 // 赛事ID关联fb_sports_match表的fb_id
	MatchPlayType field.Int64 // 赛事分组类型

	fieldMap map[string]field.Expr
}

func (f fbSportsMatchPlayType) Table(newTableName string) *fbSportsMatchPlayType {
	f.fbSportsMatchPlayTypeDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbSportsMatchPlayType) As(alias string) *fbSportsMatchPlayType {
	f.fbSportsMatchPlayTypeDo.DO = *(f.fbSportsMatchPlayTypeDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbSportsMatchPlayType) updateTableName(table string) *fbSportsMatchPlayType {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.MatchID = field.NewInt64(table, "match_id")
	f.MatchPlayType = field.NewInt64(table, "match_play_type")

	f.fillFieldMap()

	return f
}

func (f *fbSportsMatchPlayType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbSportsMatchPlayType) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 3)
	f.fieldMap["id"] = f.ID
	f.fieldMap["match_id"] = f.MatchID
	f.fieldMap["match_play_type"] = f.MatchPlayType
}

func (f fbSportsMatchPlayType) clone(db *gorm.DB) fbSportsMatchPlayType {
	f.fbSportsMatchPlayTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbSportsMatchPlayType) replaceDB(db *gorm.DB) fbSportsMatchPlayType {
	f.fbSportsMatchPlayTypeDo.ReplaceDB(db)
	return f
}

type fbSportsMatchPlayTypeDo struct{ gen.DO }

type IFbSportsMatchPlayTypeDo interface {
	gen.SubQuery
	Debug() IFbSportsMatchPlayTypeDo
	WithContext(ctx context.Context) IFbSportsMatchPlayTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbSportsMatchPlayTypeDo
	WriteDB() IFbSportsMatchPlayTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbSportsMatchPlayTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbSportsMatchPlayTypeDo
	Not(conds ...gen.Condition) IFbSportsMatchPlayTypeDo
	Or(conds ...gen.Condition) IFbSportsMatchPlayTypeDo
	Select(conds ...field.Expr) IFbSportsMatchPlayTypeDo
	Where(conds ...gen.Condition) IFbSportsMatchPlayTypeDo
	Order(conds ...field.Expr) IFbSportsMatchPlayTypeDo
	Distinct(cols ...field.Expr) IFbSportsMatchPlayTypeDo
	Omit(cols ...field.Expr) IFbSportsMatchPlayTypeDo
	Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchPlayTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchPlayTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchPlayTypeDo
	Group(cols ...field.Expr) IFbSportsMatchPlayTypeDo
	Having(conds ...gen.Condition) IFbSportsMatchPlayTypeDo
	Limit(limit int) IFbSportsMatchPlayTypeDo
	Offset(offset int) IFbSportsMatchPlayTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchPlayTypeDo
	Unscoped() IFbSportsMatchPlayTypeDo
	Create(values ...*model.FbSportsMatchPlayType) error
	CreateInBatches(values []*model.FbSportsMatchPlayType, batchSize int) error
	Save(values ...*model.FbSportsMatchPlayType) error
	First() (*model.FbSportsMatchPlayType, error)
	Take() (*model.FbSportsMatchPlayType, error)
	Last() (*model.FbSportsMatchPlayType, error)
	Find() ([]*model.FbSportsMatchPlayType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchPlayType, err error)
	FindInBatches(result *[]*model.FbSportsMatchPlayType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbSportsMatchPlayType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbSportsMatchPlayTypeDo
	Assign(attrs ...field.AssignExpr) IFbSportsMatchPlayTypeDo
	Joins(fields ...field.RelationField) IFbSportsMatchPlayTypeDo
	Preload(fields ...field.RelationField) IFbSportsMatchPlayTypeDo
	FirstOrInit() (*model.FbSportsMatchPlayType, error)
	FirstOrCreate() (*model.FbSportsMatchPlayType, error)
	FindByPage(offset int, limit int) (result []*model.FbSportsMatchPlayType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbSportsMatchPlayTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbSportsMatchPlayTypeDo) Debug() IFbSportsMatchPlayTypeDo {
	return f.withDO(f.DO.Debug())
}

func (f fbSportsMatchPlayTypeDo) WithContext(ctx context.Context) IFbSportsMatchPlayTypeDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbSportsMatchPlayTypeDo) ReadDB() IFbSportsMatchPlayTypeDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbSportsMatchPlayTypeDo) WriteDB() IFbSportsMatchPlayTypeDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbSportsMatchPlayTypeDo) Session(config *gorm.Session) IFbSportsMatchPlayTypeDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbSportsMatchPlayTypeDo) Clauses(conds ...clause.Expression) IFbSportsMatchPlayTypeDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbSportsMatchPlayTypeDo) Returning(value interface{}, columns ...string) IFbSportsMatchPlayTypeDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbSportsMatchPlayTypeDo) Not(conds ...gen.Condition) IFbSportsMatchPlayTypeDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbSportsMatchPlayTypeDo) Or(conds ...gen.Condition) IFbSportsMatchPlayTypeDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbSportsMatchPlayTypeDo) Select(conds ...field.Expr) IFbSportsMatchPlayTypeDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbSportsMatchPlayTypeDo) Where(conds ...gen.Condition) IFbSportsMatchPlayTypeDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbSportsMatchPlayTypeDo) Order(conds ...field.Expr) IFbSportsMatchPlayTypeDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbSportsMatchPlayTypeDo) Distinct(cols ...field.Expr) IFbSportsMatchPlayTypeDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbSportsMatchPlayTypeDo) Omit(cols ...field.Expr) IFbSportsMatchPlayTypeDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbSportsMatchPlayTypeDo) Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchPlayTypeDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbSportsMatchPlayTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchPlayTypeDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbSportsMatchPlayTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchPlayTypeDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbSportsMatchPlayTypeDo) Group(cols ...field.Expr) IFbSportsMatchPlayTypeDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbSportsMatchPlayTypeDo) Having(conds ...gen.Condition) IFbSportsMatchPlayTypeDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbSportsMatchPlayTypeDo) Limit(limit int) IFbSportsMatchPlayTypeDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbSportsMatchPlayTypeDo) Offset(offset int) IFbSportsMatchPlayTypeDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbSportsMatchPlayTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchPlayTypeDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbSportsMatchPlayTypeDo) Unscoped() IFbSportsMatchPlayTypeDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbSportsMatchPlayTypeDo) Create(values ...*model.FbSportsMatchPlayType) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbSportsMatchPlayTypeDo) CreateInBatches(values []*model.FbSportsMatchPlayType, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbSportsMatchPlayTypeDo) Save(values ...*model.FbSportsMatchPlayType) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbSportsMatchPlayTypeDo) First() (*model.FbSportsMatchPlayType, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchPlayType), nil
	}
}

func (f fbSportsMatchPlayTypeDo) Take() (*model.FbSportsMatchPlayType, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchPlayType), nil
	}
}

func (f fbSportsMatchPlayTypeDo) Last() (*model.FbSportsMatchPlayType, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchPlayType), nil
	}
}

func (f fbSportsMatchPlayTypeDo) Find() ([]*model.FbSportsMatchPlayType, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbSportsMatchPlayType), err
}

func (f fbSportsMatchPlayTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchPlayType, err error) {
	buf := make([]*model.FbSportsMatchPlayType, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbSportsMatchPlayTypeDo) FindInBatches(result *[]*model.FbSportsMatchPlayType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbSportsMatchPlayTypeDo) Attrs(attrs ...field.AssignExpr) IFbSportsMatchPlayTypeDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbSportsMatchPlayTypeDo) Assign(attrs ...field.AssignExpr) IFbSportsMatchPlayTypeDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbSportsMatchPlayTypeDo) Joins(fields ...field.RelationField) IFbSportsMatchPlayTypeDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbSportsMatchPlayTypeDo) Preload(fields ...field.RelationField) IFbSportsMatchPlayTypeDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbSportsMatchPlayTypeDo) FirstOrInit() (*model.FbSportsMatchPlayType, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchPlayType), nil
	}
}

func (f fbSportsMatchPlayTypeDo) FirstOrCreate() (*model.FbSportsMatchPlayType, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchPlayType), nil
	}
}

func (f fbSportsMatchPlayTypeDo) FindByPage(offset int, limit int) (result []*model.FbSportsMatchPlayType, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbSportsMatchPlayTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbSportsMatchPlayTypeDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbSportsMatchPlayTypeDo) Delete(models ...*model.FbSportsMatchPlayType) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbSportsMatchPlayTypeDo) withDO(do gen.Dao) *fbSportsMatchPlayTypeDo {
	f.DO = *do.(*gen.DO)
	return f
}
