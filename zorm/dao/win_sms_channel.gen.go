// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newWinSmsChannel(db *gorm.DB, opts ...gen.DOOption) winSmsChannel {
	_winSmsChannel := winSmsChannel{}

	_winSmsChannel.winSmsChannelDo.UseDB(db, opts...)
	_winSmsChannel.winSmsChannelDo.UseModel(&model.WinSmsChannel{})

	tableName := _winSmsChannel.winSmsChannelDo.TableName()
	_winSmsChannel.ALL = field.NewAsterisk(tableName)
	_winSmsChannel.ID = field.NewInt64(tableName, "id")
	_winSmsChannel.AppID = field.NewString(tableName, "app_Id")
	_winSmsChannel.AppCode = field.NewString(tableName, "app_code")
	_winSmsChannel.APIKey = field.NewString(tableName, "api_key")
	_winSmsChannel.APIPwd = field.NewString(tableName, "api_pwd")
	_winSmsChannel.APIURL = field.NewString(tableName, "api_url")
	_winSmsChannel.AppName = field.NewString(tableName, "app_name")
	_winSmsChannel.Status = field.NewInt64(tableName, "status")
	_winSmsChannel.Sender = field.NewString(tableName, "sender")
	_winSmsChannel.TemplateID = field.NewString(tableName, "template_id")
	_winSmsChannel.Signature = field.NewString(tableName, "signature")
	_winSmsChannel.CreatedAt = field.NewInt64(tableName, "created_at")
	_winSmsChannel.Remark = field.NewString(tableName, "remark")
	_winSmsChannel.Operator = field.NewString(tableName, "operator")
	_winSmsChannel.OperatorName = field.NewString(tableName, "operator_name")
	_winSmsChannel.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_winSmsChannel.fillFieldMap()

	return _winSmsChannel
}

type winSmsChannel struct {
	winSmsChannelDo

	ALL          field.Asterisk
	ID           field.Int64
	AppID        field.String // 应用ID
	AppCode      field.String // 编码
	APIKey       field.String // key
	APIPwd       field.String // 密钥
	APIURL       field.String // API URL
	AppName      field.String // 应用名称
	Status       field.Int64  // 1==禁用  3==启用
	Sender       field.String // 发送者
	TemplateID   field.String // 模板序号
	Signature    field.String // 签名
	CreatedAt    field.Int64  // 创建时间
	Remark       field.String // 备注
	Operator     field.String // 操作人
	OperatorName field.String // 操作人姓名
	UpdatedAt    field.Int64  // 更新时间

	fieldMap map[string]field.Expr
}

func (w winSmsChannel) Table(newTableName string) *winSmsChannel {
	w.winSmsChannelDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winSmsChannel) As(alias string) *winSmsChannel {
	w.winSmsChannelDo.DO = *(w.winSmsChannelDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winSmsChannel) updateTableName(table string) *winSmsChannel {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.AppID = field.NewString(table, "app_Id")
	w.AppCode = field.NewString(table, "app_code")
	w.APIKey = field.NewString(table, "api_key")
	w.APIPwd = field.NewString(table, "api_pwd")
	w.APIURL = field.NewString(table, "api_url")
	w.AppName = field.NewString(table, "app_name")
	w.Status = field.NewInt64(table, "status")
	w.Sender = field.NewString(table, "sender")
	w.TemplateID = field.NewString(table, "template_id")
	w.Signature = field.NewString(table, "signature")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.Remark = field.NewString(table, "remark")
	w.Operator = field.NewString(table, "operator")
	w.OperatorName = field.NewString(table, "operator_name")
	w.UpdatedAt = field.NewInt64(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *winSmsChannel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winSmsChannel) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 16)
	w.fieldMap["id"] = w.ID
	w.fieldMap["app_Id"] = w.AppID
	w.fieldMap["app_code"] = w.AppCode
	w.fieldMap["api_key"] = w.APIKey
	w.fieldMap["api_pwd"] = w.APIPwd
	w.fieldMap["api_url"] = w.APIURL
	w.fieldMap["app_name"] = w.AppName
	w.fieldMap["status"] = w.Status
	w.fieldMap["sender"] = w.Sender
	w.fieldMap["template_id"] = w.TemplateID
	w.fieldMap["signature"] = w.Signature
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["remark"] = w.Remark
	w.fieldMap["operator"] = w.Operator
	w.fieldMap["operator_name"] = w.OperatorName
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w winSmsChannel) clone(db *gorm.DB) winSmsChannel {
	w.winSmsChannelDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winSmsChannel) replaceDB(db *gorm.DB) winSmsChannel {
	w.winSmsChannelDo.ReplaceDB(db)
	return w
}

type winSmsChannelDo struct{ gen.DO }

type IWinSmsChannelDo interface {
	gen.SubQuery
	Debug() IWinSmsChannelDo
	WithContext(ctx context.Context) IWinSmsChannelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinSmsChannelDo
	WriteDB() IWinSmsChannelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinSmsChannelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinSmsChannelDo
	Not(conds ...gen.Condition) IWinSmsChannelDo
	Or(conds ...gen.Condition) IWinSmsChannelDo
	Select(conds ...field.Expr) IWinSmsChannelDo
	Where(conds ...gen.Condition) IWinSmsChannelDo
	Order(conds ...field.Expr) IWinSmsChannelDo
	Distinct(cols ...field.Expr) IWinSmsChannelDo
	Omit(cols ...field.Expr) IWinSmsChannelDo
	Join(table schema.Tabler, on ...field.Expr) IWinSmsChannelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinSmsChannelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinSmsChannelDo
	Group(cols ...field.Expr) IWinSmsChannelDo
	Having(conds ...gen.Condition) IWinSmsChannelDo
	Limit(limit int) IWinSmsChannelDo
	Offset(offset int) IWinSmsChannelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinSmsChannelDo
	Unscoped() IWinSmsChannelDo
	Create(values ...*model.WinSmsChannel) error
	CreateInBatches(values []*model.WinSmsChannel, batchSize int) error
	Save(values ...*model.WinSmsChannel) error
	First() (*model.WinSmsChannel, error)
	Take() (*model.WinSmsChannel, error)
	Last() (*model.WinSmsChannel, error)
	Find() ([]*model.WinSmsChannel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinSmsChannel, err error)
	FindInBatches(result *[]*model.WinSmsChannel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinSmsChannel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinSmsChannelDo
	Assign(attrs ...field.AssignExpr) IWinSmsChannelDo
	Joins(fields ...field.RelationField) IWinSmsChannelDo
	Preload(fields ...field.RelationField) IWinSmsChannelDo
	FirstOrInit() (*model.WinSmsChannel, error)
	FirstOrCreate() (*model.WinSmsChannel, error)
	FindByPage(offset int, limit int) (result []*model.WinSmsChannel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinSmsChannelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winSmsChannelDo) Debug() IWinSmsChannelDo {
	return w.withDO(w.DO.Debug())
}

func (w winSmsChannelDo) WithContext(ctx context.Context) IWinSmsChannelDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winSmsChannelDo) ReadDB() IWinSmsChannelDo {
	return w.Clauses(dbresolver.Read)
}

func (w winSmsChannelDo) WriteDB() IWinSmsChannelDo {
	return w.Clauses(dbresolver.Write)
}

func (w winSmsChannelDo) Session(config *gorm.Session) IWinSmsChannelDo {
	return w.withDO(w.DO.Session(config))
}

func (w winSmsChannelDo) Clauses(conds ...clause.Expression) IWinSmsChannelDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winSmsChannelDo) Returning(value interface{}, columns ...string) IWinSmsChannelDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winSmsChannelDo) Not(conds ...gen.Condition) IWinSmsChannelDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winSmsChannelDo) Or(conds ...gen.Condition) IWinSmsChannelDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winSmsChannelDo) Select(conds ...field.Expr) IWinSmsChannelDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winSmsChannelDo) Where(conds ...gen.Condition) IWinSmsChannelDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winSmsChannelDo) Order(conds ...field.Expr) IWinSmsChannelDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winSmsChannelDo) Distinct(cols ...field.Expr) IWinSmsChannelDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winSmsChannelDo) Omit(cols ...field.Expr) IWinSmsChannelDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winSmsChannelDo) Join(table schema.Tabler, on ...field.Expr) IWinSmsChannelDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winSmsChannelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinSmsChannelDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winSmsChannelDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinSmsChannelDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winSmsChannelDo) Group(cols ...field.Expr) IWinSmsChannelDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winSmsChannelDo) Having(conds ...gen.Condition) IWinSmsChannelDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winSmsChannelDo) Limit(limit int) IWinSmsChannelDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winSmsChannelDo) Offset(offset int) IWinSmsChannelDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winSmsChannelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinSmsChannelDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winSmsChannelDo) Unscoped() IWinSmsChannelDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winSmsChannelDo) Create(values ...*model.WinSmsChannel) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winSmsChannelDo) CreateInBatches(values []*model.WinSmsChannel, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winSmsChannelDo) Save(values ...*model.WinSmsChannel) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winSmsChannelDo) First() (*model.WinSmsChannel, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinSmsChannel), nil
	}
}

func (w winSmsChannelDo) Take() (*model.WinSmsChannel, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinSmsChannel), nil
	}
}

func (w winSmsChannelDo) Last() (*model.WinSmsChannel, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinSmsChannel), nil
	}
}

func (w winSmsChannelDo) Find() ([]*model.WinSmsChannel, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinSmsChannel), err
}

func (w winSmsChannelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinSmsChannel, err error) {
	buf := make([]*model.WinSmsChannel, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winSmsChannelDo) FindInBatches(result *[]*model.WinSmsChannel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winSmsChannelDo) Attrs(attrs ...field.AssignExpr) IWinSmsChannelDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winSmsChannelDo) Assign(attrs ...field.AssignExpr) IWinSmsChannelDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winSmsChannelDo) Joins(fields ...field.RelationField) IWinSmsChannelDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winSmsChannelDo) Preload(fields ...field.RelationField) IWinSmsChannelDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winSmsChannelDo) FirstOrInit() (*model.WinSmsChannel, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinSmsChannel), nil
	}
}

func (w winSmsChannelDo) FirstOrCreate() (*model.WinSmsChannel, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinSmsChannel), nil
	}
}

func (w winSmsChannelDo) FindByPage(offset int, limit int) (result []*model.WinSmsChannel, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winSmsChannelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winSmsChannelDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winSmsChannelDo) Delete(models ...*model.WinSmsChannel) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winSmsChannelDo) withDO(do gen.Dao) *winSmsChannelDo {
	w.DO = *do.(*gen.DO)
	return w
}
