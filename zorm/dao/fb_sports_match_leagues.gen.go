// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newFbSportsMatchLeagues(db *gorm.DB, opts ...gen.DOOption) fbSportsMatchLeagues {
	_fbSportsMatchLeagues := fbSportsMatchLeagues{}

	_fbSportsMatchLeagues.fbSportsMatchLeaguesDo.UseDB(db, opts...)
	_fbSportsMatchLeagues.fbSportsMatchLeaguesDo.UseModel(&model.FbSportsMatchLeagues{})

	tableName := _fbSportsMatchLeagues.fbSportsMatchLeaguesDo.TableName()
	_fbSportsMatchLeagues.ALL = field.NewAsterisk(tableName)
	_fbSportsMatchLeagues.ID = field.NewInt64(tableName, "id")
	_fbSportsMatchLeagues.Sid = field.NewInt64(tableName, "sid")
	_fbSportsMatchLeagues.Na = field.NewString(tableName, "na")
	_fbSportsMatchLeagues.Level = field.NewInt64(tableName, "level")
	_fbSportsMatchLeagues.Lurl = field.NewString(tableName, "lurl")
	_fbSportsMatchLeagues.Rid = field.NewInt64(tableName, "rid")
	_fbSportsMatchLeagues.Rnm = field.NewString(tableName, "rnm")
	_fbSportsMatchLeagues.Rlg = field.NewString(tableName, "rlg")
	_fbSportsMatchLeagues.Hot = field.NewInt64(tableName, "hot")
	_fbSportsMatchLeagues.Slid = field.NewInt64(tableName, "slid")

	_fbSportsMatchLeagues.fillFieldMap()

	return _fbSportsMatchLeagues
}

// fbSportsMatchLeagues 联赛表
type fbSportsMatchLeagues struct {
	fbSportsMatchLeaguesDo

	ALL   field.Asterisk
	ID    field.Int64  // 联赛ID
	Sid   field.Int64  // 运动种类ID
	Na    field.String // 联赛名称
	Level field.Int64  // 联赛等级 or
	Lurl  field.String // 联赛图标
	Rid   field.Int64  // 区域ID
	Rnm   field.String // 区域名称
	Rlg   field.String // 区域LOGO
	Hot   field.Int64  // 是否热门
	Slid  field.Int64  // 联赛分组

	fieldMap map[string]field.Expr
}

func (f fbSportsMatchLeagues) Table(newTableName string) *fbSportsMatchLeagues {
	f.fbSportsMatchLeaguesDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbSportsMatchLeagues) As(alias string) *fbSportsMatchLeagues {
	f.fbSportsMatchLeaguesDo.DO = *(f.fbSportsMatchLeaguesDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbSportsMatchLeagues) updateTableName(table string) *fbSportsMatchLeagues {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Sid = field.NewInt64(table, "sid")
	f.Na = field.NewString(table, "na")
	f.Level = field.NewInt64(table, "level")
	f.Lurl = field.NewString(table, "lurl")
	f.Rid = field.NewInt64(table, "rid")
	f.Rnm = field.NewString(table, "rnm")
	f.Rlg = field.NewString(table, "rlg")
	f.Hot = field.NewInt64(table, "hot")
	f.Slid = field.NewInt64(table, "slid")

	f.fillFieldMap()

	return f
}

func (f *fbSportsMatchLeagues) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbSportsMatchLeagues) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 10)
	f.fieldMap["id"] = f.ID
	f.fieldMap["sid"] = f.Sid
	f.fieldMap["na"] = f.Na
	f.fieldMap["level"] = f.Level
	f.fieldMap["lurl"] = f.Lurl
	f.fieldMap["rid"] = f.Rid
	f.fieldMap["rnm"] = f.Rnm
	f.fieldMap["rlg"] = f.Rlg
	f.fieldMap["hot"] = f.Hot
	f.fieldMap["slid"] = f.Slid
}

func (f fbSportsMatchLeagues) clone(db *gorm.DB) fbSportsMatchLeagues {
	f.fbSportsMatchLeaguesDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbSportsMatchLeagues) replaceDB(db *gorm.DB) fbSportsMatchLeagues {
	f.fbSportsMatchLeaguesDo.ReplaceDB(db)
	return f
}

type fbSportsMatchLeaguesDo struct{ gen.DO }

type IFbSportsMatchLeaguesDo interface {
	gen.SubQuery
	Debug() IFbSportsMatchLeaguesDo
	WithContext(ctx context.Context) IFbSportsMatchLeaguesDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbSportsMatchLeaguesDo
	WriteDB() IFbSportsMatchLeaguesDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbSportsMatchLeaguesDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbSportsMatchLeaguesDo
	Not(conds ...gen.Condition) IFbSportsMatchLeaguesDo
	Or(conds ...gen.Condition) IFbSportsMatchLeaguesDo
	Select(conds ...field.Expr) IFbSportsMatchLeaguesDo
	Where(conds ...gen.Condition) IFbSportsMatchLeaguesDo
	Order(conds ...field.Expr) IFbSportsMatchLeaguesDo
	Distinct(cols ...field.Expr) IFbSportsMatchLeaguesDo
	Omit(cols ...field.Expr) IFbSportsMatchLeaguesDo
	Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchLeaguesDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchLeaguesDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchLeaguesDo
	Group(cols ...field.Expr) IFbSportsMatchLeaguesDo
	Having(conds ...gen.Condition) IFbSportsMatchLeaguesDo
	Limit(limit int) IFbSportsMatchLeaguesDo
	Offset(offset int) IFbSportsMatchLeaguesDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchLeaguesDo
	Unscoped() IFbSportsMatchLeaguesDo
	Create(values ...*model.FbSportsMatchLeagues) error
	CreateInBatches(values []*model.FbSportsMatchLeagues, batchSize int) error
	Save(values ...*model.FbSportsMatchLeagues) error
	First() (*model.FbSportsMatchLeagues, error)
	Take() (*model.FbSportsMatchLeagues, error)
	Last() (*model.FbSportsMatchLeagues, error)
	Find() ([]*model.FbSportsMatchLeagues, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchLeagues, err error)
	FindInBatches(result *[]*model.FbSportsMatchLeagues, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbSportsMatchLeagues) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbSportsMatchLeaguesDo
	Assign(attrs ...field.AssignExpr) IFbSportsMatchLeaguesDo
	Joins(fields ...field.RelationField) IFbSportsMatchLeaguesDo
	Preload(fields ...field.RelationField) IFbSportsMatchLeaguesDo
	FirstOrInit() (*model.FbSportsMatchLeagues, error)
	FirstOrCreate() (*model.FbSportsMatchLeagues, error)
	FindByPage(offset int, limit int) (result []*model.FbSportsMatchLeagues, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbSportsMatchLeaguesDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbSportsMatchLeaguesDo) Debug() IFbSportsMatchLeaguesDo {
	return f.withDO(f.DO.Debug())
}

func (f fbSportsMatchLeaguesDo) WithContext(ctx context.Context) IFbSportsMatchLeaguesDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbSportsMatchLeaguesDo) ReadDB() IFbSportsMatchLeaguesDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbSportsMatchLeaguesDo) WriteDB() IFbSportsMatchLeaguesDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbSportsMatchLeaguesDo) Session(config *gorm.Session) IFbSportsMatchLeaguesDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbSportsMatchLeaguesDo) Clauses(conds ...clause.Expression) IFbSportsMatchLeaguesDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbSportsMatchLeaguesDo) Returning(value interface{}, columns ...string) IFbSportsMatchLeaguesDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbSportsMatchLeaguesDo) Not(conds ...gen.Condition) IFbSportsMatchLeaguesDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbSportsMatchLeaguesDo) Or(conds ...gen.Condition) IFbSportsMatchLeaguesDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbSportsMatchLeaguesDo) Select(conds ...field.Expr) IFbSportsMatchLeaguesDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbSportsMatchLeaguesDo) Where(conds ...gen.Condition) IFbSportsMatchLeaguesDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbSportsMatchLeaguesDo) Order(conds ...field.Expr) IFbSportsMatchLeaguesDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbSportsMatchLeaguesDo) Distinct(cols ...field.Expr) IFbSportsMatchLeaguesDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbSportsMatchLeaguesDo) Omit(cols ...field.Expr) IFbSportsMatchLeaguesDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbSportsMatchLeaguesDo) Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchLeaguesDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbSportsMatchLeaguesDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchLeaguesDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbSportsMatchLeaguesDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchLeaguesDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbSportsMatchLeaguesDo) Group(cols ...field.Expr) IFbSportsMatchLeaguesDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbSportsMatchLeaguesDo) Having(conds ...gen.Condition) IFbSportsMatchLeaguesDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbSportsMatchLeaguesDo) Limit(limit int) IFbSportsMatchLeaguesDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbSportsMatchLeaguesDo) Offset(offset int) IFbSportsMatchLeaguesDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbSportsMatchLeaguesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchLeaguesDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbSportsMatchLeaguesDo) Unscoped() IFbSportsMatchLeaguesDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbSportsMatchLeaguesDo) Create(values ...*model.FbSportsMatchLeagues) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbSportsMatchLeaguesDo) CreateInBatches(values []*model.FbSportsMatchLeagues, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbSportsMatchLeaguesDo) Save(values ...*model.FbSportsMatchLeagues) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbSportsMatchLeaguesDo) First() (*model.FbSportsMatchLeagues, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchLeagues), nil
	}
}

func (f fbSportsMatchLeaguesDo) Take() (*model.FbSportsMatchLeagues, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchLeagues), nil
	}
}

func (f fbSportsMatchLeaguesDo) Last() (*model.FbSportsMatchLeagues, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchLeagues), nil
	}
}

func (f fbSportsMatchLeaguesDo) Find() ([]*model.FbSportsMatchLeagues, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbSportsMatchLeagues), err
}

func (f fbSportsMatchLeaguesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchLeagues, err error) {
	buf := make([]*model.FbSportsMatchLeagues, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbSportsMatchLeaguesDo) FindInBatches(result *[]*model.FbSportsMatchLeagues, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbSportsMatchLeaguesDo) Attrs(attrs ...field.AssignExpr) IFbSportsMatchLeaguesDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbSportsMatchLeaguesDo) Assign(attrs ...field.AssignExpr) IFbSportsMatchLeaguesDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbSportsMatchLeaguesDo) Joins(fields ...field.RelationField) IFbSportsMatchLeaguesDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbSportsMatchLeaguesDo) Preload(fields ...field.RelationField) IFbSportsMatchLeaguesDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbSportsMatchLeaguesDo) FirstOrInit() (*model.FbSportsMatchLeagues, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchLeagues), nil
	}
}

func (f fbSportsMatchLeaguesDo) FirstOrCreate() (*model.FbSportsMatchLeagues, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchLeagues), nil
	}
}

func (f fbSportsMatchLeaguesDo) FindByPage(offset int, limit int) (result []*model.FbSportsMatchLeagues, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbSportsMatchLeaguesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbSportsMatchLeaguesDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbSportsMatchLeaguesDo) Delete(models ...*model.FbSportsMatchLeagues) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbSportsMatchLeaguesDo) withDO(do gen.Dao) *fbSportsMatchLeaguesDo {
	f.DO = *do.(*gen.DO)
	return f
}
