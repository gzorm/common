// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/common/zorm/model"
)

func newAgentCommission(db *gorm.DB, opts ...gen.DOOption) agentCommission {
	_agentCommission := agentCommission{}

	_agentCommission.agentCommissionDo.UseDB(db, opts...)
	_agentCommission.agentCommissionDo.UseModel(&model.AgentCommission{})

	tableName := _agentCommission.agentCommissionDo.TableName()
	_agentCommission.ALL = field.NewAsterisk(tableName)
	_agentCommission.ID = field.NewInt64(tableName, "id")
	_agentCommission.AgentID = field.NewInt64(tableName, "agent_id")
	_agentCommission.AgentName = field.NewString(tableName, "agent_name")
	_agentCommission.AgentLevelID = field.NewInt64(tableName, "agent_level_id")
	_agentCommission.AgentLevelName = field.NewString(tableName, "agent_level_name")
	_agentCommission.CommissionAmount = field.NewField(tableName, "commission_amount")
	_agentCommission.CommissionMonth = field.NewString(tableName, "commission_month")
	_agentCommission.DistributedAmount = field.NewField(tableName, "distributed_amount")
	_agentCommission.BalanceAmount = field.NewField(tableName, "balance_amount")
	_agentCommission.Status = field.NewInt64(tableName, "status")
	_agentCommission.LastOperator = field.NewString(tableName, "last_operator")
	_agentCommission.LastOperationTime = field.NewInt64(tableName, "last_operation_time")
	_agentCommission.CreateTime = field.NewInt64(tableName, "create_time")

	_agentCommission.fillFieldMap()

	return _agentCommission
}

// agentCommission 代理商佣金发放
type agentCommission struct {
	agentCommissionDo

	ALL               field.Asterisk
	ID                field.Int64  // 主键ID
	AgentID           field.Int64  // 代理商ID
	AgentName         field.String // 代理商名称
	AgentLevelID      field.Int64  // 代理商等级序号
	AgentLevelName    field.String // 代理商等级名称
	CommissionAmount  field.Field  // 当月佣金额度
	CommissionMonth   field.String // 月份
	DistributedAmount field.Field  // 当前已发放额度
	BalanceAmount     field.Field  // 可提现金额
	Status            field.Int64  // 状态(未发放=2，已发放=1，不可发放=3)
	LastOperator      field.String // 最后操作人
	LastOperationTime field.Int64  // 最后操作时间
	CreateTime        field.Int64  // 创建时间

	fieldMap map[string]field.Expr
}

func (a agentCommission) Table(newTableName string) *agentCommission {
	a.agentCommissionDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agentCommission) As(alias string) *agentCommission {
	a.agentCommissionDo.DO = *(a.agentCommissionDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agentCommission) updateTableName(table string) *agentCommission {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AgentID = field.NewInt64(table, "agent_id")
	a.AgentName = field.NewString(table, "agent_name")
	a.AgentLevelID = field.NewInt64(table, "agent_level_id")
	a.AgentLevelName = field.NewString(table, "agent_level_name")
	a.CommissionAmount = field.NewField(table, "commission_amount")
	a.CommissionMonth = field.NewString(table, "commission_month")
	a.DistributedAmount = field.NewField(table, "distributed_amount")
	a.BalanceAmount = field.NewField(table, "balance_amount")
	a.Status = field.NewInt64(table, "status")
	a.LastOperator = field.NewString(table, "last_operator")
	a.LastOperationTime = field.NewInt64(table, "last_operation_time")
	a.CreateTime = field.NewInt64(table, "create_time")

	a.fillFieldMap()

	return a
}

func (a *agentCommission) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agentCommission) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 13)
	a.fieldMap["id"] = a.ID
	a.fieldMap["agent_id"] = a.AgentID
	a.fieldMap["agent_name"] = a.AgentName
	a.fieldMap["agent_level_id"] = a.AgentLevelID
	a.fieldMap["agent_level_name"] = a.AgentLevelName
	a.fieldMap["commission_amount"] = a.CommissionAmount
	a.fieldMap["commission_month"] = a.CommissionMonth
	a.fieldMap["distributed_amount"] = a.DistributedAmount
	a.fieldMap["balance_amount"] = a.BalanceAmount
	a.fieldMap["status"] = a.Status
	a.fieldMap["last_operator"] = a.LastOperator
	a.fieldMap["last_operation_time"] = a.LastOperationTime
	a.fieldMap["create_time"] = a.CreateTime
}

func (a agentCommission) clone(db *gorm.DB) agentCommission {
	a.agentCommissionDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agentCommission) replaceDB(db *gorm.DB) agentCommission {
	a.agentCommissionDo.ReplaceDB(db)
	return a
}

type agentCommissionDo struct{ gen.DO }

type IAgentCommissionDo interface {
	gen.SubQuery
	Debug() IAgentCommissionDo
	WithContext(ctx context.Context) IAgentCommissionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgentCommissionDo
	WriteDB() IAgentCommissionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgentCommissionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgentCommissionDo
	Not(conds ...gen.Condition) IAgentCommissionDo
	Or(conds ...gen.Condition) IAgentCommissionDo
	Select(conds ...field.Expr) IAgentCommissionDo
	Where(conds ...gen.Condition) IAgentCommissionDo
	Order(conds ...field.Expr) IAgentCommissionDo
	Distinct(cols ...field.Expr) IAgentCommissionDo
	Omit(cols ...field.Expr) IAgentCommissionDo
	Join(table schema.Tabler, on ...field.Expr) IAgentCommissionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgentCommissionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgentCommissionDo
	Group(cols ...field.Expr) IAgentCommissionDo
	Having(conds ...gen.Condition) IAgentCommissionDo
	Limit(limit int) IAgentCommissionDo
	Offset(offset int) IAgentCommissionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentCommissionDo
	Unscoped() IAgentCommissionDo
	Create(values ...*model.AgentCommission) error
	CreateInBatches(values []*model.AgentCommission, batchSize int) error
	Save(values ...*model.AgentCommission) error
	First() (*model.AgentCommission, error)
	Take() (*model.AgentCommission, error)
	Last() (*model.AgentCommission, error)
	Find() ([]*model.AgentCommission, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentCommission, err error)
	FindInBatches(result *[]*model.AgentCommission, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AgentCommission) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgentCommissionDo
	Assign(attrs ...field.AssignExpr) IAgentCommissionDo
	Joins(fields ...field.RelationField) IAgentCommissionDo
	Preload(fields ...field.RelationField) IAgentCommissionDo
	FirstOrInit() (*model.AgentCommission, error)
	FirstOrCreate() (*model.AgentCommission, error)
	FindByPage(offset int, limit int) (result []*model.AgentCommission, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgentCommissionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agentCommissionDo) Debug() IAgentCommissionDo {
	return a.withDO(a.DO.Debug())
}

func (a agentCommissionDo) WithContext(ctx context.Context) IAgentCommissionDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentCommissionDo) ReadDB() IAgentCommissionDo {
	return a.Clauses(dbresolver.Read)
}

func (a agentCommissionDo) WriteDB() IAgentCommissionDo {
	return a.Clauses(dbresolver.Write)
}

func (a agentCommissionDo) Session(config *gorm.Session) IAgentCommissionDo {
	return a.withDO(a.DO.Session(config))
}

func (a agentCommissionDo) Clauses(conds ...clause.Expression) IAgentCommissionDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentCommissionDo) Returning(value interface{}, columns ...string) IAgentCommissionDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentCommissionDo) Not(conds ...gen.Condition) IAgentCommissionDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentCommissionDo) Or(conds ...gen.Condition) IAgentCommissionDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentCommissionDo) Select(conds ...field.Expr) IAgentCommissionDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentCommissionDo) Where(conds ...gen.Condition) IAgentCommissionDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentCommissionDo) Order(conds ...field.Expr) IAgentCommissionDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentCommissionDo) Distinct(cols ...field.Expr) IAgentCommissionDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentCommissionDo) Omit(cols ...field.Expr) IAgentCommissionDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentCommissionDo) Join(table schema.Tabler, on ...field.Expr) IAgentCommissionDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentCommissionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgentCommissionDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentCommissionDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgentCommissionDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentCommissionDo) Group(cols ...field.Expr) IAgentCommissionDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentCommissionDo) Having(conds ...gen.Condition) IAgentCommissionDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentCommissionDo) Limit(limit int) IAgentCommissionDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentCommissionDo) Offset(offset int) IAgentCommissionDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentCommissionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentCommissionDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentCommissionDo) Unscoped() IAgentCommissionDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agentCommissionDo) Create(values ...*model.AgentCommission) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentCommissionDo) CreateInBatches(values []*model.AgentCommission, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentCommissionDo) Save(values ...*model.AgentCommission) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentCommissionDo) First() (*model.AgentCommission, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentCommission), nil
	}
}

func (a agentCommissionDo) Take() (*model.AgentCommission, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentCommission), nil
	}
}

func (a agentCommissionDo) Last() (*model.AgentCommission, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentCommission), nil
	}
}

func (a agentCommissionDo) Find() ([]*model.AgentCommission, error) {
	result, err := a.DO.Find()
	return result.([]*model.AgentCommission), err
}

func (a agentCommissionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentCommission, err error) {
	buf := make([]*model.AgentCommission, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentCommissionDo) FindInBatches(result *[]*model.AgentCommission, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentCommissionDo) Attrs(attrs ...field.AssignExpr) IAgentCommissionDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentCommissionDo) Assign(attrs ...field.AssignExpr) IAgentCommissionDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentCommissionDo) Joins(fields ...field.RelationField) IAgentCommissionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentCommissionDo) Preload(fields ...field.RelationField) IAgentCommissionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentCommissionDo) FirstOrInit() (*model.AgentCommission, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentCommission), nil
	}
}

func (a agentCommissionDo) FirstOrCreate() (*model.AgentCommission, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentCommission), nil
	}
}

func (a agentCommissionDo) FindByPage(offset int, limit int) (result []*model.AgentCommission, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentCommissionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentCommissionDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentCommissionDo) Delete(models ...*model.AgentCommission) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentCommissionDo) withDO(do gen.Dao) *agentCommissionDo {
	a.DO = *do.(*gen.DO)
	return a
}
