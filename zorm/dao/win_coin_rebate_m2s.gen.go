// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/common/zorm/model"
)

func newWinCoinRebateM2(db *gorm.DB, opts ...gen.DOOption) winCoinRebateM2 {
	_winCoinRebateM2 := winCoinRebateM2{}

	_winCoinRebateM2.winCoinRebateM2Do.UseDB(db, opts...)
	_winCoinRebateM2.winCoinRebateM2Do.UseModel(&model.WinCoinRebateM2{})

	tableName := _winCoinRebateM2.winCoinRebateM2Do.TableName()
	_winCoinRebateM2.ALL = field.NewAsterisk(tableName)
	_winCoinRebateM2.ID = field.NewInt64(tableName, "id")
	_winCoinRebateM2.UID = field.NewInt64(tableName, "uid")
	_winCoinRebateM2.Username = field.NewString(tableName, "username")
	_winCoinRebateM2.LevelID = field.NewInt64(tableName, "level_id")
	_winCoinRebateM2.SettleDate = field.NewString(tableName, "settle_date")
	_winCoinRebateM2.VaildStake = field.NewField(tableName, "vaild_stake")
	_winCoinRebateM2.GroupID = field.NewInt64(tableName, "group_id")
	_winCoinRebateM2.RebateRate = field.NewField(tableName, "rebate_rate")
	_winCoinRebateM2.RabateCoin = field.NewField(tableName, "rabate_coin")
	_winCoinRebateM2.Status = field.NewInt64(tableName, "status")
	_winCoinRebateM2.CreatedAt = field.NewInt64(tableName, "created_at")
	_winCoinRebateM2.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_winCoinRebateM2.fillFieldMap()

	return _winCoinRebateM2
}

// winCoinRebateM2 返水
type winCoinRebateM2 struct {
	winCoinRebateM2Do

	ALL        field.Asterisk
	ID         field.Int64
	UID        field.Int64  // UID
	Username   field.String // 用户名
	LevelID    field.Int64  // 会员等级
	SettleDate field.String // 结算日期
	VaildStake field.Field  // 有效投注额
	GroupID    field.Int64  // 游戏类型
	RebateRate field.Field  // 返水比例
	RabateCoin field.Field  // 返水金额
	Status     field.Int64  // 状态:1-已发放 0-未发放
	CreatedAt  field.Int64
	UpdatedAt  field.Int64

	fieldMap map[string]field.Expr
}

func (w winCoinRebateM2) Table(newTableName string) *winCoinRebateM2 {
	w.winCoinRebateM2Do.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winCoinRebateM2) As(alias string) *winCoinRebateM2 {
	w.winCoinRebateM2Do.DO = *(w.winCoinRebateM2Do.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winCoinRebateM2) updateTableName(table string) *winCoinRebateM2 {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.UID = field.NewInt64(table, "uid")
	w.Username = field.NewString(table, "username")
	w.LevelID = field.NewInt64(table, "level_id")
	w.SettleDate = field.NewString(table, "settle_date")
	w.VaildStake = field.NewField(table, "vaild_stake")
	w.GroupID = field.NewInt64(table, "group_id")
	w.RebateRate = field.NewField(table, "rebate_rate")
	w.RabateCoin = field.NewField(table, "rabate_coin")
	w.Status = field.NewInt64(table, "status")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *winCoinRebateM2) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winCoinRebateM2) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 12)
	w.fieldMap["id"] = w.ID
	w.fieldMap["uid"] = w.UID
	w.fieldMap["username"] = w.Username
	w.fieldMap["level_id"] = w.LevelID
	w.fieldMap["settle_date"] = w.SettleDate
	w.fieldMap["vaild_stake"] = w.VaildStake
	w.fieldMap["group_id"] = w.GroupID
	w.fieldMap["rebate_rate"] = w.RebateRate
	w.fieldMap["rabate_coin"] = w.RabateCoin
	w.fieldMap["status"] = w.Status
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w winCoinRebateM2) clone(db *gorm.DB) winCoinRebateM2 {
	w.winCoinRebateM2Do.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winCoinRebateM2) replaceDB(db *gorm.DB) winCoinRebateM2 {
	w.winCoinRebateM2Do.ReplaceDB(db)
	return w
}

type winCoinRebateM2Do struct{ gen.DO }

type IWinCoinRebateM2Do interface {
	gen.SubQuery
	Debug() IWinCoinRebateM2Do
	WithContext(ctx context.Context) IWinCoinRebateM2Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinCoinRebateM2Do
	WriteDB() IWinCoinRebateM2Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinCoinRebateM2Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinCoinRebateM2Do
	Not(conds ...gen.Condition) IWinCoinRebateM2Do
	Or(conds ...gen.Condition) IWinCoinRebateM2Do
	Select(conds ...field.Expr) IWinCoinRebateM2Do
	Where(conds ...gen.Condition) IWinCoinRebateM2Do
	Order(conds ...field.Expr) IWinCoinRebateM2Do
	Distinct(cols ...field.Expr) IWinCoinRebateM2Do
	Omit(cols ...field.Expr) IWinCoinRebateM2Do
	Join(table schema.Tabler, on ...field.Expr) IWinCoinRebateM2Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinCoinRebateM2Do
	RightJoin(table schema.Tabler, on ...field.Expr) IWinCoinRebateM2Do
	Group(cols ...field.Expr) IWinCoinRebateM2Do
	Having(conds ...gen.Condition) IWinCoinRebateM2Do
	Limit(limit int) IWinCoinRebateM2Do
	Offset(offset int) IWinCoinRebateM2Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinCoinRebateM2Do
	Unscoped() IWinCoinRebateM2Do
	Create(values ...*model.WinCoinRebateM2) error
	CreateInBatches(values []*model.WinCoinRebateM2, batchSize int) error
	Save(values ...*model.WinCoinRebateM2) error
	First() (*model.WinCoinRebateM2, error)
	Take() (*model.WinCoinRebateM2, error)
	Last() (*model.WinCoinRebateM2, error)
	Find() ([]*model.WinCoinRebateM2, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinCoinRebateM2, err error)
	FindInBatches(result *[]*model.WinCoinRebateM2, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinCoinRebateM2) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinCoinRebateM2Do
	Assign(attrs ...field.AssignExpr) IWinCoinRebateM2Do
	Joins(fields ...field.RelationField) IWinCoinRebateM2Do
	Preload(fields ...field.RelationField) IWinCoinRebateM2Do
	FirstOrInit() (*model.WinCoinRebateM2, error)
	FirstOrCreate() (*model.WinCoinRebateM2, error)
	FindByPage(offset int, limit int) (result []*model.WinCoinRebateM2, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinCoinRebateM2Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winCoinRebateM2Do) Debug() IWinCoinRebateM2Do {
	return w.withDO(w.DO.Debug())
}

func (w winCoinRebateM2Do) WithContext(ctx context.Context) IWinCoinRebateM2Do {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winCoinRebateM2Do) ReadDB() IWinCoinRebateM2Do {
	return w.Clauses(dbresolver.Read)
}

func (w winCoinRebateM2Do) WriteDB() IWinCoinRebateM2Do {
	return w.Clauses(dbresolver.Write)
}

func (w winCoinRebateM2Do) Session(config *gorm.Session) IWinCoinRebateM2Do {
	return w.withDO(w.DO.Session(config))
}

func (w winCoinRebateM2Do) Clauses(conds ...clause.Expression) IWinCoinRebateM2Do {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winCoinRebateM2Do) Returning(value interface{}, columns ...string) IWinCoinRebateM2Do {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winCoinRebateM2Do) Not(conds ...gen.Condition) IWinCoinRebateM2Do {
	return w.withDO(w.DO.Not(conds...))
}

func (w winCoinRebateM2Do) Or(conds ...gen.Condition) IWinCoinRebateM2Do {
	return w.withDO(w.DO.Or(conds...))
}

func (w winCoinRebateM2Do) Select(conds ...field.Expr) IWinCoinRebateM2Do {
	return w.withDO(w.DO.Select(conds...))
}

func (w winCoinRebateM2Do) Where(conds ...gen.Condition) IWinCoinRebateM2Do {
	return w.withDO(w.DO.Where(conds...))
}

func (w winCoinRebateM2Do) Order(conds ...field.Expr) IWinCoinRebateM2Do {
	return w.withDO(w.DO.Order(conds...))
}

func (w winCoinRebateM2Do) Distinct(cols ...field.Expr) IWinCoinRebateM2Do {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winCoinRebateM2Do) Omit(cols ...field.Expr) IWinCoinRebateM2Do {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winCoinRebateM2Do) Join(table schema.Tabler, on ...field.Expr) IWinCoinRebateM2Do {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winCoinRebateM2Do) LeftJoin(table schema.Tabler, on ...field.Expr) IWinCoinRebateM2Do {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winCoinRebateM2Do) RightJoin(table schema.Tabler, on ...field.Expr) IWinCoinRebateM2Do {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winCoinRebateM2Do) Group(cols ...field.Expr) IWinCoinRebateM2Do {
	return w.withDO(w.DO.Group(cols...))
}

func (w winCoinRebateM2Do) Having(conds ...gen.Condition) IWinCoinRebateM2Do {
	return w.withDO(w.DO.Having(conds...))
}

func (w winCoinRebateM2Do) Limit(limit int) IWinCoinRebateM2Do {
	return w.withDO(w.DO.Limit(limit))
}

func (w winCoinRebateM2Do) Offset(offset int) IWinCoinRebateM2Do {
	return w.withDO(w.DO.Offset(offset))
}

func (w winCoinRebateM2Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinCoinRebateM2Do {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winCoinRebateM2Do) Unscoped() IWinCoinRebateM2Do {
	return w.withDO(w.DO.Unscoped())
}

func (w winCoinRebateM2Do) Create(values ...*model.WinCoinRebateM2) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winCoinRebateM2Do) CreateInBatches(values []*model.WinCoinRebateM2, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winCoinRebateM2Do) Save(values ...*model.WinCoinRebateM2) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winCoinRebateM2Do) First() (*model.WinCoinRebateM2, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinRebateM2), nil
	}
}

func (w winCoinRebateM2Do) Take() (*model.WinCoinRebateM2, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinRebateM2), nil
	}
}

func (w winCoinRebateM2Do) Last() (*model.WinCoinRebateM2, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinRebateM2), nil
	}
}

func (w winCoinRebateM2Do) Find() ([]*model.WinCoinRebateM2, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinCoinRebateM2), err
}

func (w winCoinRebateM2Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinCoinRebateM2, err error) {
	buf := make([]*model.WinCoinRebateM2, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winCoinRebateM2Do) FindInBatches(result *[]*model.WinCoinRebateM2, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winCoinRebateM2Do) Attrs(attrs ...field.AssignExpr) IWinCoinRebateM2Do {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winCoinRebateM2Do) Assign(attrs ...field.AssignExpr) IWinCoinRebateM2Do {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winCoinRebateM2Do) Joins(fields ...field.RelationField) IWinCoinRebateM2Do {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winCoinRebateM2Do) Preload(fields ...field.RelationField) IWinCoinRebateM2Do {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winCoinRebateM2Do) FirstOrInit() (*model.WinCoinRebateM2, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinRebateM2), nil
	}
}

func (w winCoinRebateM2Do) FirstOrCreate() (*model.WinCoinRebateM2, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinRebateM2), nil
	}
}

func (w winCoinRebateM2Do) FindByPage(offset int, limit int) (result []*model.WinCoinRebateM2, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winCoinRebateM2Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winCoinRebateM2Do) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winCoinRebateM2Do) Delete(models ...*model.WinCoinRebateM2) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winCoinRebateM2Do) withDO(do gen.Dao) *winCoinRebateM2Do {
	w.DO = *do.(*gen.DO)
	return w
}
