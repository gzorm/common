// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newUserRankReport(db *gorm.DB, opts ...gen.DOOption) userRankReport {
	_userRankReport := userRankReport{}

	_userRankReport.userRankReportDo.UseDB(db, opts...)
	_userRankReport.userRankReportDo.UseModel(&model.UserRankReport{})

	tableName := _userRankReport.userRankReportDo.TableName()
	_userRankReport.ALL = field.NewAsterisk(tableName)
	_userRankReport.ID = field.NewInt64(tableName, "id")
	_userRankReport.AgentID = field.NewInt64(tableName, "agent_id")
	_userRankReport.UID = field.NewInt64(tableName, "uid")
	_userRankReport.SortType = field.NewInt64(tableName, "sort_type")
	_userRankReport.Username = field.NewString(tableName, "username")
	_userRankReport.DepositAmount = field.NewField(tableName, "deposit_amount")
	_userRankReport.WithdrawalAmount = field.NewField(tableName, "withdrawal_amount")
	_userRankReport.BetAmount = field.NewField(tableName, "bet_amount")
	_userRankReport.PayoutAmount = field.NewField(tableName, "payout_amount")
	_userRankReport.ProfitAmount = field.NewField(tableName, "profit_amount")
	_userRankReport.ReportDate = field.NewInt64(tableName, "report_date")
	_userRankReport.CreatedAt = field.NewInt64(tableName, "created_at")
	_userRankReport.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_userRankReport.fillFieldMap()

	return _userRankReport
}

// userRankReport 代理:玩家排行報表
type userRankReport struct {
	userRankReportDo

	ALL              field.Asterisk
	ID               field.Int64  // id
	AgentID          field.Int64  // 代理uid
	UID              field.Int64  // 用戶uid
	SortType         field.Int64  // 0:盈虧,1:投注,2:派彩,3:充值,4:提現
	Username         field.String // 用戶名
	DepositAmount    field.Field  // 存款金额
	WithdrawalAmount field.Field  // 提款金额
	BetAmount        field.Field  // 投注金额
	PayoutAmount     field.Field  // 派彩金额
	ProfitAmount     field.Field  // 盈虧金额
	ReportDate       field.Int64  // 報表日期
	CreatedAt        field.Int64  // 創建時間
	UpdatedAt        field.Int64  // 更新時間

	fieldMap map[string]field.Expr
}

func (u userRankReport) Table(newTableName string) *userRankReport {
	u.userRankReportDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRankReport) As(alias string) *userRankReport {
	u.userRankReportDo.DO = *(u.userRankReportDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRankReport) updateTableName(table string) *userRankReport {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.AgentID = field.NewInt64(table, "agent_id")
	u.UID = field.NewInt64(table, "uid")
	u.SortType = field.NewInt64(table, "sort_type")
	u.Username = field.NewString(table, "username")
	u.DepositAmount = field.NewField(table, "deposit_amount")
	u.WithdrawalAmount = field.NewField(table, "withdrawal_amount")
	u.BetAmount = field.NewField(table, "bet_amount")
	u.PayoutAmount = field.NewField(table, "payout_amount")
	u.ProfitAmount = field.NewField(table, "profit_amount")
	u.ReportDate = field.NewInt64(table, "report_date")
	u.CreatedAt = field.NewInt64(table, "created_at")
	u.UpdatedAt = field.NewInt64(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userRankReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRankReport) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 13)
	u.fieldMap["id"] = u.ID
	u.fieldMap["agent_id"] = u.AgentID
	u.fieldMap["uid"] = u.UID
	u.fieldMap["sort_type"] = u.SortType
	u.fieldMap["username"] = u.Username
	u.fieldMap["deposit_amount"] = u.DepositAmount
	u.fieldMap["withdrawal_amount"] = u.WithdrawalAmount
	u.fieldMap["bet_amount"] = u.BetAmount
	u.fieldMap["payout_amount"] = u.PayoutAmount
	u.fieldMap["profit_amount"] = u.ProfitAmount
	u.fieldMap["report_date"] = u.ReportDate
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userRankReport) clone(db *gorm.DB) userRankReport {
	u.userRankReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRankReport) replaceDB(db *gorm.DB) userRankReport {
	u.userRankReportDo.ReplaceDB(db)
	return u
}

type userRankReportDo struct{ gen.DO }

type IUserRankReportDo interface {
	gen.SubQuery
	Debug() IUserRankReportDo
	WithContext(ctx context.Context) IUserRankReportDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserRankReportDo
	WriteDB() IUserRankReportDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserRankReportDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserRankReportDo
	Not(conds ...gen.Condition) IUserRankReportDo
	Or(conds ...gen.Condition) IUserRankReportDo
	Select(conds ...field.Expr) IUserRankReportDo
	Where(conds ...gen.Condition) IUserRankReportDo
	Order(conds ...field.Expr) IUserRankReportDo
	Distinct(cols ...field.Expr) IUserRankReportDo
	Omit(cols ...field.Expr) IUserRankReportDo
	Join(table schema.Tabler, on ...field.Expr) IUserRankReportDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserRankReportDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserRankReportDo
	Group(cols ...field.Expr) IUserRankReportDo
	Having(conds ...gen.Condition) IUserRankReportDo
	Limit(limit int) IUserRankReportDo
	Offset(offset int) IUserRankReportDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRankReportDo
	Unscoped() IUserRankReportDo
	Create(values ...*model.UserRankReport) error
	CreateInBatches(values []*model.UserRankReport, batchSize int) error
	Save(values ...*model.UserRankReport) error
	First() (*model.UserRankReport, error)
	Take() (*model.UserRankReport, error)
	Last() (*model.UserRankReport, error)
	Find() ([]*model.UserRankReport, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRankReport, err error)
	FindInBatches(result *[]*model.UserRankReport, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserRankReport) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserRankReportDo
	Assign(attrs ...field.AssignExpr) IUserRankReportDo
	Joins(fields ...field.RelationField) IUserRankReportDo
	Preload(fields ...field.RelationField) IUserRankReportDo
	FirstOrInit() (*model.UserRankReport, error)
	FirstOrCreate() (*model.UserRankReport, error)
	FindByPage(offset int, limit int) (result []*model.UserRankReport, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserRankReportDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userRankReportDo) Debug() IUserRankReportDo {
	return u.withDO(u.DO.Debug())
}

func (u userRankReportDo) WithContext(ctx context.Context) IUserRankReportDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRankReportDo) ReadDB() IUserRankReportDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRankReportDo) WriteDB() IUserRankReportDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRankReportDo) Session(config *gorm.Session) IUserRankReportDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRankReportDo) Clauses(conds ...clause.Expression) IUserRankReportDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRankReportDo) Returning(value interface{}, columns ...string) IUserRankReportDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRankReportDo) Not(conds ...gen.Condition) IUserRankReportDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRankReportDo) Or(conds ...gen.Condition) IUserRankReportDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRankReportDo) Select(conds ...field.Expr) IUserRankReportDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRankReportDo) Where(conds ...gen.Condition) IUserRankReportDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRankReportDo) Order(conds ...field.Expr) IUserRankReportDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRankReportDo) Distinct(cols ...field.Expr) IUserRankReportDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRankReportDo) Omit(cols ...field.Expr) IUserRankReportDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRankReportDo) Join(table schema.Tabler, on ...field.Expr) IUserRankReportDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRankReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserRankReportDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRankReportDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserRankReportDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRankReportDo) Group(cols ...field.Expr) IUserRankReportDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRankReportDo) Having(conds ...gen.Condition) IUserRankReportDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRankReportDo) Limit(limit int) IUserRankReportDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRankReportDo) Offset(offset int) IUserRankReportDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRankReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRankReportDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRankReportDo) Unscoped() IUserRankReportDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRankReportDo) Create(values ...*model.UserRankReport) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRankReportDo) CreateInBatches(values []*model.UserRankReport, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRankReportDo) Save(values ...*model.UserRankReport) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRankReportDo) First() (*model.UserRankReport, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRankReport), nil
	}
}

func (u userRankReportDo) Take() (*model.UserRankReport, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRankReport), nil
	}
}

func (u userRankReportDo) Last() (*model.UserRankReport, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRankReport), nil
	}
}

func (u userRankReportDo) Find() ([]*model.UserRankReport, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserRankReport), err
}

func (u userRankReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRankReport, err error) {
	buf := make([]*model.UserRankReport, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRankReportDo) FindInBatches(result *[]*model.UserRankReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRankReportDo) Attrs(attrs ...field.AssignExpr) IUserRankReportDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRankReportDo) Assign(attrs ...field.AssignExpr) IUserRankReportDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRankReportDo) Joins(fields ...field.RelationField) IUserRankReportDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRankReportDo) Preload(fields ...field.RelationField) IUserRankReportDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRankReportDo) FirstOrInit() (*model.UserRankReport, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRankReport), nil
	}
}

func (u userRankReportDo) FirstOrCreate() (*model.UserRankReport, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRankReport), nil
	}
}

func (u userRankReportDo) FindByPage(offset int, limit int) (result []*model.UserRankReport, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRankReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRankReportDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRankReportDo) Delete(models ...*model.UserRankReport) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRankReportDo) withDO(do gen.Dao) *userRankReportDo {
	u.DO = *do.(*gen.DO)
	return u
}
