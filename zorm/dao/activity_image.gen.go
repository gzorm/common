// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newActivityImage(db *gorm.DB, opts ...gen.DOOption) activityImage {
	_activityImage := activityImage{}

	_activityImage.activityImageDo.UseDB(db, opts...)
	_activityImage.activityImageDo.UseModel(&model.ActivityImage{})

	tableName := _activityImage.activityImageDo.TableName()
	_activityImage.ALL = field.NewAsterisk(tableName)
	_activityImage.ID = field.NewInt64(tableName, "id")
	_activityImage.ActivityID = field.NewInt64(tableName, "activity_id")
	_activityImage.ShowCarousel = field.NewInt64(tableName, "show_carousel")
	_activityImage.CarouselImagePc = field.NewString(tableName, "carousel_image_pc")
	_activityImage.CarouselImageH5 = field.NewString(tableName, "carousel_image_h5")
	_activityImage.CarouselSort = field.NewInt64(tableName, "carousel_sort")
	_activityImage.ShowPopup = field.NewInt64(tableName, "show_popup")
	_activityImage.PopupImagePc = field.NewString(tableName, "popup_image_pc")
	_activityImage.PopupImageH5 = field.NewString(tableName, "popup_image_h5")
	_activityImage.PopupSort = field.NewInt64(tableName, "popup_sort")
	_activityImage.ActivityImagePc = field.NewString(tableName, "activity_image_pc")
	_activityImage.ActivityImageH5 = field.NewString(tableName, "activity_image_h5")
	_activityImage.ActivityContent = field.NewString(tableName, "activity_content")
	_activityImage.CreateAt = field.NewInt64(tableName, "create_at")
	_activityImage.UpdateAt = field.NewInt64(tableName, "update_at")
	_activityImage.OpUser = field.NewString(tableName, "op_user")

	_activityImage.fillFieldMap()

	return _activityImage
}

// activityImage 活动图片表
type activityImage struct {
	activityImageDo

	ALL             field.Asterisk
	ID              field.Int64  // 活动图片表主键
	ActivityID      field.Int64  // 活动ID
	ShowCarousel    field.Int64  // 是否展示轮播图:1-展示,2-不展示
	CarouselImagePc field.String // PC轮播图图片路径
	CarouselImageH5 field.String // h5和app轮播图图片路径
	CarouselSort    field.Int64  // 只可输入数字必须为整数，数字越大排在越前，范围在0-1000以内。2.轮播排序只针对活动排序内容不涉及弹窗和活动
	ShowPopup       field.Int64  // 是否展示弹窗:1-展示,2-不展示
	PopupImagePc    field.String // pc弹窗图片路径
	PopupImageH5    field.String // h5和app弹窗图片路径
	PopupSort       field.Int64  // 只可输入数字必须为整数，数字越大排在越前，范围在0-1000以内。2.弹窗排序只针对活动排序内容不涉及轮播和活动
	ActivityImagePc field.String // pc活动图图片路径
	ActivityImageH5 field.String // h5和app活动图图片路径
	ActivityContent field.String // 活动内容
	CreateAt        field.Int64  // 创建时间
	UpdateAt        field.Int64  // 修改时间
	OpUser          field.String // 操作人

	fieldMap map[string]field.Expr
}

func (a activityImage) Table(newTableName string) *activityImage {
	a.activityImageDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activityImage) As(alias string) *activityImage {
	a.activityImageDo.DO = *(a.activityImageDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activityImage) updateTableName(table string) *activityImage {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ActivityID = field.NewInt64(table, "activity_id")
	a.ShowCarousel = field.NewInt64(table, "show_carousel")
	a.CarouselImagePc = field.NewString(table, "carousel_image_pc")
	a.CarouselImageH5 = field.NewString(table, "carousel_image_h5")
	a.CarouselSort = field.NewInt64(table, "carousel_sort")
	a.ShowPopup = field.NewInt64(table, "show_popup")
	a.PopupImagePc = field.NewString(table, "popup_image_pc")
	a.PopupImageH5 = field.NewString(table, "popup_image_h5")
	a.PopupSort = field.NewInt64(table, "popup_sort")
	a.ActivityImagePc = field.NewString(table, "activity_image_pc")
	a.ActivityImageH5 = field.NewString(table, "activity_image_h5")
	a.ActivityContent = field.NewString(table, "activity_content")
	a.CreateAt = field.NewInt64(table, "create_at")
	a.UpdateAt = field.NewInt64(table, "update_at")
	a.OpUser = field.NewString(table, "op_user")

	a.fillFieldMap()

	return a
}

func (a *activityImage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activityImage) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 16)
	a.fieldMap["id"] = a.ID
	a.fieldMap["activity_id"] = a.ActivityID
	a.fieldMap["show_carousel"] = a.ShowCarousel
	a.fieldMap["carousel_image_pc"] = a.CarouselImagePc
	a.fieldMap["carousel_image_h5"] = a.CarouselImageH5
	a.fieldMap["carousel_sort"] = a.CarouselSort
	a.fieldMap["show_popup"] = a.ShowPopup
	a.fieldMap["popup_image_pc"] = a.PopupImagePc
	a.fieldMap["popup_image_h5"] = a.PopupImageH5
	a.fieldMap["popup_sort"] = a.PopupSort
	a.fieldMap["activity_image_pc"] = a.ActivityImagePc
	a.fieldMap["activity_image_h5"] = a.ActivityImageH5
	a.fieldMap["activity_content"] = a.ActivityContent
	a.fieldMap["create_at"] = a.CreateAt
	a.fieldMap["update_at"] = a.UpdateAt
	a.fieldMap["op_user"] = a.OpUser
}

func (a activityImage) clone(db *gorm.DB) activityImage {
	a.activityImageDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activityImage) replaceDB(db *gorm.DB) activityImage {
	a.activityImageDo.ReplaceDB(db)
	return a
}

type activityImageDo struct{ gen.DO }

type IActivityImageDo interface {
	gen.SubQuery
	Debug() IActivityImageDo
	WithContext(ctx context.Context) IActivityImageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivityImageDo
	WriteDB() IActivityImageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivityImageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivityImageDo
	Not(conds ...gen.Condition) IActivityImageDo
	Or(conds ...gen.Condition) IActivityImageDo
	Select(conds ...field.Expr) IActivityImageDo
	Where(conds ...gen.Condition) IActivityImageDo
	Order(conds ...field.Expr) IActivityImageDo
	Distinct(cols ...field.Expr) IActivityImageDo
	Omit(cols ...field.Expr) IActivityImageDo
	Join(table schema.Tabler, on ...field.Expr) IActivityImageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivityImageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActivityImageDo
	Group(cols ...field.Expr) IActivityImageDo
	Having(conds ...gen.Condition) IActivityImageDo
	Limit(limit int) IActivityImageDo
	Offset(offset int) IActivityImageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityImageDo
	Unscoped() IActivityImageDo
	Create(values ...*model.ActivityImage) error
	CreateInBatches(values []*model.ActivityImage, batchSize int) error
	Save(values ...*model.ActivityImage) error
	First() (*model.ActivityImage, error)
	Take() (*model.ActivityImage, error)
	Last() (*model.ActivityImage, error)
	Find() ([]*model.ActivityImage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityImage, err error)
	FindInBatches(result *[]*model.ActivityImage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActivityImage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivityImageDo
	Assign(attrs ...field.AssignExpr) IActivityImageDo
	Joins(fields ...field.RelationField) IActivityImageDo
	Preload(fields ...field.RelationField) IActivityImageDo
	FirstOrInit() (*model.ActivityImage, error)
	FirstOrCreate() (*model.ActivityImage, error)
	FindByPage(offset int, limit int) (result []*model.ActivityImage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivityImageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activityImageDo) Debug() IActivityImageDo {
	return a.withDO(a.DO.Debug())
}

func (a activityImageDo) WithContext(ctx context.Context) IActivityImageDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityImageDo) ReadDB() IActivityImageDo {
	return a.Clauses(dbresolver.Read)
}

func (a activityImageDo) WriteDB() IActivityImageDo {
	return a.Clauses(dbresolver.Write)
}

func (a activityImageDo) Session(config *gorm.Session) IActivityImageDo {
	return a.withDO(a.DO.Session(config))
}

func (a activityImageDo) Clauses(conds ...clause.Expression) IActivityImageDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityImageDo) Returning(value interface{}, columns ...string) IActivityImageDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityImageDo) Not(conds ...gen.Condition) IActivityImageDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityImageDo) Or(conds ...gen.Condition) IActivityImageDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityImageDo) Select(conds ...field.Expr) IActivityImageDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityImageDo) Where(conds ...gen.Condition) IActivityImageDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityImageDo) Order(conds ...field.Expr) IActivityImageDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityImageDo) Distinct(cols ...field.Expr) IActivityImageDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityImageDo) Omit(cols ...field.Expr) IActivityImageDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityImageDo) Join(table schema.Tabler, on ...field.Expr) IActivityImageDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityImageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActivityImageDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityImageDo) RightJoin(table schema.Tabler, on ...field.Expr) IActivityImageDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityImageDo) Group(cols ...field.Expr) IActivityImageDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityImageDo) Having(conds ...gen.Condition) IActivityImageDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityImageDo) Limit(limit int) IActivityImageDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityImageDo) Offset(offset int) IActivityImageDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityImageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityImageDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityImageDo) Unscoped() IActivityImageDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activityImageDo) Create(values ...*model.ActivityImage) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityImageDo) CreateInBatches(values []*model.ActivityImage, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityImageDo) Save(values ...*model.ActivityImage) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityImageDo) First() (*model.ActivityImage, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityImage), nil
	}
}

func (a activityImageDo) Take() (*model.ActivityImage, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityImage), nil
	}
}

func (a activityImageDo) Last() (*model.ActivityImage, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityImage), nil
	}
}

func (a activityImageDo) Find() ([]*model.ActivityImage, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivityImage), err
}

func (a activityImageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityImage, err error) {
	buf := make([]*model.ActivityImage, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityImageDo) FindInBatches(result *[]*model.ActivityImage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityImageDo) Attrs(attrs ...field.AssignExpr) IActivityImageDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityImageDo) Assign(attrs ...field.AssignExpr) IActivityImageDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityImageDo) Joins(fields ...field.RelationField) IActivityImageDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityImageDo) Preload(fields ...field.RelationField) IActivityImageDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityImageDo) FirstOrInit() (*model.ActivityImage, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityImage), nil
	}
}

func (a activityImageDo) FirstOrCreate() (*model.ActivityImage, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityImage), nil
	}
}

func (a activityImageDo) FindByPage(offset int, limit int) (result []*model.ActivityImage, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityImageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityImageDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityImageDo) Delete(models ...*model.ActivityImage) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityImageDo) withDO(do gen.Dao) *activityImageDo {
	a.DO = *do.(*gen.DO)
	return a
}
