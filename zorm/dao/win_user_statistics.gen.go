// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/common/zorm/model"
)

func newWinUserStatistics(db *gorm.DB, opts ...gen.DOOption) winUserStatistics {
	_winUserStatistics := winUserStatistics{}

	_winUserStatistics.winUserStatisticsDo.UseDB(db, opts...)
	_winUserStatistics.winUserStatisticsDo.UseModel(&model.WinUserStatistics{})

	tableName := _winUserStatistics.winUserStatisticsDo.TableName()
	_winUserStatistics.ALL = field.NewAsterisk(tableName)
	_winUserStatistics.ID = field.NewInt64(tableName, "id")
	_winUserStatistics.UserID = field.NewInt64(tableName, "user_id")
	_winUserStatistics.UserName = field.NewString(tableName, "user_name")
	_winUserStatistics.TotalDepositCount = field.NewInt64(tableName, "total_deposit_count")
	_winUserStatistics.TotalDepositAmount = field.NewField(tableName, "total_deposit_amount")
	_winUserStatistics.TotalBetAmount = field.NewField(tableName, "total_bet_amount")
	_winUserStatistics.TotalWinLoss = field.NewField(tableName, "total_win_loss")
	_winUserStatistics.TotalWithdrawCount = field.NewInt64(tableName, "total_withdraw_count")
	_winUserStatistics.TotalWithdrawAmount = field.NewField(tableName, "total_withdraw_amount")
	_winUserStatistics.DepositWithdrawDiff = field.NewField(tableName, "deposit_withdraw_diff")

	_winUserStatistics.fillFieldMap()

	return _winUserStatistics
}

type winUserStatistics struct {
	winUserStatisticsDo

	ALL                 field.Asterisk
	ID                  field.Int64
	UserID              field.Int64  // 会员序号
	UserName            field.String // 会员名称
	TotalDepositCount   field.Int64  // 累计存款次数
	TotalDepositAmount  field.Field  // 累计存款金额，最大值 999,999,999,999.99
	TotalBetAmount      field.Field  // 累计投注金额
	TotalWinLoss        field.Field  // 累计输赢
	TotalWithdrawCount  field.Int64  // 累计取款次数
	TotalWithdrawAmount field.Field  // 累计取款金额
	DepositWithdrawDiff field.Field  // 累计存提差（累计存款金额 - 累计取款金额）

	fieldMap map[string]field.Expr
}

func (w winUserStatistics) Table(newTableName string) *winUserStatistics {
	w.winUserStatisticsDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winUserStatistics) As(alias string) *winUserStatistics {
	w.winUserStatisticsDo.DO = *(w.winUserStatisticsDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winUserStatistics) updateTableName(table string) *winUserStatistics {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.UserID = field.NewInt64(table, "user_id")
	w.UserName = field.NewString(table, "user_name")
	w.TotalDepositCount = field.NewInt64(table, "total_deposit_count")
	w.TotalDepositAmount = field.NewField(table, "total_deposit_amount")
	w.TotalBetAmount = field.NewField(table, "total_bet_amount")
	w.TotalWinLoss = field.NewField(table, "total_win_loss")
	w.TotalWithdrawCount = field.NewInt64(table, "total_withdraw_count")
	w.TotalWithdrawAmount = field.NewField(table, "total_withdraw_amount")
	w.DepositWithdrawDiff = field.NewField(table, "deposit_withdraw_diff")

	w.fillFieldMap()

	return w
}

func (w *winUserStatistics) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winUserStatistics) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 10)
	w.fieldMap["id"] = w.ID
	w.fieldMap["user_id"] = w.UserID
	w.fieldMap["user_name"] = w.UserName
	w.fieldMap["total_deposit_count"] = w.TotalDepositCount
	w.fieldMap["total_deposit_amount"] = w.TotalDepositAmount
	w.fieldMap["total_bet_amount"] = w.TotalBetAmount
	w.fieldMap["total_win_loss"] = w.TotalWinLoss
	w.fieldMap["total_withdraw_count"] = w.TotalWithdrawCount
	w.fieldMap["total_withdraw_amount"] = w.TotalWithdrawAmount
	w.fieldMap["deposit_withdraw_diff"] = w.DepositWithdrawDiff
}

func (w winUserStatistics) clone(db *gorm.DB) winUserStatistics {
	w.winUserStatisticsDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winUserStatistics) replaceDB(db *gorm.DB) winUserStatistics {
	w.winUserStatisticsDo.ReplaceDB(db)
	return w
}

type winUserStatisticsDo struct{ gen.DO }

type IWinUserStatisticsDo interface {
	gen.SubQuery
	Debug() IWinUserStatisticsDo
	WithContext(ctx context.Context) IWinUserStatisticsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinUserStatisticsDo
	WriteDB() IWinUserStatisticsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinUserStatisticsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinUserStatisticsDo
	Not(conds ...gen.Condition) IWinUserStatisticsDo
	Or(conds ...gen.Condition) IWinUserStatisticsDo
	Select(conds ...field.Expr) IWinUserStatisticsDo
	Where(conds ...gen.Condition) IWinUserStatisticsDo
	Order(conds ...field.Expr) IWinUserStatisticsDo
	Distinct(cols ...field.Expr) IWinUserStatisticsDo
	Omit(cols ...field.Expr) IWinUserStatisticsDo
	Join(table schema.Tabler, on ...field.Expr) IWinUserStatisticsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinUserStatisticsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinUserStatisticsDo
	Group(cols ...field.Expr) IWinUserStatisticsDo
	Having(conds ...gen.Condition) IWinUserStatisticsDo
	Limit(limit int) IWinUserStatisticsDo
	Offset(offset int) IWinUserStatisticsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinUserStatisticsDo
	Unscoped() IWinUserStatisticsDo
	Create(values ...*model.WinUserStatistics) error
	CreateInBatches(values []*model.WinUserStatistics, batchSize int) error
	Save(values ...*model.WinUserStatistics) error
	First() (*model.WinUserStatistics, error)
	Take() (*model.WinUserStatistics, error)
	Last() (*model.WinUserStatistics, error)
	Find() ([]*model.WinUserStatistics, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinUserStatistics, err error)
	FindInBatches(result *[]*model.WinUserStatistics, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinUserStatistics) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinUserStatisticsDo
	Assign(attrs ...field.AssignExpr) IWinUserStatisticsDo
	Joins(fields ...field.RelationField) IWinUserStatisticsDo
	Preload(fields ...field.RelationField) IWinUserStatisticsDo
	FirstOrInit() (*model.WinUserStatistics, error)
	FirstOrCreate() (*model.WinUserStatistics, error)
	FindByPage(offset int, limit int) (result []*model.WinUserStatistics, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinUserStatisticsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winUserStatisticsDo) Debug() IWinUserStatisticsDo {
	return w.withDO(w.DO.Debug())
}

func (w winUserStatisticsDo) WithContext(ctx context.Context) IWinUserStatisticsDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winUserStatisticsDo) ReadDB() IWinUserStatisticsDo {
	return w.Clauses(dbresolver.Read)
}

func (w winUserStatisticsDo) WriteDB() IWinUserStatisticsDo {
	return w.Clauses(dbresolver.Write)
}

func (w winUserStatisticsDo) Session(config *gorm.Session) IWinUserStatisticsDo {
	return w.withDO(w.DO.Session(config))
}

func (w winUserStatisticsDo) Clauses(conds ...clause.Expression) IWinUserStatisticsDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winUserStatisticsDo) Returning(value interface{}, columns ...string) IWinUserStatisticsDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winUserStatisticsDo) Not(conds ...gen.Condition) IWinUserStatisticsDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winUserStatisticsDo) Or(conds ...gen.Condition) IWinUserStatisticsDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winUserStatisticsDo) Select(conds ...field.Expr) IWinUserStatisticsDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winUserStatisticsDo) Where(conds ...gen.Condition) IWinUserStatisticsDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winUserStatisticsDo) Order(conds ...field.Expr) IWinUserStatisticsDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winUserStatisticsDo) Distinct(cols ...field.Expr) IWinUserStatisticsDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winUserStatisticsDo) Omit(cols ...field.Expr) IWinUserStatisticsDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winUserStatisticsDo) Join(table schema.Tabler, on ...field.Expr) IWinUserStatisticsDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winUserStatisticsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinUserStatisticsDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winUserStatisticsDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinUserStatisticsDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winUserStatisticsDo) Group(cols ...field.Expr) IWinUserStatisticsDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winUserStatisticsDo) Having(conds ...gen.Condition) IWinUserStatisticsDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winUserStatisticsDo) Limit(limit int) IWinUserStatisticsDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winUserStatisticsDo) Offset(offset int) IWinUserStatisticsDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winUserStatisticsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinUserStatisticsDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winUserStatisticsDo) Unscoped() IWinUserStatisticsDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winUserStatisticsDo) Create(values ...*model.WinUserStatistics) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winUserStatisticsDo) CreateInBatches(values []*model.WinUserStatistics, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winUserStatisticsDo) Save(values ...*model.WinUserStatistics) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winUserStatisticsDo) First() (*model.WinUserStatistics, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserStatistics), nil
	}
}

func (w winUserStatisticsDo) Take() (*model.WinUserStatistics, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserStatistics), nil
	}
}

func (w winUserStatisticsDo) Last() (*model.WinUserStatistics, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserStatistics), nil
	}
}

func (w winUserStatisticsDo) Find() ([]*model.WinUserStatistics, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinUserStatistics), err
}

func (w winUserStatisticsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinUserStatistics, err error) {
	buf := make([]*model.WinUserStatistics, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winUserStatisticsDo) FindInBatches(result *[]*model.WinUserStatistics, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winUserStatisticsDo) Attrs(attrs ...field.AssignExpr) IWinUserStatisticsDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winUserStatisticsDo) Assign(attrs ...field.AssignExpr) IWinUserStatisticsDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winUserStatisticsDo) Joins(fields ...field.RelationField) IWinUserStatisticsDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winUserStatisticsDo) Preload(fields ...field.RelationField) IWinUserStatisticsDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winUserStatisticsDo) FirstOrInit() (*model.WinUserStatistics, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserStatistics), nil
	}
}

func (w winUserStatisticsDo) FirstOrCreate() (*model.WinUserStatistics, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserStatistics), nil
	}
}

func (w winUserStatisticsDo) FindByPage(offset int, limit int) (result []*model.WinUserStatistics, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winUserStatisticsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winUserStatisticsDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winUserStatisticsDo) Delete(models ...*model.WinUserStatistics) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winUserStatisticsDo) withDO(do gen.Dao) *winUserStatisticsDo {
	w.DO = *do.(*gen.DO)
	return w
}
