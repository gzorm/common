// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/common/zorm/model"
)

func newWinArticleInfo(db *gorm.DB, opts ...gen.DOOption) winArticleInfo {
	_winArticleInfo := winArticleInfo{}

	_winArticleInfo.winArticleInfoDo.UseDB(db, opts...)
	_winArticleInfo.winArticleInfoDo.UseModel(&model.WinArticleInfo{})

	tableName := _winArticleInfo.winArticleInfoDo.TableName()
	_winArticleInfo.ALL = field.NewAsterisk(tableName)
	_winArticleInfo.ID = field.NewInt64(tableName, "id")
	_winArticleInfo.Language = field.NewString(tableName, "language")
	_winArticleInfo.Title = field.NewString(tableName, "title")
	_winArticleInfo.Sort = field.NewInt64(tableName, "sort")
	_winArticleInfo.Status = field.NewInt64(tableName, "status")
	_winArticleInfo.Content = field.NewString(tableName, "content")
	_winArticleInfo.Img = field.NewString(tableName, "img")
	_winArticleInfo.CreateBy = field.NewString(tableName, "create_by")
	_winArticleInfo.UpdateBy = field.NewString(tableName, "update_by")
	_winArticleInfo.CreatedAt = field.NewInt64(tableName, "created_at")
	_winArticleInfo.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_winArticleInfo.fillFieldMap()

	return _winArticleInfo
}

// winArticleInfo 体育资讯表
type winArticleInfo struct {
	winArticleInfoDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键编号
	Language  field.String // 语言
	Title     field.String // 标题
	Sort      field.Int64  // 排序
	Status    field.Int64  // 状态:1-启用 0-停用
	Content   field.String // 内容
	Img       field.String // 图片
	CreateBy  field.String // 创建者
	UpdateBy  field.String // 更新人
	CreatedAt field.Int64
	UpdatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (w winArticleInfo) Table(newTableName string) *winArticleInfo {
	w.winArticleInfoDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winArticleInfo) As(alias string) *winArticleInfo {
	w.winArticleInfoDo.DO = *(w.winArticleInfoDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winArticleInfo) updateTableName(table string) *winArticleInfo {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.Language = field.NewString(table, "language")
	w.Title = field.NewString(table, "title")
	w.Sort = field.NewInt64(table, "sort")
	w.Status = field.NewInt64(table, "status")
	w.Content = field.NewString(table, "content")
	w.Img = field.NewString(table, "img")
	w.CreateBy = field.NewString(table, "create_by")
	w.UpdateBy = field.NewString(table, "update_by")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *winArticleInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winArticleInfo) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 11)
	w.fieldMap["id"] = w.ID
	w.fieldMap["language"] = w.Language
	w.fieldMap["title"] = w.Title
	w.fieldMap["sort"] = w.Sort
	w.fieldMap["status"] = w.Status
	w.fieldMap["content"] = w.Content
	w.fieldMap["img"] = w.Img
	w.fieldMap["create_by"] = w.CreateBy
	w.fieldMap["update_by"] = w.UpdateBy
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w winArticleInfo) clone(db *gorm.DB) winArticleInfo {
	w.winArticleInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winArticleInfo) replaceDB(db *gorm.DB) winArticleInfo {
	w.winArticleInfoDo.ReplaceDB(db)
	return w
}

type winArticleInfoDo struct{ gen.DO }

type IWinArticleInfoDo interface {
	gen.SubQuery
	Debug() IWinArticleInfoDo
	WithContext(ctx context.Context) IWinArticleInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinArticleInfoDo
	WriteDB() IWinArticleInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinArticleInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinArticleInfoDo
	Not(conds ...gen.Condition) IWinArticleInfoDo
	Or(conds ...gen.Condition) IWinArticleInfoDo
	Select(conds ...field.Expr) IWinArticleInfoDo
	Where(conds ...gen.Condition) IWinArticleInfoDo
	Order(conds ...field.Expr) IWinArticleInfoDo
	Distinct(cols ...field.Expr) IWinArticleInfoDo
	Omit(cols ...field.Expr) IWinArticleInfoDo
	Join(table schema.Tabler, on ...field.Expr) IWinArticleInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinArticleInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinArticleInfoDo
	Group(cols ...field.Expr) IWinArticleInfoDo
	Having(conds ...gen.Condition) IWinArticleInfoDo
	Limit(limit int) IWinArticleInfoDo
	Offset(offset int) IWinArticleInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinArticleInfoDo
	Unscoped() IWinArticleInfoDo
	Create(values ...*model.WinArticleInfo) error
	CreateInBatches(values []*model.WinArticleInfo, batchSize int) error
	Save(values ...*model.WinArticleInfo) error
	First() (*model.WinArticleInfo, error)
	Take() (*model.WinArticleInfo, error)
	Last() (*model.WinArticleInfo, error)
	Find() ([]*model.WinArticleInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinArticleInfo, err error)
	FindInBatches(result *[]*model.WinArticleInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinArticleInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinArticleInfoDo
	Assign(attrs ...field.AssignExpr) IWinArticleInfoDo
	Joins(fields ...field.RelationField) IWinArticleInfoDo
	Preload(fields ...field.RelationField) IWinArticleInfoDo
	FirstOrInit() (*model.WinArticleInfo, error)
	FirstOrCreate() (*model.WinArticleInfo, error)
	FindByPage(offset int, limit int) (result []*model.WinArticleInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinArticleInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winArticleInfoDo) Debug() IWinArticleInfoDo {
	return w.withDO(w.DO.Debug())
}

func (w winArticleInfoDo) WithContext(ctx context.Context) IWinArticleInfoDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winArticleInfoDo) ReadDB() IWinArticleInfoDo {
	return w.Clauses(dbresolver.Read)
}

func (w winArticleInfoDo) WriteDB() IWinArticleInfoDo {
	return w.Clauses(dbresolver.Write)
}

func (w winArticleInfoDo) Session(config *gorm.Session) IWinArticleInfoDo {
	return w.withDO(w.DO.Session(config))
}

func (w winArticleInfoDo) Clauses(conds ...clause.Expression) IWinArticleInfoDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winArticleInfoDo) Returning(value interface{}, columns ...string) IWinArticleInfoDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winArticleInfoDo) Not(conds ...gen.Condition) IWinArticleInfoDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winArticleInfoDo) Or(conds ...gen.Condition) IWinArticleInfoDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winArticleInfoDo) Select(conds ...field.Expr) IWinArticleInfoDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winArticleInfoDo) Where(conds ...gen.Condition) IWinArticleInfoDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winArticleInfoDo) Order(conds ...field.Expr) IWinArticleInfoDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winArticleInfoDo) Distinct(cols ...field.Expr) IWinArticleInfoDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winArticleInfoDo) Omit(cols ...field.Expr) IWinArticleInfoDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winArticleInfoDo) Join(table schema.Tabler, on ...field.Expr) IWinArticleInfoDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winArticleInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinArticleInfoDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winArticleInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinArticleInfoDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winArticleInfoDo) Group(cols ...field.Expr) IWinArticleInfoDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winArticleInfoDo) Having(conds ...gen.Condition) IWinArticleInfoDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winArticleInfoDo) Limit(limit int) IWinArticleInfoDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winArticleInfoDo) Offset(offset int) IWinArticleInfoDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winArticleInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinArticleInfoDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winArticleInfoDo) Unscoped() IWinArticleInfoDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winArticleInfoDo) Create(values ...*model.WinArticleInfo) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winArticleInfoDo) CreateInBatches(values []*model.WinArticleInfo, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winArticleInfoDo) Save(values ...*model.WinArticleInfo) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winArticleInfoDo) First() (*model.WinArticleInfo, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinArticleInfo), nil
	}
}

func (w winArticleInfoDo) Take() (*model.WinArticleInfo, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinArticleInfo), nil
	}
}

func (w winArticleInfoDo) Last() (*model.WinArticleInfo, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinArticleInfo), nil
	}
}

func (w winArticleInfoDo) Find() ([]*model.WinArticleInfo, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinArticleInfo), err
}

func (w winArticleInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinArticleInfo, err error) {
	buf := make([]*model.WinArticleInfo, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winArticleInfoDo) FindInBatches(result *[]*model.WinArticleInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winArticleInfoDo) Attrs(attrs ...field.AssignExpr) IWinArticleInfoDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winArticleInfoDo) Assign(attrs ...field.AssignExpr) IWinArticleInfoDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winArticleInfoDo) Joins(fields ...field.RelationField) IWinArticleInfoDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winArticleInfoDo) Preload(fields ...field.RelationField) IWinArticleInfoDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winArticleInfoDo) FirstOrInit() (*model.WinArticleInfo, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinArticleInfo), nil
	}
}

func (w winArticleInfoDo) FirstOrCreate() (*model.WinArticleInfo, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinArticleInfo), nil
	}
}

func (w winArticleInfoDo) FindByPage(offset int, limit int) (result []*model.WinArticleInfo, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winArticleInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winArticleInfoDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winArticleInfoDo) Delete(models ...*model.WinArticleInfo) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winArticleInfoDo) withDO(do gen.Dao) *winArticleInfoDo {
	w.DO = *do.(*gen.DO)
	return w
}
