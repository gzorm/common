// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newFbSportsMatchMarketOdds(db *gorm.DB, opts ...gen.DOOption) fbSportsMatchMarketOdds {
	_fbSportsMatchMarketOdds := fbSportsMatchMarketOdds{}

	_fbSportsMatchMarketOdds.fbSportsMatchMarketOddsDo.UseDB(db, opts...)
	_fbSportsMatchMarketOdds.fbSportsMatchMarketOddsDo.UseModel(&model.FbSportsMatchMarketOdds{})

	tableName := _fbSportsMatchMarketOdds.fbSportsMatchMarketOddsDo.TableName()
	_fbSportsMatchMarketOdds.ALL = field.NewAsterisk(tableName)
	_fbSportsMatchMarketOdds.ID = field.NewInt64(tableName, "id")
	_fbSportsMatchMarketOdds.MatchID = field.NewInt64(tableName, "match_id")
	_fbSportsMatchMarketOdds.MarketType = field.NewInt64(tableName, "market_type")
	_fbSportsMatchMarketOdds.Period = field.NewInt64(tableName, "period")
	_fbSportsMatchMarketOdds.OddsMarket = field.NewString(tableName, "odds_market")
	_fbSportsMatchMarketOdds.Name = field.NewString(tableName, "name")
	_fbSportsMatchMarketOdds.Tags = field.NewString(tableName, "tags")
	_fbSportsMatchMarketOdds.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbSportsMatchMarketOdds.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_fbSportsMatchMarketOdds.fillFieldMap()

	return _fbSportsMatchMarketOdds
}

// fbSportsMatchMarketOdds 赔率表
type fbSportsMatchMarketOdds struct {
	fbSportsMatchMarketOddsDo

	ALL        field.Asterisk
	ID         field.Int64  // 主键，自增 ID
	MatchID    field.Int64  // 赛事 ID
	MarketType field.Int64  // 玩法类型，例如亚盘、大小球等
	Period     field.Int64  // 玩法阶段，例如全场、半场等
	OddsMarket field.String // 玩法赔率集合，带线玩法，数组里是多个，或者一个玩法，不带线玩法，数组就是一条数据
	Name       field.String // 玩法名称
	Tags       field.String // 玩法展示分类数组， 如：热门、角球、波胆等，返回英文字母简称，存储为 JSON 数组
	CreatedAt  field.Int64  // 创建时间
	UpdatedAt  field.Int64  // 更新时间

	fieldMap map[string]field.Expr
}

func (f fbSportsMatchMarketOdds) Table(newTableName string) *fbSportsMatchMarketOdds {
	f.fbSportsMatchMarketOddsDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbSportsMatchMarketOdds) As(alias string) *fbSportsMatchMarketOdds {
	f.fbSportsMatchMarketOddsDo.DO = *(f.fbSportsMatchMarketOddsDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbSportsMatchMarketOdds) updateTableName(table string) *fbSportsMatchMarketOdds {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.MatchID = field.NewInt64(table, "match_id")
	f.MarketType = field.NewInt64(table, "market_type")
	f.Period = field.NewInt64(table, "period")
	f.OddsMarket = field.NewString(table, "odds_market")
	f.Name = field.NewString(table, "name")
	f.Tags = field.NewString(table, "tags")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fbSportsMatchMarketOdds) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbSportsMatchMarketOdds) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 9)
	f.fieldMap["id"] = f.ID
	f.fieldMap["match_id"] = f.MatchID
	f.fieldMap["market_type"] = f.MarketType
	f.fieldMap["period"] = f.Period
	f.fieldMap["odds_market"] = f.OddsMarket
	f.fieldMap["name"] = f.Name
	f.fieldMap["tags"] = f.Tags
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fbSportsMatchMarketOdds) clone(db *gorm.DB) fbSportsMatchMarketOdds {
	f.fbSportsMatchMarketOddsDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbSportsMatchMarketOdds) replaceDB(db *gorm.DB) fbSportsMatchMarketOdds {
	f.fbSportsMatchMarketOddsDo.ReplaceDB(db)
	return f
}

type fbSportsMatchMarketOddsDo struct{ gen.DO }

type IFbSportsMatchMarketOddsDo interface {
	gen.SubQuery
	Debug() IFbSportsMatchMarketOddsDo
	WithContext(ctx context.Context) IFbSportsMatchMarketOddsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbSportsMatchMarketOddsDo
	WriteDB() IFbSportsMatchMarketOddsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbSportsMatchMarketOddsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbSportsMatchMarketOddsDo
	Not(conds ...gen.Condition) IFbSportsMatchMarketOddsDo
	Or(conds ...gen.Condition) IFbSportsMatchMarketOddsDo
	Select(conds ...field.Expr) IFbSportsMatchMarketOddsDo
	Where(conds ...gen.Condition) IFbSportsMatchMarketOddsDo
	Order(conds ...field.Expr) IFbSportsMatchMarketOddsDo
	Distinct(cols ...field.Expr) IFbSportsMatchMarketOddsDo
	Omit(cols ...field.Expr) IFbSportsMatchMarketOddsDo
	Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOddsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOddsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOddsDo
	Group(cols ...field.Expr) IFbSportsMatchMarketOddsDo
	Having(conds ...gen.Condition) IFbSportsMatchMarketOddsDo
	Limit(limit int) IFbSportsMatchMarketOddsDo
	Offset(offset int) IFbSportsMatchMarketOddsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchMarketOddsDo
	Unscoped() IFbSportsMatchMarketOddsDo
	Create(values ...*model.FbSportsMatchMarketOdds) error
	CreateInBatches(values []*model.FbSportsMatchMarketOdds, batchSize int) error
	Save(values ...*model.FbSportsMatchMarketOdds) error
	First() (*model.FbSportsMatchMarketOdds, error)
	Take() (*model.FbSportsMatchMarketOdds, error)
	Last() (*model.FbSportsMatchMarketOdds, error)
	Find() ([]*model.FbSportsMatchMarketOdds, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchMarketOdds, err error)
	FindInBatches(result *[]*model.FbSportsMatchMarketOdds, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbSportsMatchMarketOdds) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbSportsMatchMarketOddsDo
	Assign(attrs ...field.AssignExpr) IFbSportsMatchMarketOddsDo
	Joins(fields ...field.RelationField) IFbSportsMatchMarketOddsDo
	Preload(fields ...field.RelationField) IFbSportsMatchMarketOddsDo
	FirstOrInit() (*model.FbSportsMatchMarketOdds, error)
	FirstOrCreate() (*model.FbSportsMatchMarketOdds, error)
	FindByPage(offset int, limit int) (result []*model.FbSportsMatchMarketOdds, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbSportsMatchMarketOddsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbSportsMatchMarketOddsDo) Debug() IFbSportsMatchMarketOddsDo {
	return f.withDO(f.DO.Debug())
}

func (f fbSportsMatchMarketOddsDo) WithContext(ctx context.Context) IFbSportsMatchMarketOddsDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbSportsMatchMarketOddsDo) ReadDB() IFbSportsMatchMarketOddsDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbSportsMatchMarketOddsDo) WriteDB() IFbSportsMatchMarketOddsDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbSportsMatchMarketOddsDo) Session(config *gorm.Session) IFbSportsMatchMarketOddsDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbSportsMatchMarketOddsDo) Clauses(conds ...clause.Expression) IFbSportsMatchMarketOddsDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbSportsMatchMarketOddsDo) Returning(value interface{}, columns ...string) IFbSportsMatchMarketOddsDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbSportsMatchMarketOddsDo) Not(conds ...gen.Condition) IFbSportsMatchMarketOddsDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbSportsMatchMarketOddsDo) Or(conds ...gen.Condition) IFbSportsMatchMarketOddsDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbSportsMatchMarketOddsDo) Select(conds ...field.Expr) IFbSportsMatchMarketOddsDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbSportsMatchMarketOddsDo) Where(conds ...gen.Condition) IFbSportsMatchMarketOddsDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbSportsMatchMarketOddsDo) Order(conds ...field.Expr) IFbSportsMatchMarketOddsDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbSportsMatchMarketOddsDo) Distinct(cols ...field.Expr) IFbSportsMatchMarketOddsDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbSportsMatchMarketOddsDo) Omit(cols ...field.Expr) IFbSportsMatchMarketOddsDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbSportsMatchMarketOddsDo) Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOddsDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbSportsMatchMarketOddsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOddsDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbSportsMatchMarketOddsDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchMarketOddsDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbSportsMatchMarketOddsDo) Group(cols ...field.Expr) IFbSportsMatchMarketOddsDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbSportsMatchMarketOddsDo) Having(conds ...gen.Condition) IFbSportsMatchMarketOddsDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbSportsMatchMarketOddsDo) Limit(limit int) IFbSportsMatchMarketOddsDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbSportsMatchMarketOddsDo) Offset(offset int) IFbSportsMatchMarketOddsDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbSportsMatchMarketOddsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchMarketOddsDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbSportsMatchMarketOddsDo) Unscoped() IFbSportsMatchMarketOddsDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbSportsMatchMarketOddsDo) Create(values ...*model.FbSportsMatchMarketOdds) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbSportsMatchMarketOddsDo) CreateInBatches(values []*model.FbSportsMatchMarketOdds, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbSportsMatchMarketOddsDo) Save(values ...*model.FbSportsMatchMarketOdds) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbSportsMatchMarketOddsDo) First() (*model.FbSportsMatchMarketOdds, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketOdds), nil
	}
}

func (f fbSportsMatchMarketOddsDo) Take() (*model.FbSportsMatchMarketOdds, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketOdds), nil
	}
}

func (f fbSportsMatchMarketOddsDo) Last() (*model.FbSportsMatchMarketOdds, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketOdds), nil
	}
}

func (f fbSportsMatchMarketOddsDo) Find() ([]*model.FbSportsMatchMarketOdds, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbSportsMatchMarketOdds), err
}

func (f fbSportsMatchMarketOddsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchMarketOdds, err error) {
	buf := make([]*model.FbSportsMatchMarketOdds, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbSportsMatchMarketOddsDo) FindInBatches(result *[]*model.FbSportsMatchMarketOdds, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbSportsMatchMarketOddsDo) Attrs(attrs ...field.AssignExpr) IFbSportsMatchMarketOddsDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbSportsMatchMarketOddsDo) Assign(attrs ...field.AssignExpr) IFbSportsMatchMarketOddsDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbSportsMatchMarketOddsDo) Joins(fields ...field.RelationField) IFbSportsMatchMarketOddsDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbSportsMatchMarketOddsDo) Preload(fields ...field.RelationField) IFbSportsMatchMarketOddsDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbSportsMatchMarketOddsDo) FirstOrInit() (*model.FbSportsMatchMarketOdds, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketOdds), nil
	}
}

func (f fbSportsMatchMarketOddsDo) FirstOrCreate() (*model.FbSportsMatchMarketOdds, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchMarketOdds), nil
	}
}

func (f fbSportsMatchMarketOddsDo) FindByPage(offset int, limit int) (result []*model.FbSportsMatchMarketOdds, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbSportsMatchMarketOddsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbSportsMatchMarketOddsDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbSportsMatchMarketOddsDo) Delete(models ...*model.FbSportsMatchMarketOdds) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbSportsMatchMarketOddsDo) withDO(do gen.Dao) *fbSportsMatchMarketOddsDo {
	f.DO = *do.(*gen.DO)
	return f
}
