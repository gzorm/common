// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newFbSportsMatchTopic(db *gorm.DB, opts ...gen.DOOption) fbSportsMatchTopic {
	_fbSportsMatchTopic := fbSportsMatchTopic{}

	_fbSportsMatchTopic.fbSportsMatchTopicDo.UseDB(db, opts...)
	_fbSportsMatchTopic.fbSportsMatchTopicDo.UseModel(&model.FbSportsMatchTopic{})

	tableName := _fbSportsMatchTopic.fbSportsMatchTopicDo.TableName()
	_fbSportsMatchTopic.ALL = field.NewAsterisk(tableName)
	_fbSportsMatchTopic.ID = field.NewInt64(tableName, "id")
	_fbSportsMatchTopic.MatchID = field.NewInt64(tableName, "match_id")
	_fbSportsMatchTopic.LeaguePhase = field.NewInt64(tableName, "league_phase")
	_fbSportsMatchTopic.LeagueSubphase = field.NewInt64(tableName, "league_subphase")
	_fbSportsMatchTopic.MatchName = field.NewString(tableName, "match_name")
	_fbSportsMatchTopic.StartTime = field.NewInt64(tableName, "start_time")
	_fbSportsMatchTopic.MatchStatus = field.NewInt64(tableName, "match_status")
	_fbSportsMatchTopic.MatchClock = field.NewString(tableName, "match_clock")
	_fbSportsMatchTopic.ScoreGroups = field.NewString(tableName, "score_groups")
	_fbSportsMatchTopic.EliminationOrder = field.NewInt64(tableName, "elimination_order")
	_fbSportsMatchTopic.Teams = field.NewString(tableName, "teams")
	_fbSportsMatchTopic.TopicID = field.NewInt64(tableName, "topic_id")
	_fbSportsMatchTopic.LeagueID = field.NewInt64(tableName, "league_id")
	_fbSportsMatchTopic.LanguageType = field.NewString(tableName, "language_type")
	_fbSportsMatchTopic.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbSportsMatchTopic.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_fbSportsMatchTopic.fillFieldMap()

	return _fbSportsMatchTopic
}

// fbSportsMatchTopic 赛事专题数据表
type fbSportsMatchTopic struct {
	fbSportsMatchTopicDo

	ALL              field.Asterisk
	ID               field.Int64  // 主键
	MatchID          field.Int64  // 赛事ID
	LeaguePhase      field.Int64  // 联赛阶段
	LeagueSubphase   field.Int64  // 联赛子阶段
	MatchName        field.String // 赛事名称
	StartTime        field.Int64  // 开赛时间
	MatchStatus      field.Int64  // 赛事状态
	MatchClock       field.String // 赛事走表信息
	ScoreGroups      field.String // 赛事比分信息
	EliminationOrder field.Int64  // 淘汰赛排序
	Teams            field.String // 球队集合信息
	TopicID          field.Int64  // 专题ID
	LeagueID         field.Int64  // 联赛ID
	LanguageType     field.String // 语言类型
	CreatedAt        field.Int64  // 记录创建时间
	UpdatedAt        field.Int64  // 记录更新时间

	fieldMap map[string]field.Expr
}

func (f fbSportsMatchTopic) Table(newTableName string) *fbSportsMatchTopic {
	f.fbSportsMatchTopicDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbSportsMatchTopic) As(alias string) *fbSportsMatchTopic {
	f.fbSportsMatchTopicDo.DO = *(f.fbSportsMatchTopicDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbSportsMatchTopic) updateTableName(table string) *fbSportsMatchTopic {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.MatchID = field.NewInt64(table, "match_id")
	f.LeaguePhase = field.NewInt64(table, "league_phase")
	f.LeagueSubphase = field.NewInt64(table, "league_subphase")
	f.MatchName = field.NewString(table, "match_name")
	f.StartTime = field.NewInt64(table, "start_time")
	f.MatchStatus = field.NewInt64(table, "match_status")
	f.MatchClock = field.NewString(table, "match_clock")
	f.ScoreGroups = field.NewString(table, "score_groups")
	f.EliminationOrder = field.NewInt64(table, "elimination_order")
	f.Teams = field.NewString(table, "teams")
	f.TopicID = field.NewInt64(table, "topic_id")
	f.LeagueID = field.NewInt64(table, "league_id")
	f.LanguageType = field.NewString(table, "language_type")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fbSportsMatchTopic) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbSportsMatchTopic) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 16)
	f.fieldMap["id"] = f.ID
	f.fieldMap["match_id"] = f.MatchID
	f.fieldMap["league_phase"] = f.LeaguePhase
	f.fieldMap["league_subphase"] = f.LeagueSubphase
	f.fieldMap["match_name"] = f.MatchName
	f.fieldMap["start_time"] = f.StartTime
	f.fieldMap["match_status"] = f.MatchStatus
	f.fieldMap["match_clock"] = f.MatchClock
	f.fieldMap["score_groups"] = f.ScoreGroups
	f.fieldMap["elimination_order"] = f.EliminationOrder
	f.fieldMap["teams"] = f.Teams
	f.fieldMap["topic_id"] = f.TopicID
	f.fieldMap["league_id"] = f.LeagueID
	f.fieldMap["language_type"] = f.LanguageType
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fbSportsMatchTopic) clone(db *gorm.DB) fbSportsMatchTopic {
	f.fbSportsMatchTopicDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbSportsMatchTopic) replaceDB(db *gorm.DB) fbSportsMatchTopic {
	f.fbSportsMatchTopicDo.ReplaceDB(db)
	return f
}

type fbSportsMatchTopicDo struct{ gen.DO }

type IFbSportsMatchTopicDo interface {
	gen.SubQuery
	Debug() IFbSportsMatchTopicDo
	WithContext(ctx context.Context) IFbSportsMatchTopicDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbSportsMatchTopicDo
	WriteDB() IFbSportsMatchTopicDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbSportsMatchTopicDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbSportsMatchTopicDo
	Not(conds ...gen.Condition) IFbSportsMatchTopicDo
	Or(conds ...gen.Condition) IFbSportsMatchTopicDo
	Select(conds ...field.Expr) IFbSportsMatchTopicDo
	Where(conds ...gen.Condition) IFbSportsMatchTopicDo
	Order(conds ...field.Expr) IFbSportsMatchTopicDo
	Distinct(cols ...field.Expr) IFbSportsMatchTopicDo
	Omit(cols ...field.Expr) IFbSportsMatchTopicDo
	Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchTopicDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchTopicDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchTopicDo
	Group(cols ...field.Expr) IFbSportsMatchTopicDo
	Having(conds ...gen.Condition) IFbSportsMatchTopicDo
	Limit(limit int) IFbSportsMatchTopicDo
	Offset(offset int) IFbSportsMatchTopicDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchTopicDo
	Unscoped() IFbSportsMatchTopicDo
	Create(values ...*model.FbSportsMatchTopic) error
	CreateInBatches(values []*model.FbSportsMatchTopic, batchSize int) error
	Save(values ...*model.FbSportsMatchTopic) error
	First() (*model.FbSportsMatchTopic, error)
	Take() (*model.FbSportsMatchTopic, error)
	Last() (*model.FbSportsMatchTopic, error)
	Find() ([]*model.FbSportsMatchTopic, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchTopic, err error)
	FindInBatches(result *[]*model.FbSportsMatchTopic, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbSportsMatchTopic) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbSportsMatchTopicDo
	Assign(attrs ...field.AssignExpr) IFbSportsMatchTopicDo
	Joins(fields ...field.RelationField) IFbSportsMatchTopicDo
	Preload(fields ...field.RelationField) IFbSportsMatchTopicDo
	FirstOrInit() (*model.FbSportsMatchTopic, error)
	FirstOrCreate() (*model.FbSportsMatchTopic, error)
	FindByPage(offset int, limit int) (result []*model.FbSportsMatchTopic, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbSportsMatchTopicDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbSportsMatchTopicDo) Debug() IFbSportsMatchTopicDo {
	return f.withDO(f.DO.Debug())
}

func (f fbSportsMatchTopicDo) WithContext(ctx context.Context) IFbSportsMatchTopicDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbSportsMatchTopicDo) ReadDB() IFbSportsMatchTopicDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbSportsMatchTopicDo) WriteDB() IFbSportsMatchTopicDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbSportsMatchTopicDo) Session(config *gorm.Session) IFbSportsMatchTopicDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbSportsMatchTopicDo) Clauses(conds ...clause.Expression) IFbSportsMatchTopicDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbSportsMatchTopicDo) Returning(value interface{}, columns ...string) IFbSportsMatchTopicDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbSportsMatchTopicDo) Not(conds ...gen.Condition) IFbSportsMatchTopicDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbSportsMatchTopicDo) Or(conds ...gen.Condition) IFbSportsMatchTopicDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbSportsMatchTopicDo) Select(conds ...field.Expr) IFbSportsMatchTopicDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbSportsMatchTopicDo) Where(conds ...gen.Condition) IFbSportsMatchTopicDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbSportsMatchTopicDo) Order(conds ...field.Expr) IFbSportsMatchTopicDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbSportsMatchTopicDo) Distinct(cols ...field.Expr) IFbSportsMatchTopicDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbSportsMatchTopicDo) Omit(cols ...field.Expr) IFbSportsMatchTopicDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbSportsMatchTopicDo) Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchTopicDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbSportsMatchTopicDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchTopicDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbSportsMatchTopicDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchTopicDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbSportsMatchTopicDo) Group(cols ...field.Expr) IFbSportsMatchTopicDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbSportsMatchTopicDo) Having(conds ...gen.Condition) IFbSportsMatchTopicDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbSportsMatchTopicDo) Limit(limit int) IFbSportsMatchTopicDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbSportsMatchTopicDo) Offset(offset int) IFbSportsMatchTopicDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbSportsMatchTopicDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchTopicDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbSportsMatchTopicDo) Unscoped() IFbSportsMatchTopicDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbSportsMatchTopicDo) Create(values ...*model.FbSportsMatchTopic) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbSportsMatchTopicDo) CreateInBatches(values []*model.FbSportsMatchTopic, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbSportsMatchTopicDo) Save(values ...*model.FbSportsMatchTopic) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbSportsMatchTopicDo) First() (*model.FbSportsMatchTopic, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchTopic), nil
	}
}

func (f fbSportsMatchTopicDo) Take() (*model.FbSportsMatchTopic, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchTopic), nil
	}
}

func (f fbSportsMatchTopicDo) Last() (*model.FbSportsMatchTopic, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchTopic), nil
	}
}

func (f fbSportsMatchTopicDo) Find() ([]*model.FbSportsMatchTopic, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbSportsMatchTopic), err
}

func (f fbSportsMatchTopicDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchTopic, err error) {
	buf := make([]*model.FbSportsMatchTopic, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbSportsMatchTopicDo) FindInBatches(result *[]*model.FbSportsMatchTopic, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbSportsMatchTopicDo) Attrs(attrs ...field.AssignExpr) IFbSportsMatchTopicDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbSportsMatchTopicDo) Assign(attrs ...field.AssignExpr) IFbSportsMatchTopicDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbSportsMatchTopicDo) Joins(fields ...field.RelationField) IFbSportsMatchTopicDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbSportsMatchTopicDo) Preload(fields ...field.RelationField) IFbSportsMatchTopicDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbSportsMatchTopicDo) FirstOrInit() (*model.FbSportsMatchTopic, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchTopic), nil
	}
}

func (f fbSportsMatchTopicDo) FirstOrCreate() (*model.FbSportsMatchTopic, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchTopic), nil
	}
}

func (f fbSportsMatchTopicDo) FindByPage(offset int, limit int) (result []*model.FbSportsMatchTopic, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbSportsMatchTopicDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbSportsMatchTopicDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbSportsMatchTopicDo) Delete(models ...*model.FbSportsMatchTopic) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbSportsMatchTopicDo) withDO(do gen.Dao) *fbSportsMatchTopicDo {
	f.DO = *do.(*gen.DO)
	return f
}
