// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newActivityConditionChristma(db *gorm.DB, opts ...gen.DOOption) activityConditionChristma {
	_activityConditionChristma := activityConditionChristma{}

	_activityConditionChristma.activityConditionChristmaDo.UseDB(db, opts...)
	_activityConditionChristma.activityConditionChristmaDo.UseModel(&model.ActivityConditionChristma{})

	tableName := _activityConditionChristma.activityConditionChristmaDo.TableName()
	_activityConditionChristma.ALL = field.NewAsterisk(tableName)
	_activityConditionChristma.ID = field.NewInt64(tableName, "id")
	_activityConditionChristma.ActivityID = field.NewInt64(tableName, "activity_id")
	_activityConditionChristma.CompletionPeriodHours = field.NewInt64(tableName, "completion_period_hours")
	_activityConditionChristma.MaxClaimPerDay = field.NewInt64(tableName, "max_claim_per_day")
	_activityConditionChristma.FirstStage = field.NewInt64(tableName, "first_stage")
	_activityConditionChristma.SecondStage = field.NewInt64(tableName, "second_stage")
	_activityConditionChristma.ThirdStage = field.NewInt64(tableName, "third_stage")
	_activityConditionChristma.FourthStage = field.NewInt64(tableName, "fourth_stage")
	_activityConditionChristma.StageThreshold = field.NewInt64(tableName, "stage_threshold")
	_activityConditionChristma.StageReminderMessages = field.NewString(tableName, "stage_reminder_messages")
	_activityConditionChristma.RegisterAmount = field.NewField(tableName, "register_amount")
	_activityConditionChristma.NewSupportPointsRangeFrom = field.NewField(tableName, "new_support_points_range_from")
	_activityConditionChristma.NewSupportPointsRangeTo = field.NewField(tableName, "new_support_points_range_to")
	_activityConditionChristma.OldSupportPointsRangeFrom = field.NewField(tableName, "old_support_points_range_from")
	_activityConditionChristma.OldSupportPointsRangeTo = field.NewField(tableName, "old_support_points_range_to")
	_activityConditionChristma.RequireScreenshot = field.NewInt64(tableName, "require_screenshot")
	_activityConditionChristma.DailyJackpotThreshold = field.NewField(tableName, "daily_jackpot_threshold")
	_activityConditionChristma.TotalBudgetThreshold = field.NewField(tableName, "total_budget_threshold")
	_activityConditionChristma.KycRequired = field.NewInt64(tableName, "kyc_required")
	_activityConditionChristma.NewUserFirstSupportReward = field.NewField(tableName, "new_user_first_support_reward")
	_activityConditionChristma.DepositChannels = field.NewString(tableName, "deposit_channels")
	_activityConditionChristma.ClaimMethod = field.NewInt64(tableName, "claim_method")
	_activityConditionChristma.IsAgentActive = field.NewInt64(tableName, "is_agent_active")
	_activityConditionChristma.SpecificAgents = field.NewInt64(tableName, "specific_agents")
	_activityConditionChristma.InviteCodes = field.NewString(tableName, "invite_codes")
	_activityConditionChristma.CreateAt = field.NewInt64(tableName, "create_at")
	_activityConditionChristma.UpdateAt = field.NewInt64(tableName, "update_at")
	_activityConditionChristma.OpUser = field.NewString(tableName, "op_user")

	_activityConditionChristma.fillFieldMap()

	return _activityConditionChristma
}

// activityConditionChristma 圣诞活动领取条件表
type activityConditionChristma struct {
	activityConditionChristmaDo

	ALL                       field.Asterisk
	ID                        field.Int64  // 规则ID，自增主键
	ActivityID                field.Int64  // 活动ID
	CompletionPeriodHours     field.Int64  // 礼盒完成周期（小时）
	MaxClaimPerDay            field.Int64  // 礼盒可领取次数（每天）
	FirstStage                field.Int64  // 第一阶段彩金配置
	SecondStage               field.Int64  // 第二阶段彩金配置
	ThirdStage                field.Int64  // 第三阶段彩金配置
	FourthStage               field.Int64  // 第四阶段彩金配置
	StageThreshold            field.Int64  // 各阶段在距离领取达到提示阈值
	StageReminderMessages     field.String // 各阶段在距离领取达到提示阈值提示消息
	RegisterAmount            field.Field  // 注册成本设定
	NewSupportPointsRangeFrom field.Field  // 新用户助力点数范围起
	NewSupportPointsRangeTo   field.Field  // 新用户助力点数范围止
	OldSupportPointsRangeFrom field.Field  // 老用户助力点数范围起
	OldSupportPointsRangeTo   field.Field  // 老用户助力点数范围止
	RequireScreenshot         field.Int64  // 是否需上传分享截图，0表示否，1表示是
	DailyJackpotThreshold     field.Field  // 单日彩金上限告警阈值
	TotalBudgetThreshold      field.Field  // 活动总预算告警阈值
	KycRequired               field.Int64  // 助力玩家是否KYC认证，0表示否，1表示是
	NewUserFirstSupportReward field.Field  // 新用户首次助力成功奖励
	DepositChannels           field.String // 关联存款渠道：0-全部
	ClaimMethod               field.Int64  // 领取方式，0表示自动领取，1表示手动领取
	IsAgentActive             field.Int64  // 是否代理线活动，0表示否，1表示是
	SpecificAgents            field.Int64  // 指定代理线:0表示否，1表示是
	InviteCodes               field.String // 指定代理邀请码,使用,好分割
	CreateAt                  field.Int64  // 创建时间
	UpdateAt                  field.Int64  // 修改时间
	OpUser                    field.String // 操作人

	fieldMap map[string]field.Expr
}

func (a activityConditionChristma) Table(newTableName string) *activityConditionChristma {
	a.activityConditionChristmaDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activityConditionChristma) As(alias string) *activityConditionChristma {
	a.activityConditionChristmaDo.DO = *(a.activityConditionChristmaDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activityConditionChristma) updateTableName(table string) *activityConditionChristma {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ActivityID = field.NewInt64(table, "activity_id")
	a.CompletionPeriodHours = field.NewInt64(table, "completion_period_hours")
	a.MaxClaimPerDay = field.NewInt64(table, "max_claim_per_day")
	a.FirstStage = field.NewInt64(table, "first_stage")
	a.SecondStage = field.NewInt64(table, "second_stage")
	a.ThirdStage = field.NewInt64(table, "third_stage")
	a.FourthStage = field.NewInt64(table, "fourth_stage")
	a.StageThreshold = field.NewInt64(table, "stage_threshold")
	a.StageReminderMessages = field.NewString(table, "stage_reminder_messages")
	a.RegisterAmount = field.NewField(table, "register_amount")
	a.NewSupportPointsRangeFrom = field.NewField(table, "new_support_points_range_from")
	a.NewSupportPointsRangeTo = field.NewField(table, "new_support_points_range_to")
	a.OldSupportPointsRangeFrom = field.NewField(table, "old_support_points_range_from")
	a.OldSupportPointsRangeTo = field.NewField(table, "old_support_points_range_to")
	a.RequireScreenshot = field.NewInt64(table, "require_screenshot")
	a.DailyJackpotThreshold = field.NewField(table, "daily_jackpot_threshold")
	a.TotalBudgetThreshold = field.NewField(table, "total_budget_threshold")
	a.KycRequired = field.NewInt64(table, "kyc_required")
	a.NewUserFirstSupportReward = field.NewField(table, "new_user_first_support_reward")
	a.DepositChannels = field.NewString(table, "deposit_channels")
	a.ClaimMethod = field.NewInt64(table, "claim_method")
	a.IsAgentActive = field.NewInt64(table, "is_agent_active")
	a.SpecificAgents = field.NewInt64(table, "specific_agents")
	a.InviteCodes = field.NewString(table, "invite_codes")
	a.CreateAt = field.NewInt64(table, "create_at")
	a.UpdateAt = field.NewInt64(table, "update_at")
	a.OpUser = field.NewString(table, "op_user")

	a.fillFieldMap()

	return a
}

func (a *activityConditionChristma) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activityConditionChristma) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 28)
	a.fieldMap["id"] = a.ID
	a.fieldMap["activity_id"] = a.ActivityID
	a.fieldMap["completion_period_hours"] = a.CompletionPeriodHours
	a.fieldMap["max_claim_per_day"] = a.MaxClaimPerDay
	a.fieldMap["first_stage"] = a.FirstStage
	a.fieldMap["second_stage"] = a.SecondStage
	a.fieldMap["third_stage"] = a.ThirdStage
	a.fieldMap["fourth_stage"] = a.FourthStage
	a.fieldMap["stage_threshold"] = a.StageThreshold
	a.fieldMap["stage_reminder_messages"] = a.StageReminderMessages
	a.fieldMap["register_amount"] = a.RegisterAmount
	a.fieldMap["new_support_points_range_from"] = a.NewSupportPointsRangeFrom
	a.fieldMap["new_support_points_range_to"] = a.NewSupportPointsRangeTo
	a.fieldMap["old_support_points_range_from"] = a.OldSupportPointsRangeFrom
	a.fieldMap["old_support_points_range_to"] = a.OldSupportPointsRangeTo
	a.fieldMap["require_screenshot"] = a.RequireScreenshot
	a.fieldMap["daily_jackpot_threshold"] = a.DailyJackpotThreshold
	a.fieldMap["total_budget_threshold"] = a.TotalBudgetThreshold
	a.fieldMap["kyc_required"] = a.KycRequired
	a.fieldMap["new_user_first_support_reward"] = a.NewUserFirstSupportReward
	a.fieldMap["deposit_channels"] = a.DepositChannels
	a.fieldMap["claim_method"] = a.ClaimMethod
	a.fieldMap["is_agent_active"] = a.IsAgentActive
	a.fieldMap["specific_agents"] = a.SpecificAgents
	a.fieldMap["invite_codes"] = a.InviteCodes
	a.fieldMap["create_at"] = a.CreateAt
	a.fieldMap["update_at"] = a.UpdateAt
	a.fieldMap["op_user"] = a.OpUser
}

func (a activityConditionChristma) clone(db *gorm.DB) activityConditionChristma {
	a.activityConditionChristmaDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activityConditionChristma) replaceDB(db *gorm.DB) activityConditionChristma {
	a.activityConditionChristmaDo.ReplaceDB(db)
	return a
}

type activityConditionChristmaDo struct{ gen.DO }

type IActivityConditionChristmaDo interface {
	gen.SubQuery
	Debug() IActivityConditionChristmaDo
	WithContext(ctx context.Context) IActivityConditionChristmaDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivityConditionChristmaDo
	WriteDB() IActivityConditionChristmaDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivityConditionChristmaDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivityConditionChristmaDo
	Not(conds ...gen.Condition) IActivityConditionChristmaDo
	Or(conds ...gen.Condition) IActivityConditionChristmaDo
	Select(conds ...field.Expr) IActivityConditionChristmaDo
	Where(conds ...gen.Condition) IActivityConditionChristmaDo
	Order(conds ...field.Expr) IActivityConditionChristmaDo
	Distinct(cols ...field.Expr) IActivityConditionChristmaDo
	Omit(cols ...field.Expr) IActivityConditionChristmaDo
	Join(table schema.Tabler, on ...field.Expr) IActivityConditionChristmaDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivityConditionChristmaDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActivityConditionChristmaDo
	Group(cols ...field.Expr) IActivityConditionChristmaDo
	Having(conds ...gen.Condition) IActivityConditionChristmaDo
	Limit(limit int) IActivityConditionChristmaDo
	Offset(offset int) IActivityConditionChristmaDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityConditionChristmaDo
	Unscoped() IActivityConditionChristmaDo
	Create(values ...*model.ActivityConditionChristma) error
	CreateInBatches(values []*model.ActivityConditionChristma, batchSize int) error
	Save(values ...*model.ActivityConditionChristma) error
	First() (*model.ActivityConditionChristma, error)
	Take() (*model.ActivityConditionChristma, error)
	Last() (*model.ActivityConditionChristma, error)
	Find() ([]*model.ActivityConditionChristma, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityConditionChristma, err error)
	FindInBatches(result *[]*model.ActivityConditionChristma, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActivityConditionChristma) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivityConditionChristmaDo
	Assign(attrs ...field.AssignExpr) IActivityConditionChristmaDo
	Joins(fields ...field.RelationField) IActivityConditionChristmaDo
	Preload(fields ...field.RelationField) IActivityConditionChristmaDo
	FirstOrInit() (*model.ActivityConditionChristma, error)
	FirstOrCreate() (*model.ActivityConditionChristma, error)
	FindByPage(offset int, limit int) (result []*model.ActivityConditionChristma, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivityConditionChristmaDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activityConditionChristmaDo) Debug() IActivityConditionChristmaDo {
	return a.withDO(a.DO.Debug())
}

func (a activityConditionChristmaDo) WithContext(ctx context.Context) IActivityConditionChristmaDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityConditionChristmaDo) ReadDB() IActivityConditionChristmaDo {
	return a.Clauses(dbresolver.Read)
}

func (a activityConditionChristmaDo) WriteDB() IActivityConditionChristmaDo {
	return a.Clauses(dbresolver.Write)
}

func (a activityConditionChristmaDo) Session(config *gorm.Session) IActivityConditionChristmaDo {
	return a.withDO(a.DO.Session(config))
}

func (a activityConditionChristmaDo) Clauses(conds ...clause.Expression) IActivityConditionChristmaDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityConditionChristmaDo) Returning(value interface{}, columns ...string) IActivityConditionChristmaDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityConditionChristmaDo) Not(conds ...gen.Condition) IActivityConditionChristmaDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityConditionChristmaDo) Or(conds ...gen.Condition) IActivityConditionChristmaDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityConditionChristmaDo) Select(conds ...field.Expr) IActivityConditionChristmaDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityConditionChristmaDo) Where(conds ...gen.Condition) IActivityConditionChristmaDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityConditionChristmaDo) Order(conds ...field.Expr) IActivityConditionChristmaDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityConditionChristmaDo) Distinct(cols ...field.Expr) IActivityConditionChristmaDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityConditionChristmaDo) Omit(cols ...field.Expr) IActivityConditionChristmaDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityConditionChristmaDo) Join(table schema.Tabler, on ...field.Expr) IActivityConditionChristmaDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityConditionChristmaDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActivityConditionChristmaDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityConditionChristmaDo) RightJoin(table schema.Tabler, on ...field.Expr) IActivityConditionChristmaDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityConditionChristmaDo) Group(cols ...field.Expr) IActivityConditionChristmaDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityConditionChristmaDo) Having(conds ...gen.Condition) IActivityConditionChristmaDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityConditionChristmaDo) Limit(limit int) IActivityConditionChristmaDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityConditionChristmaDo) Offset(offset int) IActivityConditionChristmaDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityConditionChristmaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityConditionChristmaDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityConditionChristmaDo) Unscoped() IActivityConditionChristmaDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activityConditionChristmaDo) Create(values ...*model.ActivityConditionChristma) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityConditionChristmaDo) CreateInBatches(values []*model.ActivityConditionChristma, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityConditionChristmaDo) Save(values ...*model.ActivityConditionChristma) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityConditionChristmaDo) First() (*model.ActivityConditionChristma, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityConditionChristma), nil
	}
}

func (a activityConditionChristmaDo) Take() (*model.ActivityConditionChristma, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityConditionChristma), nil
	}
}

func (a activityConditionChristmaDo) Last() (*model.ActivityConditionChristma, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityConditionChristma), nil
	}
}

func (a activityConditionChristmaDo) Find() ([]*model.ActivityConditionChristma, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivityConditionChristma), err
}

func (a activityConditionChristmaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityConditionChristma, err error) {
	buf := make([]*model.ActivityConditionChristma, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityConditionChristmaDo) FindInBatches(result *[]*model.ActivityConditionChristma, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityConditionChristmaDo) Attrs(attrs ...field.AssignExpr) IActivityConditionChristmaDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityConditionChristmaDo) Assign(attrs ...field.AssignExpr) IActivityConditionChristmaDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityConditionChristmaDo) Joins(fields ...field.RelationField) IActivityConditionChristmaDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityConditionChristmaDo) Preload(fields ...field.RelationField) IActivityConditionChristmaDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityConditionChristmaDo) FirstOrInit() (*model.ActivityConditionChristma, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityConditionChristma), nil
	}
}

func (a activityConditionChristmaDo) FirstOrCreate() (*model.ActivityConditionChristma, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityConditionChristma), nil
	}
}

func (a activityConditionChristmaDo) FindByPage(offset int, limit int) (result []*model.ActivityConditionChristma, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityConditionChristmaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityConditionChristmaDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityConditionChristmaDo) Delete(models ...*model.ActivityConditionChristma) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityConditionChristmaDo) withDO(do gen.Dao) *activityConditionChristmaDo {
	a.DO = *do.(*gen.DO)
	return a
}
