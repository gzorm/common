// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/common/zorm/model"
)

func newWinDailyTax(db *gorm.DB, opts ...gen.DOOption) winDailyTax {
	_winDailyTax := winDailyTax{}

	_winDailyTax.winDailyTaxDo.UseDB(db, opts...)
	_winDailyTax.winDailyTaxDo.UseModel(&model.WinDailyTax{})

	tableName := _winDailyTax.winDailyTaxDo.TableName()
	_winDailyTax.ALL = field.NewAsterisk(tableName)
	_winDailyTax.ID = field.NewInt64(tableName, "id")
	_winDailyTax.ProviderSubtypeID = field.NewInt64(tableName, "provider_subtype_id")
	_winDailyTax.ProviderSubtypeName = field.NewString(tableName, "provider_subtype_name")
	_winDailyTax.BetAmount = field.NewField(tableName, "bet_amount")
	_winDailyTax.ValidBetAmount = field.NewField(tableName, "valid_bet_amount")
	_winDailyTax.PayoutAmount = field.NewField(tableName, "payout_amount")
	_winDailyTax.WinLoseAmount = field.NewField(tableName, "win_lose_amount")
	_winDailyTax.CreatedAt = field.NewInt64(tableName, "created_at")
	_winDailyTax.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_winDailyTax.UpdatedBy = field.NewString(tableName, "updated_by")

	_winDailyTax.fillFieldMap()

	return _winDailyTax
}

// winDailyTax 每日税收统计
type winDailyTax struct {
	winDailyTaxDo

	ALL                 field.Asterisk
	ID                  field.Int64  // ID
	ProviderSubtypeID   field.Int64  // 厂商游戏类型表ID
	ProviderSubtypeName field.String // 厂商游戏类型名称
	BetAmount           field.Field  // 投注金额
	ValidBetAmount      field.Field  // 有效投注金额
	PayoutAmount        field.Field  // 派彩金额
	WinLoseAmount       field.Field  // 负盈利金额
	CreatedAt           field.Int64  // 创建时间
	UpdatedAt           field.Int64  // 修改时间
	UpdatedBy           field.String // 最后更新人

	fieldMap map[string]field.Expr
}

func (w winDailyTax) Table(newTableName string) *winDailyTax {
	w.winDailyTaxDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winDailyTax) As(alias string) *winDailyTax {
	w.winDailyTaxDo.DO = *(w.winDailyTaxDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winDailyTax) updateTableName(table string) *winDailyTax {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.ProviderSubtypeID = field.NewInt64(table, "provider_subtype_id")
	w.ProviderSubtypeName = field.NewString(table, "provider_subtype_name")
	w.BetAmount = field.NewField(table, "bet_amount")
	w.ValidBetAmount = field.NewField(table, "valid_bet_amount")
	w.PayoutAmount = field.NewField(table, "payout_amount")
	w.WinLoseAmount = field.NewField(table, "win_lose_amount")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")
	w.UpdatedBy = field.NewString(table, "updated_by")

	w.fillFieldMap()

	return w
}

func (w *winDailyTax) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winDailyTax) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 10)
	w.fieldMap["id"] = w.ID
	w.fieldMap["provider_subtype_id"] = w.ProviderSubtypeID
	w.fieldMap["provider_subtype_name"] = w.ProviderSubtypeName
	w.fieldMap["bet_amount"] = w.BetAmount
	w.fieldMap["valid_bet_amount"] = w.ValidBetAmount
	w.fieldMap["payout_amount"] = w.PayoutAmount
	w.fieldMap["win_lose_amount"] = w.WinLoseAmount
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["updated_by"] = w.UpdatedBy
}

func (w winDailyTax) clone(db *gorm.DB) winDailyTax {
	w.winDailyTaxDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winDailyTax) replaceDB(db *gorm.DB) winDailyTax {
	w.winDailyTaxDo.ReplaceDB(db)
	return w
}

type winDailyTaxDo struct{ gen.DO }

type IWinDailyTaxDo interface {
	gen.SubQuery
	Debug() IWinDailyTaxDo
	WithContext(ctx context.Context) IWinDailyTaxDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinDailyTaxDo
	WriteDB() IWinDailyTaxDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinDailyTaxDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinDailyTaxDo
	Not(conds ...gen.Condition) IWinDailyTaxDo
	Or(conds ...gen.Condition) IWinDailyTaxDo
	Select(conds ...field.Expr) IWinDailyTaxDo
	Where(conds ...gen.Condition) IWinDailyTaxDo
	Order(conds ...field.Expr) IWinDailyTaxDo
	Distinct(cols ...field.Expr) IWinDailyTaxDo
	Omit(cols ...field.Expr) IWinDailyTaxDo
	Join(table schema.Tabler, on ...field.Expr) IWinDailyTaxDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinDailyTaxDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinDailyTaxDo
	Group(cols ...field.Expr) IWinDailyTaxDo
	Having(conds ...gen.Condition) IWinDailyTaxDo
	Limit(limit int) IWinDailyTaxDo
	Offset(offset int) IWinDailyTaxDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinDailyTaxDo
	Unscoped() IWinDailyTaxDo
	Create(values ...*model.WinDailyTax) error
	CreateInBatches(values []*model.WinDailyTax, batchSize int) error
	Save(values ...*model.WinDailyTax) error
	First() (*model.WinDailyTax, error)
	Take() (*model.WinDailyTax, error)
	Last() (*model.WinDailyTax, error)
	Find() ([]*model.WinDailyTax, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinDailyTax, err error)
	FindInBatches(result *[]*model.WinDailyTax, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinDailyTax) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinDailyTaxDo
	Assign(attrs ...field.AssignExpr) IWinDailyTaxDo
	Joins(fields ...field.RelationField) IWinDailyTaxDo
	Preload(fields ...field.RelationField) IWinDailyTaxDo
	FirstOrInit() (*model.WinDailyTax, error)
	FirstOrCreate() (*model.WinDailyTax, error)
	FindByPage(offset int, limit int) (result []*model.WinDailyTax, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinDailyTaxDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winDailyTaxDo) Debug() IWinDailyTaxDo {
	return w.withDO(w.DO.Debug())
}

func (w winDailyTaxDo) WithContext(ctx context.Context) IWinDailyTaxDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winDailyTaxDo) ReadDB() IWinDailyTaxDo {
	return w.Clauses(dbresolver.Read)
}

func (w winDailyTaxDo) WriteDB() IWinDailyTaxDo {
	return w.Clauses(dbresolver.Write)
}

func (w winDailyTaxDo) Session(config *gorm.Session) IWinDailyTaxDo {
	return w.withDO(w.DO.Session(config))
}

func (w winDailyTaxDo) Clauses(conds ...clause.Expression) IWinDailyTaxDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winDailyTaxDo) Returning(value interface{}, columns ...string) IWinDailyTaxDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winDailyTaxDo) Not(conds ...gen.Condition) IWinDailyTaxDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winDailyTaxDo) Or(conds ...gen.Condition) IWinDailyTaxDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winDailyTaxDo) Select(conds ...field.Expr) IWinDailyTaxDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winDailyTaxDo) Where(conds ...gen.Condition) IWinDailyTaxDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winDailyTaxDo) Order(conds ...field.Expr) IWinDailyTaxDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winDailyTaxDo) Distinct(cols ...field.Expr) IWinDailyTaxDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winDailyTaxDo) Omit(cols ...field.Expr) IWinDailyTaxDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winDailyTaxDo) Join(table schema.Tabler, on ...field.Expr) IWinDailyTaxDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winDailyTaxDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinDailyTaxDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winDailyTaxDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinDailyTaxDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winDailyTaxDo) Group(cols ...field.Expr) IWinDailyTaxDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winDailyTaxDo) Having(conds ...gen.Condition) IWinDailyTaxDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winDailyTaxDo) Limit(limit int) IWinDailyTaxDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winDailyTaxDo) Offset(offset int) IWinDailyTaxDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winDailyTaxDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinDailyTaxDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winDailyTaxDo) Unscoped() IWinDailyTaxDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winDailyTaxDo) Create(values ...*model.WinDailyTax) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winDailyTaxDo) CreateInBatches(values []*model.WinDailyTax, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winDailyTaxDo) Save(values ...*model.WinDailyTax) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winDailyTaxDo) First() (*model.WinDailyTax, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinDailyTax), nil
	}
}

func (w winDailyTaxDo) Take() (*model.WinDailyTax, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinDailyTax), nil
	}
}

func (w winDailyTaxDo) Last() (*model.WinDailyTax, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinDailyTax), nil
	}
}

func (w winDailyTaxDo) Find() ([]*model.WinDailyTax, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinDailyTax), err
}

func (w winDailyTaxDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinDailyTax, err error) {
	buf := make([]*model.WinDailyTax, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winDailyTaxDo) FindInBatches(result *[]*model.WinDailyTax, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winDailyTaxDo) Attrs(attrs ...field.AssignExpr) IWinDailyTaxDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winDailyTaxDo) Assign(attrs ...field.AssignExpr) IWinDailyTaxDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winDailyTaxDo) Joins(fields ...field.RelationField) IWinDailyTaxDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winDailyTaxDo) Preload(fields ...field.RelationField) IWinDailyTaxDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winDailyTaxDo) FirstOrInit() (*model.WinDailyTax, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinDailyTax), nil
	}
}

func (w winDailyTaxDo) FirstOrCreate() (*model.WinDailyTax, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinDailyTax), nil
	}
}

func (w winDailyTaxDo) FindByPage(offset int, limit int) (result []*model.WinDailyTax, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winDailyTaxDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winDailyTaxDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winDailyTaxDo) Delete(models ...*model.WinDailyTax) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winDailyTaxDo) withDO(do gen.Dao) *winDailyTaxDo {
	w.DO = *do.(*gen.DO)
	return w
}
