// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newFbSportsMatchStatisticsMarketTypeTps(db *gorm.DB, opts ...gen.DOOption) fbSportsMatchStatisticsMarketTypeTps {
	_fbSportsMatchStatisticsMarketTypeTps := fbSportsMatchStatisticsMarketTypeTps{}

	_fbSportsMatchStatisticsMarketTypeTps.fbSportsMatchStatisticsMarketTypeTpsDo.UseDB(db, opts...)
	_fbSportsMatchStatisticsMarketTypeTps.fbSportsMatchStatisticsMarketTypeTpsDo.UseModel(&model.FbSportsMatchStatisticsMarketTypeTps{})

	tableName := _fbSportsMatchStatisticsMarketTypeTps.fbSportsMatchStatisticsMarketTypeTpsDo.TableName()
	_fbSportsMatchStatisticsMarketTypeTps.ALL = field.NewAsterisk(tableName)
	_fbSportsMatchStatisticsMarketTypeTps.ID = field.NewInt64(tableName, "id")
	_fbSportsMatchStatisticsMarketTypeTps.MarketStatisticsID = field.NewInt64(tableName, "market_statistics_id")
	_fbSportsMatchStatisticsMarketTypeTps.GroupType = field.NewInt64(tableName, "group_type")
	_fbSportsMatchStatisticsMarketTypeTps.MatchTotal = field.NewInt64(tableName, "match_total")
	_fbSportsMatchStatisticsMarketTypeTps.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbSportsMatchStatisticsMarketTypeTps.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_fbSportsMatchStatisticsMarketTypeTps.fillFieldMap()

	return _fbSportsMatchStatisticsMarketTypeTps
}

// fbSportsMatchStatisticsMarketTypeTps 存储分组类型及赛事统计信息
type fbSportsMatchStatisticsMarketTypeTps struct {
	fbSportsMatchStatisticsMarketTypeTpsDo

	ALL                field.Asterisk
	ID                 field.Int64 // 主键ID
	MarketStatisticsID field.Int64 // 关联盘口统计表的 ID（对应 fb_sports_match_statistics_market_type.id）
	GroupType          field.Int64 // 赛事分组类型（对应 tps.tp，枚举 match_play_type）
	MatchTotal         field.Int64 // 赛事总数（对应 tps.mt）
	CreatedAt          field.Int64 // 记录创建时间（时间戳）
	UpdatedAt          field.Int64 // 记录更新时间（时间戳）

	fieldMap map[string]field.Expr
}

func (f fbSportsMatchStatisticsMarketTypeTps) Table(newTableName string) *fbSportsMatchStatisticsMarketTypeTps {
	f.fbSportsMatchStatisticsMarketTypeTpsDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbSportsMatchStatisticsMarketTypeTps) As(alias string) *fbSportsMatchStatisticsMarketTypeTps {
	f.fbSportsMatchStatisticsMarketTypeTpsDo.DO = *(f.fbSportsMatchStatisticsMarketTypeTpsDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbSportsMatchStatisticsMarketTypeTps) updateTableName(table string) *fbSportsMatchStatisticsMarketTypeTps {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.MarketStatisticsID = field.NewInt64(table, "market_statistics_id")
	f.GroupType = field.NewInt64(table, "group_type")
	f.MatchTotal = field.NewInt64(table, "match_total")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fbSportsMatchStatisticsMarketTypeTps) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbSportsMatchStatisticsMarketTypeTps) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["id"] = f.ID
	f.fieldMap["market_statistics_id"] = f.MarketStatisticsID
	f.fieldMap["group_type"] = f.GroupType
	f.fieldMap["match_total"] = f.MatchTotal
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fbSportsMatchStatisticsMarketTypeTps) clone(db *gorm.DB) fbSportsMatchStatisticsMarketTypeTps {
	f.fbSportsMatchStatisticsMarketTypeTpsDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbSportsMatchStatisticsMarketTypeTps) replaceDB(db *gorm.DB) fbSportsMatchStatisticsMarketTypeTps {
	f.fbSportsMatchStatisticsMarketTypeTpsDo.ReplaceDB(db)
	return f
}

type fbSportsMatchStatisticsMarketTypeTpsDo struct{ gen.DO }

type IFbSportsMatchStatisticsMarketTypeTpsDo interface {
	gen.SubQuery
	Debug() IFbSportsMatchStatisticsMarketTypeTpsDo
	WithContext(ctx context.Context) IFbSportsMatchStatisticsMarketTypeTpsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbSportsMatchStatisticsMarketTypeTpsDo
	WriteDB() IFbSportsMatchStatisticsMarketTypeTpsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbSportsMatchStatisticsMarketTypeTpsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbSportsMatchStatisticsMarketTypeTpsDo
	Not(conds ...gen.Condition) IFbSportsMatchStatisticsMarketTypeTpsDo
	Or(conds ...gen.Condition) IFbSportsMatchStatisticsMarketTypeTpsDo
	Select(conds ...field.Expr) IFbSportsMatchStatisticsMarketTypeTpsDo
	Where(conds ...gen.Condition) IFbSportsMatchStatisticsMarketTypeTpsDo
	Order(conds ...field.Expr) IFbSportsMatchStatisticsMarketTypeTpsDo
	Distinct(cols ...field.Expr) IFbSportsMatchStatisticsMarketTypeTpsDo
	Omit(cols ...field.Expr) IFbSportsMatchStatisticsMarketTypeTpsDo
	Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchStatisticsMarketTypeTpsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchStatisticsMarketTypeTpsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchStatisticsMarketTypeTpsDo
	Group(cols ...field.Expr) IFbSportsMatchStatisticsMarketTypeTpsDo
	Having(conds ...gen.Condition) IFbSportsMatchStatisticsMarketTypeTpsDo
	Limit(limit int) IFbSportsMatchStatisticsMarketTypeTpsDo
	Offset(offset int) IFbSportsMatchStatisticsMarketTypeTpsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchStatisticsMarketTypeTpsDo
	Unscoped() IFbSportsMatchStatisticsMarketTypeTpsDo
	Create(values ...*model.FbSportsMatchStatisticsMarketTypeTps) error
	CreateInBatches(values []*model.FbSportsMatchStatisticsMarketTypeTps, batchSize int) error
	Save(values ...*model.FbSportsMatchStatisticsMarketTypeTps) error
	First() (*model.FbSportsMatchStatisticsMarketTypeTps, error)
	Take() (*model.FbSportsMatchStatisticsMarketTypeTps, error)
	Last() (*model.FbSportsMatchStatisticsMarketTypeTps, error)
	Find() ([]*model.FbSportsMatchStatisticsMarketTypeTps, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchStatisticsMarketTypeTps, err error)
	FindInBatches(result *[]*model.FbSportsMatchStatisticsMarketTypeTps, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbSportsMatchStatisticsMarketTypeTps) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbSportsMatchStatisticsMarketTypeTpsDo
	Assign(attrs ...field.AssignExpr) IFbSportsMatchStatisticsMarketTypeTpsDo
	Joins(fields ...field.RelationField) IFbSportsMatchStatisticsMarketTypeTpsDo
	Preload(fields ...field.RelationField) IFbSportsMatchStatisticsMarketTypeTpsDo
	FirstOrInit() (*model.FbSportsMatchStatisticsMarketTypeTps, error)
	FirstOrCreate() (*model.FbSportsMatchStatisticsMarketTypeTps, error)
	FindByPage(offset int, limit int) (result []*model.FbSportsMatchStatisticsMarketTypeTps, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbSportsMatchStatisticsMarketTypeTpsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Debug() IFbSportsMatchStatisticsMarketTypeTpsDo {
	return f.withDO(f.DO.Debug())
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) WithContext(ctx context.Context) IFbSportsMatchStatisticsMarketTypeTpsDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) ReadDB() IFbSportsMatchStatisticsMarketTypeTpsDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) WriteDB() IFbSportsMatchStatisticsMarketTypeTpsDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Session(config *gorm.Session) IFbSportsMatchStatisticsMarketTypeTpsDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Clauses(conds ...clause.Expression) IFbSportsMatchStatisticsMarketTypeTpsDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Returning(value interface{}, columns ...string) IFbSportsMatchStatisticsMarketTypeTpsDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Not(conds ...gen.Condition) IFbSportsMatchStatisticsMarketTypeTpsDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Or(conds ...gen.Condition) IFbSportsMatchStatisticsMarketTypeTpsDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Select(conds ...field.Expr) IFbSportsMatchStatisticsMarketTypeTpsDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Where(conds ...gen.Condition) IFbSportsMatchStatisticsMarketTypeTpsDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Order(conds ...field.Expr) IFbSportsMatchStatisticsMarketTypeTpsDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Distinct(cols ...field.Expr) IFbSportsMatchStatisticsMarketTypeTpsDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Omit(cols ...field.Expr) IFbSportsMatchStatisticsMarketTypeTpsDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchStatisticsMarketTypeTpsDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchStatisticsMarketTypeTpsDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchStatisticsMarketTypeTpsDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Group(cols ...field.Expr) IFbSportsMatchStatisticsMarketTypeTpsDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Having(conds ...gen.Condition) IFbSportsMatchStatisticsMarketTypeTpsDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Limit(limit int) IFbSportsMatchStatisticsMarketTypeTpsDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Offset(offset int) IFbSportsMatchStatisticsMarketTypeTpsDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchStatisticsMarketTypeTpsDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Unscoped() IFbSportsMatchStatisticsMarketTypeTpsDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Create(values ...*model.FbSportsMatchStatisticsMarketTypeTps) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) CreateInBatches(values []*model.FbSportsMatchStatisticsMarketTypeTps, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbSportsMatchStatisticsMarketTypeTpsDo) Save(values ...*model.FbSportsMatchStatisticsMarketTypeTps) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) First() (*model.FbSportsMatchStatisticsMarketTypeTps, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchStatisticsMarketTypeTps), nil
	}
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Take() (*model.FbSportsMatchStatisticsMarketTypeTps, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchStatisticsMarketTypeTps), nil
	}
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Last() (*model.FbSportsMatchStatisticsMarketTypeTps, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchStatisticsMarketTypeTps), nil
	}
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Find() ([]*model.FbSportsMatchStatisticsMarketTypeTps, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbSportsMatchStatisticsMarketTypeTps), err
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchStatisticsMarketTypeTps, err error) {
	buf := make([]*model.FbSportsMatchStatisticsMarketTypeTps, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) FindInBatches(result *[]*model.FbSportsMatchStatisticsMarketTypeTps, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Attrs(attrs ...field.AssignExpr) IFbSportsMatchStatisticsMarketTypeTpsDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Assign(attrs ...field.AssignExpr) IFbSportsMatchStatisticsMarketTypeTpsDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Joins(fields ...field.RelationField) IFbSportsMatchStatisticsMarketTypeTpsDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Preload(fields ...field.RelationField) IFbSportsMatchStatisticsMarketTypeTpsDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) FirstOrInit() (*model.FbSportsMatchStatisticsMarketTypeTps, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchStatisticsMarketTypeTps), nil
	}
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) FirstOrCreate() (*model.FbSportsMatchStatisticsMarketTypeTps, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchStatisticsMarketTypeTps), nil
	}
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) FindByPage(offset int, limit int) (result []*model.FbSportsMatchStatisticsMarketTypeTps, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbSportsMatchStatisticsMarketTypeTpsDo) Delete(models ...*model.FbSportsMatchStatisticsMarketTypeTps) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbSportsMatchStatisticsMarketTypeTpsDo) withDO(do gen.Dao) *fbSportsMatchStatisticsMarketTypeTpsDo {
	f.DO = *do.(*gen.DO)
	return f
}
