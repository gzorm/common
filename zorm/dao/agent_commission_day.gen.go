// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newAgentCommissionDay(db *gorm.DB, opts ...gen.DOOption) agentCommissionDay {
	_agentCommissionDay := agentCommissionDay{}

	_agentCommissionDay.agentCommissionDayDo.UseDB(db, opts...)
	_agentCommissionDay.agentCommissionDayDo.UseModel(&model.AgentCommissionDay{})

	tableName := _agentCommissionDay.agentCommissionDayDo.TableName()
	_agentCommissionDay.ALL = field.NewAsterisk(tableName)
	_agentCommissionDay.ID = field.NewInt64(tableName, "id")
	_agentCommissionDay.AgentID = field.NewInt64(tableName, "agent_id")
	_agentCommissionDay.AgentName = field.NewString(tableName, "agent_name")
	_agentCommissionDay.AgentLevelID = field.NewInt64(tableName, "agent_level_id")
	_agentCommissionDay.AgentLevelName = field.NewString(tableName, "agent_level_name")
	_agentCommissionDay.CommissionAmount = field.NewField(tableName, "commission_amount")
	_agentCommissionDay.CommissionYear = field.NewInt64(tableName, "commission_year")
	_agentCommissionDay.CommissionMonth = field.NewInt64(tableName, "commission_month")
	_agentCommissionDay.CommissionDay = field.NewInt64(tableName, "commission_day")
	_agentCommissionDay.LastOperator = field.NewString(tableName, "last_operator")
	_agentCommissionDay.LastOperationTime = field.NewInt64(tableName, "last_operation_time")
	_agentCommissionDay.CreateTime = field.NewInt64(tableName, "create_time")

	_agentCommissionDay.fillFieldMap()

	return _agentCommissionDay
}

// agentCommissionDay 代理商每天佣金统计
type agentCommissionDay struct {
	agentCommissionDayDo

	ALL               field.Asterisk
	ID                field.Int64  // 主键ID
	AgentID           field.Int64  // 代理商ID
	AgentName         field.String // 代理商名称
	AgentLevelID      field.Int64  // 代理商等级序号
	AgentLevelName    field.String // 代理商等级名称
	CommissionAmount  field.Field  // 当天佣金额度
	CommissionYear    field.Int64  // 年
	CommissionMonth   field.Int64  // 月
	CommissionDay     field.Int64  // 日
	LastOperator      field.String // 最后操作人
	LastOperationTime field.Int64  // 最后操作时间
	CreateTime        field.Int64  // 创建时间

	fieldMap map[string]field.Expr
}

func (a agentCommissionDay) Table(newTableName string) *agentCommissionDay {
	a.agentCommissionDayDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agentCommissionDay) As(alias string) *agentCommissionDay {
	a.agentCommissionDayDo.DO = *(a.agentCommissionDayDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agentCommissionDay) updateTableName(table string) *agentCommissionDay {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AgentID = field.NewInt64(table, "agent_id")
	a.AgentName = field.NewString(table, "agent_name")
	a.AgentLevelID = field.NewInt64(table, "agent_level_id")
	a.AgentLevelName = field.NewString(table, "agent_level_name")
	a.CommissionAmount = field.NewField(table, "commission_amount")
	a.CommissionYear = field.NewInt64(table, "commission_year")
	a.CommissionMonth = field.NewInt64(table, "commission_month")
	a.CommissionDay = field.NewInt64(table, "commission_day")
	a.LastOperator = field.NewString(table, "last_operator")
	a.LastOperationTime = field.NewInt64(table, "last_operation_time")
	a.CreateTime = field.NewInt64(table, "create_time")

	a.fillFieldMap()

	return a
}

func (a *agentCommissionDay) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agentCommissionDay) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 12)
	a.fieldMap["id"] = a.ID
	a.fieldMap["agent_id"] = a.AgentID
	a.fieldMap["agent_name"] = a.AgentName
	a.fieldMap["agent_level_id"] = a.AgentLevelID
	a.fieldMap["agent_level_name"] = a.AgentLevelName
	a.fieldMap["commission_amount"] = a.CommissionAmount
	a.fieldMap["commission_year"] = a.CommissionYear
	a.fieldMap["commission_month"] = a.CommissionMonth
	a.fieldMap["commission_day"] = a.CommissionDay
	a.fieldMap["last_operator"] = a.LastOperator
	a.fieldMap["last_operation_time"] = a.LastOperationTime
	a.fieldMap["create_time"] = a.CreateTime
}

func (a agentCommissionDay) clone(db *gorm.DB) agentCommissionDay {
	a.agentCommissionDayDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agentCommissionDay) replaceDB(db *gorm.DB) agentCommissionDay {
	a.agentCommissionDayDo.ReplaceDB(db)
	return a
}

type agentCommissionDayDo struct{ gen.DO }

type IAgentCommissionDayDo interface {
	gen.SubQuery
	Debug() IAgentCommissionDayDo
	WithContext(ctx context.Context) IAgentCommissionDayDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgentCommissionDayDo
	WriteDB() IAgentCommissionDayDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgentCommissionDayDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgentCommissionDayDo
	Not(conds ...gen.Condition) IAgentCommissionDayDo
	Or(conds ...gen.Condition) IAgentCommissionDayDo
	Select(conds ...field.Expr) IAgentCommissionDayDo
	Where(conds ...gen.Condition) IAgentCommissionDayDo
	Order(conds ...field.Expr) IAgentCommissionDayDo
	Distinct(cols ...field.Expr) IAgentCommissionDayDo
	Omit(cols ...field.Expr) IAgentCommissionDayDo
	Join(table schema.Tabler, on ...field.Expr) IAgentCommissionDayDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgentCommissionDayDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgentCommissionDayDo
	Group(cols ...field.Expr) IAgentCommissionDayDo
	Having(conds ...gen.Condition) IAgentCommissionDayDo
	Limit(limit int) IAgentCommissionDayDo
	Offset(offset int) IAgentCommissionDayDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentCommissionDayDo
	Unscoped() IAgentCommissionDayDo
	Create(values ...*model.AgentCommissionDay) error
	CreateInBatches(values []*model.AgentCommissionDay, batchSize int) error
	Save(values ...*model.AgentCommissionDay) error
	First() (*model.AgentCommissionDay, error)
	Take() (*model.AgentCommissionDay, error)
	Last() (*model.AgentCommissionDay, error)
	Find() ([]*model.AgentCommissionDay, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentCommissionDay, err error)
	FindInBatches(result *[]*model.AgentCommissionDay, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AgentCommissionDay) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgentCommissionDayDo
	Assign(attrs ...field.AssignExpr) IAgentCommissionDayDo
	Joins(fields ...field.RelationField) IAgentCommissionDayDo
	Preload(fields ...field.RelationField) IAgentCommissionDayDo
	FirstOrInit() (*model.AgentCommissionDay, error)
	FirstOrCreate() (*model.AgentCommissionDay, error)
	FindByPage(offset int, limit int) (result []*model.AgentCommissionDay, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgentCommissionDayDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agentCommissionDayDo) Debug() IAgentCommissionDayDo {
	return a.withDO(a.DO.Debug())
}

func (a agentCommissionDayDo) WithContext(ctx context.Context) IAgentCommissionDayDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentCommissionDayDo) ReadDB() IAgentCommissionDayDo {
	return a.Clauses(dbresolver.Read)
}

func (a agentCommissionDayDo) WriteDB() IAgentCommissionDayDo {
	return a.Clauses(dbresolver.Write)
}

func (a agentCommissionDayDo) Session(config *gorm.Session) IAgentCommissionDayDo {
	return a.withDO(a.DO.Session(config))
}

func (a agentCommissionDayDo) Clauses(conds ...clause.Expression) IAgentCommissionDayDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentCommissionDayDo) Returning(value interface{}, columns ...string) IAgentCommissionDayDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentCommissionDayDo) Not(conds ...gen.Condition) IAgentCommissionDayDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentCommissionDayDo) Or(conds ...gen.Condition) IAgentCommissionDayDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentCommissionDayDo) Select(conds ...field.Expr) IAgentCommissionDayDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentCommissionDayDo) Where(conds ...gen.Condition) IAgentCommissionDayDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentCommissionDayDo) Order(conds ...field.Expr) IAgentCommissionDayDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentCommissionDayDo) Distinct(cols ...field.Expr) IAgentCommissionDayDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentCommissionDayDo) Omit(cols ...field.Expr) IAgentCommissionDayDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentCommissionDayDo) Join(table schema.Tabler, on ...field.Expr) IAgentCommissionDayDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentCommissionDayDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgentCommissionDayDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentCommissionDayDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgentCommissionDayDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentCommissionDayDo) Group(cols ...field.Expr) IAgentCommissionDayDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentCommissionDayDo) Having(conds ...gen.Condition) IAgentCommissionDayDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentCommissionDayDo) Limit(limit int) IAgentCommissionDayDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentCommissionDayDo) Offset(offset int) IAgentCommissionDayDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentCommissionDayDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentCommissionDayDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentCommissionDayDo) Unscoped() IAgentCommissionDayDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agentCommissionDayDo) Create(values ...*model.AgentCommissionDay) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentCommissionDayDo) CreateInBatches(values []*model.AgentCommissionDay, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentCommissionDayDo) Save(values ...*model.AgentCommissionDay) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentCommissionDayDo) First() (*model.AgentCommissionDay, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentCommissionDay), nil
	}
}

func (a agentCommissionDayDo) Take() (*model.AgentCommissionDay, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentCommissionDay), nil
	}
}

func (a agentCommissionDayDo) Last() (*model.AgentCommissionDay, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentCommissionDay), nil
	}
}

func (a agentCommissionDayDo) Find() ([]*model.AgentCommissionDay, error) {
	result, err := a.DO.Find()
	return result.([]*model.AgentCommissionDay), err
}

func (a agentCommissionDayDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentCommissionDay, err error) {
	buf := make([]*model.AgentCommissionDay, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentCommissionDayDo) FindInBatches(result *[]*model.AgentCommissionDay, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentCommissionDayDo) Attrs(attrs ...field.AssignExpr) IAgentCommissionDayDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentCommissionDayDo) Assign(attrs ...field.AssignExpr) IAgentCommissionDayDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentCommissionDayDo) Joins(fields ...field.RelationField) IAgentCommissionDayDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentCommissionDayDo) Preload(fields ...field.RelationField) IAgentCommissionDayDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentCommissionDayDo) FirstOrInit() (*model.AgentCommissionDay, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentCommissionDay), nil
	}
}

func (a agentCommissionDayDo) FirstOrCreate() (*model.AgentCommissionDay, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentCommissionDay), nil
	}
}

func (a agentCommissionDayDo) FindByPage(offset int, limit int) (result []*model.AgentCommissionDay, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentCommissionDayDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentCommissionDayDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentCommissionDayDo) Delete(models ...*model.AgentCommissionDay) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentCommissionDayDo) withDO(do gen.Dao) *agentCommissionDayDo {
	a.DO = *do.(*gen.DO)
	return a
}
