// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newWinCoinRewardsM2(db *gorm.DB, opts ...gen.DOOption) winCoinRewardsM2 {
	_winCoinRewardsM2 := winCoinRewardsM2{}

	_winCoinRewardsM2.winCoinRewardsM2Do.UseDB(db, opts...)
	_winCoinRewardsM2.winCoinRewardsM2Do.UseModel(&model.WinCoinRewardsM2{})

	tableName := _winCoinRewardsM2.winCoinRewardsM2Do.TableName()
	_winCoinRewardsM2.ALL = field.NewAsterisk(tableName)
	_winCoinRewardsM2.ID = field.NewInt64(tableName, "id")
	_winCoinRewardsM2.UID = field.NewInt64(tableName, "uid")
	_winCoinRewardsM2.Username = field.NewString(tableName, "username")
	_winCoinRewardsM2.Coin = field.NewField(tableName, "coin")
	_winCoinRewardsM2.CoinBefore = field.NewField(tableName, "coin_before")
	_winCoinRewardsM2.ReferID = field.NewInt64(tableName, "refer_id")
	_winCoinRewardsM2.LadderName = field.NewString(tableName, "ladder_name")
	_winCoinRewardsM2.ReferCode = field.NewString(tableName, "refer_code")
	_winCoinRewardsM2.FlowClaim = field.NewInt64(tableName, "flow_claim")
	_winCoinRewardsM2.Codes = field.NewField(tableName, "codes")
	_winCoinRewardsM2.EndedAt = field.NewInt64(tableName, "ended_at")
	_winCoinRewardsM2.Info = field.NewString(tableName, "info")
	_winCoinRewardsM2.Status = field.NewInt64(tableName, "status")
	_winCoinRewardsM2.CreatedAt = field.NewInt64(tableName, "created_at")
	_winCoinRewardsM2.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_winCoinRewardsM2.fillFieldMap()

	return _winCoinRewardsM2
}

// winCoinRewardsM2 奖金表
type winCoinRewardsM2 struct {
	winCoinRewardsM2Do

	ALL        field.Asterisk
	ID         field.Int64
	UID        field.Int64  // UID
	Username   field.String // 用户名
	Coin       field.Field  // 金额
	CoinBefore field.Field  // 即时金额
	ReferID    field.Int64  // 关联ID(活动表ID)
	LadderName field.String // 新活动，等级code
	ReferCode  field.String // 关联Code(活动表Code)
	FlowClaim  field.Int64  // 流水倍数
	Codes      field.Field  // 所需打码量
	EndedAt    field.Int64  // 活动结束时间
	Info       field.String // 备注
	Status     field.Int64  // 状态:0-申请中 1-已满足 2-已派发3-已结束
	CreatedAt  field.Int64
	UpdatedAt  field.Int64

	fieldMap map[string]field.Expr
}

func (w winCoinRewardsM2) Table(newTableName string) *winCoinRewardsM2 {
	w.winCoinRewardsM2Do.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winCoinRewardsM2) As(alias string) *winCoinRewardsM2 {
	w.winCoinRewardsM2Do.DO = *(w.winCoinRewardsM2Do.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winCoinRewardsM2) updateTableName(table string) *winCoinRewardsM2 {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.UID = field.NewInt64(table, "uid")
	w.Username = field.NewString(table, "username")
	w.Coin = field.NewField(table, "coin")
	w.CoinBefore = field.NewField(table, "coin_before")
	w.ReferID = field.NewInt64(table, "refer_id")
	w.LadderName = field.NewString(table, "ladder_name")
	w.ReferCode = field.NewString(table, "refer_code")
	w.FlowClaim = field.NewInt64(table, "flow_claim")
	w.Codes = field.NewField(table, "codes")
	w.EndedAt = field.NewInt64(table, "ended_at")
	w.Info = field.NewString(table, "info")
	w.Status = field.NewInt64(table, "status")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *winCoinRewardsM2) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winCoinRewardsM2) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 15)
	w.fieldMap["id"] = w.ID
	w.fieldMap["uid"] = w.UID
	w.fieldMap["username"] = w.Username
	w.fieldMap["coin"] = w.Coin
	w.fieldMap["coin_before"] = w.CoinBefore
	w.fieldMap["refer_id"] = w.ReferID
	w.fieldMap["ladder_name"] = w.LadderName
	w.fieldMap["refer_code"] = w.ReferCode
	w.fieldMap["flow_claim"] = w.FlowClaim
	w.fieldMap["codes"] = w.Codes
	w.fieldMap["ended_at"] = w.EndedAt
	w.fieldMap["info"] = w.Info
	w.fieldMap["status"] = w.Status
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w winCoinRewardsM2) clone(db *gorm.DB) winCoinRewardsM2 {
	w.winCoinRewardsM2Do.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winCoinRewardsM2) replaceDB(db *gorm.DB) winCoinRewardsM2 {
	w.winCoinRewardsM2Do.ReplaceDB(db)
	return w
}

type winCoinRewardsM2Do struct{ gen.DO }

type IWinCoinRewardsM2Do interface {
	gen.SubQuery
	Debug() IWinCoinRewardsM2Do
	WithContext(ctx context.Context) IWinCoinRewardsM2Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinCoinRewardsM2Do
	WriteDB() IWinCoinRewardsM2Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinCoinRewardsM2Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinCoinRewardsM2Do
	Not(conds ...gen.Condition) IWinCoinRewardsM2Do
	Or(conds ...gen.Condition) IWinCoinRewardsM2Do
	Select(conds ...field.Expr) IWinCoinRewardsM2Do
	Where(conds ...gen.Condition) IWinCoinRewardsM2Do
	Order(conds ...field.Expr) IWinCoinRewardsM2Do
	Distinct(cols ...field.Expr) IWinCoinRewardsM2Do
	Omit(cols ...field.Expr) IWinCoinRewardsM2Do
	Join(table schema.Tabler, on ...field.Expr) IWinCoinRewardsM2Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinCoinRewardsM2Do
	RightJoin(table schema.Tabler, on ...field.Expr) IWinCoinRewardsM2Do
	Group(cols ...field.Expr) IWinCoinRewardsM2Do
	Having(conds ...gen.Condition) IWinCoinRewardsM2Do
	Limit(limit int) IWinCoinRewardsM2Do
	Offset(offset int) IWinCoinRewardsM2Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinCoinRewardsM2Do
	Unscoped() IWinCoinRewardsM2Do
	Create(values ...*model.WinCoinRewardsM2) error
	CreateInBatches(values []*model.WinCoinRewardsM2, batchSize int) error
	Save(values ...*model.WinCoinRewardsM2) error
	First() (*model.WinCoinRewardsM2, error)
	Take() (*model.WinCoinRewardsM2, error)
	Last() (*model.WinCoinRewardsM2, error)
	Find() ([]*model.WinCoinRewardsM2, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinCoinRewardsM2, err error)
	FindInBatches(result *[]*model.WinCoinRewardsM2, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinCoinRewardsM2) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinCoinRewardsM2Do
	Assign(attrs ...field.AssignExpr) IWinCoinRewardsM2Do
	Joins(fields ...field.RelationField) IWinCoinRewardsM2Do
	Preload(fields ...field.RelationField) IWinCoinRewardsM2Do
	FirstOrInit() (*model.WinCoinRewardsM2, error)
	FirstOrCreate() (*model.WinCoinRewardsM2, error)
	FindByPage(offset int, limit int) (result []*model.WinCoinRewardsM2, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinCoinRewardsM2Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winCoinRewardsM2Do) Debug() IWinCoinRewardsM2Do {
	return w.withDO(w.DO.Debug())
}

func (w winCoinRewardsM2Do) WithContext(ctx context.Context) IWinCoinRewardsM2Do {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winCoinRewardsM2Do) ReadDB() IWinCoinRewardsM2Do {
	return w.Clauses(dbresolver.Read)
}

func (w winCoinRewardsM2Do) WriteDB() IWinCoinRewardsM2Do {
	return w.Clauses(dbresolver.Write)
}

func (w winCoinRewardsM2Do) Session(config *gorm.Session) IWinCoinRewardsM2Do {
	return w.withDO(w.DO.Session(config))
}

func (w winCoinRewardsM2Do) Clauses(conds ...clause.Expression) IWinCoinRewardsM2Do {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winCoinRewardsM2Do) Returning(value interface{}, columns ...string) IWinCoinRewardsM2Do {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winCoinRewardsM2Do) Not(conds ...gen.Condition) IWinCoinRewardsM2Do {
	return w.withDO(w.DO.Not(conds...))
}

func (w winCoinRewardsM2Do) Or(conds ...gen.Condition) IWinCoinRewardsM2Do {
	return w.withDO(w.DO.Or(conds...))
}

func (w winCoinRewardsM2Do) Select(conds ...field.Expr) IWinCoinRewardsM2Do {
	return w.withDO(w.DO.Select(conds...))
}

func (w winCoinRewardsM2Do) Where(conds ...gen.Condition) IWinCoinRewardsM2Do {
	return w.withDO(w.DO.Where(conds...))
}

func (w winCoinRewardsM2Do) Order(conds ...field.Expr) IWinCoinRewardsM2Do {
	return w.withDO(w.DO.Order(conds...))
}

func (w winCoinRewardsM2Do) Distinct(cols ...field.Expr) IWinCoinRewardsM2Do {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winCoinRewardsM2Do) Omit(cols ...field.Expr) IWinCoinRewardsM2Do {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winCoinRewardsM2Do) Join(table schema.Tabler, on ...field.Expr) IWinCoinRewardsM2Do {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winCoinRewardsM2Do) LeftJoin(table schema.Tabler, on ...field.Expr) IWinCoinRewardsM2Do {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winCoinRewardsM2Do) RightJoin(table schema.Tabler, on ...field.Expr) IWinCoinRewardsM2Do {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winCoinRewardsM2Do) Group(cols ...field.Expr) IWinCoinRewardsM2Do {
	return w.withDO(w.DO.Group(cols...))
}

func (w winCoinRewardsM2Do) Having(conds ...gen.Condition) IWinCoinRewardsM2Do {
	return w.withDO(w.DO.Having(conds...))
}

func (w winCoinRewardsM2Do) Limit(limit int) IWinCoinRewardsM2Do {
	return w.withDO(w.DO.Limit(limit))
}

func (w winCoinRewardsM2Do) Offset(offset int) IWinCoinRewardsM2Do {
	return w.withDO(w.DO.Offset(offset))
}

func (w winCoinRewardsM2Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinCoinRewardsM2Do {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winCoinRewardsM2Do) Unscoped() IWinCoinRewardsM2Do {
	return w.withDO(w.DO.Unscoped())
}

func (w winCoinRewardsM2Do) Create(values ...*model.WinCoinRewardsM2) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winCoinRewardsM2Do) CreateInBatches(values []*model.WinCoinRewardsM2, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winCoinRewardsM2Do) Save(values ...*model.WinCoinRewardsM2) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winCoinRewardsM2Do) First() (*model.WinCoinRewardsM2, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinRewardsM2), nil
	}
}

func (w winCoinRewardsM2Do) Take() (*model.WinCoinRewardsM2, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinRewardsM2), nil
	}
}

func (w winCoinRewardsM2Do) Last() (*model.WinCoinRewardsM2, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinRewardsM2), nil
	}
}

func (w winCoinRewardsM2Do) Find() ([]*model.WinCoinRewardsM2, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinCoinRewardsM2), err
}

func (w winCoinRewardsM2Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinCoinRewardsM2, err error) {
	buf := make([]*model.WinCoinRewardsM2, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winCoinRewardsM2Do) FindInBatches(result *[]*model.WinCoinRewardsM2, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winCoinRewardsM2Do) Attrs(attrs ...field.AssignExpr) IWinCoinRewardsM2Do {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winCoinRewardsM2Do) Assign(attrs ...field.AssignExpr) IWinCoinRewardsM2Do {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winCoinRewardsM2Do) Joins(fields ...field.RelationField) IWinCoinRewardsM2Do {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winCoinRewardsM2Do) Preload(fields ...field.RelationField) IWinCoinRewardsM2Do {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winCoinRewardsM2Do) FirstOrInit() (*model.WinCoinRewardsM2, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinRewardsM2), nil
	}
}

func (w winCoinRewardsM2Do) FirstOrCreate() (*model.WinCoinRewardsM2, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinRewardsM2), nil
	}
}

func (w winCoinRewardsM2Do) FindByPage(offset int, limit int) (result []*model.WinCoinRewardsM2, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winCoinRewardsM2Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winCoinRewardsM2Do) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winCoinRewardsM2Do) Delete(models ...*model.WinCoinRewardsM2) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winCoinRewardsM2Do) withDO(do gen.Dao) *winCoinRewardsM2Do {
	w.DO = *do.(*gen.DO)
	return w
}
