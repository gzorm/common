// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newFbSportsMatchPlayerRank(db *gorm.DB, opts ...gen.DOOption) fbSportsMatchPlayerRank {
	_fbSportsMatchPlayerRank := fbSportsMatchPlayerRank{}

	_fbSportsMatchPlayerRank.fbSportsMatchPlayerRankDo.UseDB(db, opts...)
	_fbSportsMatchPlayerRank.fbSportsMatchPlayerRankDo.UseModel(&model.FbSportsMatchPlayerRank{})

	tableName := _fbSportsMatchPlayerRank.fbSportsMatchPlayerRankDo.TableName()
	_fbSportsMatchPlayerRank.ALL = field.NewAsterisk(tableName)
	_fbSportsMatchPlayerRank.ID = field.NewInt64(tableName, "id")
	_fbSportsMatchPlayerRank.PlayerName = field.NewString(tableName, "player_name")
	_fbSportsMatchPlayerRank.TeamID = field.NewInt64(tableName, "team_id")
	_fbSportsMatchPlayerRank.TeamName = field.NewString(tableName, "team_name")
	_fbSportsMatchPlayerRank.TeamLogo = field.NewString(tableName, "team_logo")
	_fbSportsMatchPlayerRank.PlayerAvatar = field.NewString(tableName, "player_avatar")
	_fbSportsMatchPlayerRank.Assists = field.NewInt64(tableName, "assists")
	_fbSportsMatchPlayerRank.Goals = field.NewInt64(tableName, "goals")
	_fbSportsMatchPlayerRank.RankType = field.NewInt64(tableName, "rank_type")
	_fbSportsMatchPlayerRank.LeagueID = field.NewInt64(tableName, "league_id")
	_fbSportsMatchPlayerRank.TopicID = field.NewInt64(tableName, "topic_id")
	_fbSportsMatchPlayerRank.LanguageType = field.NewString(tableName, "language_type")
	_fbSportsMatchPlayerRank.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbSportsMatchPlayerRank.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_fbSportsMatchPlayerRank.fillFieldMap()

	return _fbSportsMatchPlayerRank
}

// fbSportsMatchPlayerRank 球员排行榜数据表
type fbSportsMatchPlayerRank struct {
	fbSportsMatchPlayerRankDo

	ALL          field.Asterisk
	ID           field.Int64  // 球员ID
	PlayerName   field.String // 球员名
	TeamID       field.Int64  // 球队ID
	TeamName     field.String // 球队名
	TeamLogo     field.String // 球队LOGO
	PlayerAvatar field.String // 球员头像
	Assists      field.Int64  // 助攻数
	Goals        field.Int64  // 进球数
	RankType     field.Int64  // 排行榜类型
	LeagueID     field.Int64  // 联赛ID
	TopicID      field.Int64  // 专题ID
	LanguageType field.String // 语言类型
	CreatedAt    field.Int64  // 记录创建时间
	UpdatedAt    field.Int64  // 记录更新时间

	fieldMap map[string]field.Expr
}

func (f fbSportsMatchPlayerRank) Table(newTableName string) *fbSportsMatchPlayerRank {
	f.fbSportsMatchPlayerRankDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbSportsMatchPlayerRank) As(alias string) *fbSportsMatchPlayerRank {
	f.fbSportsMatchPlayerRankDo.DO = *(f.fbSportsMatchPlayerRankDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbSportsMatchPlayerRank) updateTableName(table string) *fbSportsMatchPlayerRank {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.PlayerName = field.NewString(table, "player_name")
	f.TeamID = field.NewInt64(table, "team_id")
	f.TeamName = field.NewString(table, "team_name")
	f.TeamLogo = field.NewString(table, "team_logo")
	f.PlayerAvatar = field.NewString(table, "player_avatar")
	f.Assists = field.NewInt64(table, "assists")
	f.Goals = field.NewInt64(table, "goals")
	f.RankType = field.NewInt64(table, "rank_type")
	f.LeagueID = field.NewInt64(table, "league_id")
	f.TopicID = field.NewInt64(table, "topic_id")
	f.LanguageType = field.NewString(table, "language_type")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fbSportsMatchPlayerRank) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbSportsMatchPlayerRank) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 14)
	f.fieldMap["id"] = f.ID
	f.fieldMap["player_name"] = f.PlayerName
	f.fieldMap["team_id"] = f.TeamID
	f.fieldMap["team_name"] = f.TeamName
	f.fieldMap["team_logo"] = f.TeamLogo
	f.fieldMap["player_avatar"] = f.PlayerAvatar
	f.fieldMap["assists"] = f.Assists
	f.fieldMap["goals"] = f.Goals
	f.fieldMap["rank_type"] = f.RankType
	f.fieldMap["league_id"] = f.LeagueID
	f.fieldMap["topic_id"] = f.TopicID
	f.fieldMap["language_type"] = f.LanguageType
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fbSportsMatchPlayerRank) clone(db *gorm.DB) fbSportsMatchPlayerRank {
	f.fbSportsMatchPlayerRankDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbSportsMatchPlayerRank) replaceDB(db *gorm.DB) fbSportsMatchPlayerRank {
	f.fbSportsMatchPlayerRankDo.ReplaceDB(db)
	return f
}

type fbSportsMatchPlayerRankDo struct{ gen.DO }

type IFbSportsMatchPlayerRankDo interface {
	gen.SubQuery
	Debug() IFbSportsMatchPlayerRankDo
	WithContext(ctx context.Context) IFbSportsMatchPlayerRankDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbSportsMatchPlayerRankDo
	WriteDB() IFbSportsMatchPlayerRankDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbSportsMatchPlayerRankDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbSportsMatchPlayerRankDo
	Not(conds ...gen.Condition) IFbSportsMatchPlayerRankDo
	Or(conds ...gen.Condition) IFbSportsMatchPlayerRankDo
	Select(conds ...field.Expr) IFbSportsMatchPlayerRankDo
	Where(conds ...gen.Condition) IFbSportsMatchPlayerRankDo
	Order(conds ...field.Expr) IFbSportsMatchPlayerRankDo
	Distinct(cols ...field.Expr) IFbSportsMatchPlayerRankDo
	Omit(cols ...field.Expr) IFbSportsMatchPlayerRankDo
	Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchPlayerRankDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchPlayerRankDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchPlayerRankDo
	Group(cols ...field.Expr) IFbSportsMatchPlayerRankDo
	Having(conds ...gen.Condition) IFbSportsMatchPlayerRankDo
	Limit(limit int) IFbSportsMatchPlayerRankDo
	Offset(offset int) IFbSportsMatchPlayerRankDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchPlayerRankDo
	Unscoped() IFbSportsMatchPlayerRankDo
	Create(values ...*model.FbSportsMatchPlayerRank) error
	CreateInBatches(values []*model.FbSportsMatchPlayerRank, batchSize int) error
	Save(values ...*model.FbSportsMatchPlayerRank) error
	First() (*model.FbSportsMatchPlayerRank, error)
	Take() (*model.FbSportsMatchPlayerRank, error)
	Last() (*model.FbSportsMatchPlayerRank, error)
	Find() ([]*model.FbSportsMatchPlayerRank, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchPlayerRank, err error)
	FindInBatches(result *[]*model.FbSportsMatchPlayerRank, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbSportsMatchPlayerRank) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbSportsMatchPlayerRankDo
	Assign(attrs ...field.AssignExpr) IFbSportsMatchPlayerRankDo
	Joins(fields ...field.RelationField) IFbSportsMatchPlayerRankDo
	Preload(fields ...field.RelationField) IFbSportsMatchPlayerRankDo
	FirstOrInit() (*model.FbSportsMatchPlayerRank, error)
	FirstOrCreate() (*model.FbSportsMatchPlayerRank, error)
	FindByPage(offset int, limit int) (result []*model.FbSportsMatchPlayerRank, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbSportsMatchPlayerRankDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbSportsMatchPlayerRankDo) Debug() IFbSportsMatchPlayerRankDo {
	return f.withDO(f.DO.Debug())
}

func (f fbSportsMatchPlayerRankDo) WithContext(ctx context.Context) IFbSportsMatchPlayerRankDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbSportsMatchPlayerRankDo) ReadDB() IFbSportsMatchPlayerRankDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbSportsMatchPlayerRankDo) WriteDB() IFbSportsMatchPlayerRankDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbSportsMatchPlayerRankDo) Session(config *gorm.Session) IFbSportsMatchPlayerRankDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbSportsMatchPlayerRankDo) Clauses(conds ...clause.Expression) IFbSportsMatchPlayerRankDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbSportsMatchPlayerRankDo) Returning(value interface{}, columns ...string) IFbSportsMatchPlayerRankDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbSportsMatchPlayerRankDo) Not(conds ...gen.Condition) IFbSportsMatchPlayerRankDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbSportsMatchPlayerRankDo) Or(conds ...gen.Condition) IFbSportsMatchPlayerRankDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbSportsMatchPlayerRankDo) Select(conds ...field.Expr) IFbSportsMatchPlayerRankDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbSportsMatchPlayerRankDo) Where(conds ...gen.Condition) IFbSportsMatchPlayerRankDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbSportsMatchPlayerRankDo) Order(conds ...field.Expr) IFbSportsMatchPlayerRankDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbSportsMatchPlayerRankDo) Distinct(cols ...field.Expr) IFbSportsMatchPlayerRankDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbSportsMatchPlayerRankDo) Omit(cols ...field.Expr) IFbSportsMatchPlayerRankDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbSportsMatchPlayerRankDo) Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchPlayerRankDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbSportsMatchPlayerRankDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchPlayerRankDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbSportsMatchPlayerRankDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchPlayerRankDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbSportsMatchPlayerRankDo) Group(cols ...field.Expr) IFbSportsMatchPlayerRankDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbSportsMatchPlayerRankDo) Having(conds ...gen.Condition) IFbSportsMatchPlayerRankDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbSportsMatchPlayerRankDo) Limit(limit int) IFbSportsMatchPlayerRankDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbSportsMatchPlayerRankDo) Offset(offset int) IFbSportsMatchPlayerRankDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbSportsMatchPlayerRankDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchPlayerRankDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbSportsMatchPlayerRankDo) Unscoped() IFbSportsMatchPlayerRankDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbSportsMatchPlayerRankDo) Create(values ...*model.FbSportsMatchPlayerRank) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbSportsMatchPlayerRankDo) CreateInBatches(values []*model.FbSportsMatchPlayerRank, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbSportsMatchPlayerRankDo) Save(values ...*model.FbSportsMatchPlayerRank) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbSportsMatchPlayerRankDo) First() (*model.FbSportsMatchPlayerRank, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchPlayerRank), nil
	}
}

func (f fbSportsMatchPlayerRankDo) Take() (*model.FbSportsMatchPlayerRank, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchPlayerRank), nil
	}
}

func (f fbSportsMatchPlayerRankDo) Last() (*model.FbSportsMatchPlayerRank, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchPlayerRank), nil
	}
}

func (f fbSportsMatchPlayerRankDo) Find() ([]*model.FbSportsMatchPlayerRank, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbSportsMatchPlayerRank), err
}

func (f fbSportsMatchPlayerRankDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchPlayerRank, err error) {
	buf := make([]*model.FbSportsMatchPlayerRank, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbSportsMatchPlayerRankDo) FindInBatches(result *[]*model.FbSportsMatchPlayerRank, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbSportsMatchPlayerRankDo) Attrs(attrs ...field.AssignExpr) IFbSportsMatchPlayerRankDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbSportsMatchPlayerRankDo) Assign(attrs ...field.AssignExpr) IFbSportsMatchPlayerRankDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbSportsMatchPlayerRankDo) Joins(fields ...field.RelationField) IFbSportsMatchPlayerRankDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbSportsMatchPlayerRankDo) Preload(fields ...field.RelationField) IFbSportsMatchPlayerRankDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbSportsMatchPlayerRankDo) FirstOrInit() (*model.FbSportsMatchPlayerRank, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchPlayerRank), nil
	}
}

func (f fbSportsMatchPlayerRankDo) FirstOrCreate() (*model.FbSportsMatchPlayerRank, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchPlayerRank), nil
	}
}

func (f fbSportsMatchPlayerRankDo) FindByPage(offset int, limit int) (result []*model.FbSportsMatchPlayerRank, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbSportsMatchPlayerRankDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbSportsMatchPlayerRankDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbSportsMatchPlayerRankDo) Delete(models ...*model.FbSportsMatchPlayerRank) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbSportsMatchPlayerRankDo) withDO(do gen.Dao) *fbSportsMatchPlayerRankDo {
	f.DO = *do.(*gen.DO)
	return f
}
