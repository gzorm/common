// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newWinCoinLog5(db *gorm.DB, opts ...gen.DOOption) winCoinLog5 {
	_winCoinLog5 := winCoinLog5{}

	_winCoinLog5.winCoinLog5Do.UseDB(db, opts...)
	_winCoinLog5.winCoinLog5Do.UseModel(&model.WinCoinLog5{})

	tableName := _winCoinLog5.winCoinLog5Do.TableName()
	_winCoinLog5.ALL = field.NewAsterisk(tableName)
	_winCoinLog5.ID = field.NewInt64(tableName, "id")
	_winCoinLog5.UID = field.NewInt64(tableName, "uid")
	_winCoinLog5.Username = field.NewString(tableName, "username")
	_winCoinLog5.MerchantID = field.NewInt64(tableName, "merchant_id")
	_winCoinLog5.WalletID = field.NewInt64(tableName, "wallet_id")
	_winCoinLog5.Currency = field.NewInt64(tableName, "currency")
	_winCoinLog5.Category = field.NewInt64(tableName, "category")
	_winCoinLog5.ReferID = field.NewInt64(tableName, "refer_id")
	_winCoinLog5.Coin = field.NewField(tableName, "coin")
	_winCoinLog5.CoinReal = field.NewField(tableName, "coin_real")
	_winCoinLog5.PlatID = field.NewInt64(tableName, "plat_id")
	_winCoinLog5.OutIn = field.NewInt64(tableName, "out_in")
	_winCoinLog5.GameID = field.NewInt64(tableName, "game_id")
	_winCoinLog5.CoinBefore = field.NewField(tableName, "coin_before")
	_winCoinLog5.CoinAfter = field.NewField(tableName, "coin_after")
	_winCoinLog5.Status = field.NewInt64(tableName, "status")
	_winCoinLog5.CreatedAt = field.NewInt64(tableName, "created_at")
	_winCoinLog5.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_winCoinLog5.fillFieldMap()

	return _winCoinLog5
}

type winCoinLog5 struct {
	winCoinLog5Do

	ALL        field.Asterisk
	ID         field.Int64
	UID        field.Int64  // UID
	Username   field.String // 用户名
	MerchantID field.Int64  // 商户id
	WalletID   field.Int64  // 钱包id
	Currency   field.Int64  // 币种
	Category   field.Int64  // 类型:1-存款 2-提款 3-投注 4-派彩 5-返水 6-佣金 7-活动(奖励) 8-系统调账 9-退款 10-佣金钱包转主账户余额 11-小费
	ReferID    field.Int64  // 关联ID
	Coin       field.Field  // 金额
	CoinReal   field.Field  // 实际金额
	PlatID     field.Int64  // 游戏平台ID
	OutIn      field.Int64  // 收支类型:0-支出 1-收入
	GameID     field.Int64  // 三方游戏ID
	CoinBefore field.Field  // 前金额
	CoinAfter  field.Field  // 帐变后金额
	Status     field.Int64  // 状态:0-处理中 1-成功 2-失败
	CreatedAt  field.Int64
	UpdatedAt  field.Int64

	fieldMap map[string]field.Expr
}

func (w winCoinLog5) Table(newTableName string) *winCoinLog5 {
	w.winCoinLog5Do.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winCoinLog5) As(alias string) *winCoinLog5 {
	w.winCoinLog5Do.DO = *(w.winCoinLog5Do.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winCoinLog5) updateTableName(table string) *winCoinLog5 {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.UID = field.NewInt64(table, "uid")
	w.Username = field.NewString(table, "username")
	w.MerchantID = field.NewInt64(table, "merchant_id")
	w.WalletID = field.NewInt64(table, "wallet_id")
	w.Currency = field.NewInt64(table, "currency")
	w.Category = field.NewInt64(table, "category")
	w.ReferID = field.NewInt64(table, "refer_id")
	w.Coin = field.NewField(table, "coin")
	w.CoinReal = field.NewField(table, "coin_real")
	w.PlatID = field.NewInt64(table, "plat_id")
	w.OutIn = field.NewInt64(table, "out_in")
	w.GameID = field.NewInt64(table, "game_id")
	w.CoinBefore = field.NewField(table, "coin_before")
	w.CoinAfter = field.NewField(table, "coin_after")
	w.Status = field.NewInt64(table, "status")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *winCoinLog5) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winCoinLog5) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 18)
	w.fieldMap["id"] = w.ID
	w.fieldMap["uid"] = w.UID
	w.fieldMap["username"] = w.Username
	w.fieldMap["merchant_id"] = w.MerchantID
	w.fieldMap["wallet_id"] = w.WalletID
	w.fieldMap["currency"] = w.Currency
	w.fieldMap["category"] = w.Category
	w.fieldMap["refer_id"] = w.ReferID
	w.fieldMap["coin"] = w.Coin
	w.fieldMap["coin_real"] = w.CoinReal
	w.fieldMap["plat_id"] = w.PlatID
	w.fieldMap["out_in"] = w.OutIn
	w.fieldMap["game_id"] = w.GameID
	w.fieldMap["coin_before"] = w.CoinBefore
	w.fieldMap["coin_after"] = w.CoinAfter
	w.fieldMap["status"] = w.Status
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w winCoinLog5) clone(db *gorm.DB) winCoinLog5 {
	w.winCoinLog5Do.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winCoinLog5) replaceDB(db *gorm.DB) winCoinLog5 {
	w.winCoinLog5Do.ReplaceDB(db)
	return w
}

type winCoinLog5Do struct{ gen.DO }

type IWinCoinLog5Do interface {
	gen.SubQuery
	Debug() IWinCoinLog5Do
	WithContext(ctx context.Context) IWinCoinLog5Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinCoinLog5Do
	WriteDB() IWinCoinLog5Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinCoinLog5Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinCoinLog5Do
	Not(conds ...gen.Condition) IWinCoinLog5Do
	Or(conds ...gen.Condition) IWinCoinLog5Do
	Select(conds ...field.Expr) IWinCoinLog5Do
	Where(conds ...gen.Condition) IWinCoinLog5Do
	Order(conds ...field.Expr) IWinCoinLog5Do
	Distinct(cols ...field.Expr) IWinCoinLog5Do
	Omit(cols ...field.Expr) IWinCoinLog5Do
	Join(table schema.Tabler, on ...field.Expr) IWinCoinLog5Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinCoinLog5Do
	RightJoin(table schema.Tabler, on ...field.Expr) IWinCoinLog5Do
	Group(cols ...field.Expr) IWinCoinLog5Do
	Having(conds ...gen.Condition) IWinCoinLog5Do
	Limit(limit int) IWinCoinLog5Do
	Offset(offset int) IWinCoinLog5Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinCoinLog5Do
	Unscoped() IWinCoinLog5Do
	Create(values ...*model.WinCoinLog5) error
	CreateInBatches(values []*model.WinCoinLog5, batchSize int) error
	Save(values ...*model.WinCoinLog5) error
	First() (*model.WinCoinLog5, error)
	Take() (*model.WinCoinLog5, error)
	Last() (*model.WinCoinLog5, error)
	Find() ([]*model.WinCoinLog5, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinCoinLog5, err error)
	FindInBatches(result *[]*model.WinCoinLog5, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinCoinLog5) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinCoinLog5Do
	Assign(attrs ...field.AssignExpr) IWinCoinLog5Do
	Joins(fields ...field.RelationField) IWinCoinLog5Do
	Preload(fields ...field.RelationField) IWinCoinLog5Do
	FirstOrInit() (*model.WinCoinLog5, error)
	FirstOrCreate() (*model.WinCoinLog5, error)
	FindByPage(offset int, limit int) (result []*model.WinCoinLog5, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinCoinLog5Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winCoinLog5Do) Debug() IWinCoinLog5Do {
	return w.withDO(w.DO.Debug())
}

func (w winCoinLog5Do) WithContext(ctx context.Context) IWinCoinLog5Do {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winCoinLog5Do) ReadDB() IWinCoinLog5Do {
	return w.Clauses(dbresolver.Read)
}

func (w winCoinLog5Do) WriteDB() IWinCoinLog5Do {
	return w.Clauses(dbresolver.Write)
}

func (w winCoinLog5Do) Session(config *gorm.Session) IWinCoinLog5Do {
	return w.withDO(w.DO.Session(config))
}

func (w winCoinLog5Do) Clauses(conds ...clause.Expression) IWinCoinLog5Do {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winCoinLog5Do) Returning(value interface{}, columns ...string) IWinCoinLog5Do {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winCoinLog5Do) Not(conds ...gen.Condition) IWinCoinLog5Do {
	return w.withDO(w.DO.Not(conds...))
}

func (w winCoinLog5Do) Or(conds ...gen.Condition) IWinCoinLog5Do {
	return w.withDO(w.DO.Or(conds...))
}

func (w winCoinLog5Do) Select(conds ...field.Expr) IWinCoinLog5Do {
	return w.withDO(w.DO.Select(conds...))
}

func (w winCoinLog5Do) Where(conds ...gen.Condition) IWinCoinLog5Do {
	return w.withDO(w.DO.Where(conds...))
}

func (w winCoinLog5Do) Order(conds ...field.Expr) IWinCoinLog5Do {
	return w.withDO(w.DO.Order(conds...))
}

func (w winCoinLog5Do) Distinct(cols ...field.Expr) IWinCoinLog5Do {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winCoinLog5Do) Omit(cols ...field.Expr) IWinCoinLog5Do {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winCoinLog5Do) Join(table schema.Tabler, on ...field.Expr) IWinCoinLog5Do {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winCoinLog5Do) LeftJoin(table schema.Tabler, on ...field.Expr) IWinCoinLog5Do {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winCoinLog5Do) RightJoin(table schema.Tabler, on ...field.Expr) IWinCoinLog5Do {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winCoinLog5Do) Group(cols ...field.Expr) IWinCoinLog5Do {
	return w.withDO(w.DO.Group(cols...))
}

func (w winCoinLog5Do) Having(conds ...gen.Condition) IWinCoinLog5Do {
	return w.withDO(w.DO.Having(conds...))
}

func (w winCoinLog5Do) Limit(limit int) IWinCoinLog5Do {
	return w.withDO(w.DO.Limit(limit))
}

func (w winCoinLog5Do) Offset(offset int) IWinCoinLog5Do {
	return w.withDO(w.DO.Offset(offset))
}

func (w winCoinLog5Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinCoinLog5Do {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winCoinLog5Do) Unscoped() IWinCoinLog5Do {
	return w.withDO(w.DO.Unscoped())
}

func (w winCoinLog5Do) Create(values ...*model.WinCoinLog5) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winCoinLog5Do) CreateInBatches(values []*model.WinCoinLog5, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winCoinLog5Do) Save(values ...*model.WinCoinLog5) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winCoinLog5Do) First() (*model.WinCoinLog5, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinLog5), nil
	}
}

func (w winCoinLog5Do) Take() (*model.WinCoinLog5, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinLog5), nil
	}
}

func (w winCoinLog5Do) Last() (*model.WinCoinLog5, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinLog5), nil
	}
}

func (w winCoinLog5Do) Find() ([]*model.WinCoinLog5, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinCoinLog5), err
}

func (w winCoinLog5Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinCoinLog5, err error) {
	buf := make([]*model.WinCoinLog5, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winCoinLog5Do) FindInBatches(result *[]*model.WinCoinLog5, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winCoinLog5Do) Attrs(attrs ...field.AssignExpr) IWinCoinLog5Do {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winCoinLog5Do) Assign(attrs ...field.AssignExpr) IWinCoinLog5Do {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winCoinLog5Do) Joins(fields ...field.RelationField) IWinCoinLog5Do {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winCoinLog5Do) Preload(fields ...field.RelationField) IWinCoinLog5Do {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winCoinLog5Do) FirstOrInit() (*model.WinCoinLog5, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinLog5), nil
	}
}

func (w winCoinLog5Do) FirstOrCreate() (*model.WinCoinLog5, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinLog5), nil
	}
}

func (w winCoinLog5Do) FindByPage(offset int, limit int) (result []*model.WinCoinLog5, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winCoinLog5Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winCoinLog5Do) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winCoinLog5Do) Delete(models ...*model.WinCoinLog5) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winCoinLog5Do) withDO(do gen.Dao) *winCoinLog5Do {
	w.DO = *do.(*gen.DO)
	return w
}
