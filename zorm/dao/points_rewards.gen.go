// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newPointsRewards(db *gorm.DB, opts ...gen.DOOption) pointsRewards {
	_pointsRewards := pointsRewards{}

	_pointsRewards.pointsRewardsDo.UseDB(db, opts...)
	_pointsRewards.pointsRewardsDo.UseModel(&model.PointsRewards{})

	tableName := _pointsRewards.pointsRewardsDo.TableName()
	_pointsRewards.ALL = field.NewAsterisk(tableName)
	_pointsRewards.ID = field.NewInt64(tableName, "id")
	_pointsRewards.Language = field.NewString(tableName, "language")
	_pointsRewards.Name = field.NewString(tableName, "name")
	_pointsRewards.Integral = field.NewInt64(tableName, "integral")
	_pointsRewards.GoldCoins = field.NewInt64(tableName, "gold_coins")
	_pointsRewards.Image = field.NewString(tableName, "image")
	_pointsRewards.Status = field.NewInt64(tableName, "status")
	_pointsRewards.CreatedAt = field.NewInt64(tableName, "created_at")
	_pointsRewards.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_pointsRewards.UpdatedUser = field.NewString(tableName, "updated_user")

	_pointsRewards.fillFieldMap()

	return _pointsRewards
}

// pointsRewards 积分商城奖励配置
type pointsRewards struct {
	pointsRewardsDo

	ALL         field.Asterisk
	ID          field.Int64
	Language    field.String // 语言包
	Name        field.String // 奖励物品名称
	Integral    field.Int64  // 奖励领取所需积分
	GoldCoins   field.Int64  // 金币
	Image       field.String // 图片
	Status      field.Int64  // 状态: 1=开启,2=禁用
	CreatedAt   field.Int64  // 创建时间
	UpdatedAt   field.Int64  // 更新时间
	UpdatedUser field.String // 最后修改人

	fieldMap map[string]field.Expr
}

func (p pointsRewards) Table(newTableName string) *pointsRewards {
	p.pointsRewardsDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pointsRewards) As(alias string) *pointsRewards {
	p.pointsRewardsDo.DO = *(p.pointsRewardsDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pointsRewards) updateTableName(table string) *pointsRewards {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.Language = field.NewString(table, "language")
	p.Name = field.NewString(table, "name")
	p.Integral = field.NewInt64(table, "integral")
	p.GoldCoins = field.NewInt64(table, "gold_coins")
	p.Image = field.NewString(table, "image")
	p.Status = field.NewInt64(table, "status")
	p.CreatedAt = field.NewInt64(table, "created_at")
	p.UpdatedAt = field.NewInt64(table, "updated_at")
	p.UpdatedUser = field.NewString(table, "updated_user")

	p.fillFieldMap()

	return p
}

func (p *pointsRewards) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pointsRewards) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 10)
	p.fieldMap["id"] = p.ID
	p.fieldMap["language"] = p.Language
	p.fieldMap["name"] = p.Name
	p.fieldMap["integral"] = p.Integral
	p.fieldMap["gold_coins"] = p.GoldCoins
	p.fieldMap["image"] = p.Image
	p.fieldMap["status"] = p.Status
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["updated_user"] = p.UpdatedUser
}

func (p pointsRewards) clone(db *gorm.DB) pointsRewards {
	p.pointsRewardsDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pointsRewards) replaceDB(db *gorm.DB) pointsRewards {
	p.pointsRewardsDo.ReplaceDB(db)
	return p
}

type pointsRewardsDo struct{ gen.DO }

type IPointsRewardsDo interface {
	gen.SubQuery
	Debug() IPointsRewardsDo
	WithContext(ctx context.Context) IPointsRewardsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPointsRewardsDo
	WriteDB() IPointsRewardsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPointsRewardsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPointsRewardsDo
	Not(conds ...gen.Condition) IPointsRewardsDo
	Or(conds ...gen.Condition) IPointsRewardsDo
	Select(conds ...field.Expr) IPointsRewardsDo
	Where(conds ...gen.Condition) IPointsRewardsDo
	Order(conds ...field.Expr) IPointsRewardsDo
	Distinct(cols ...field.Expr) IPointsRewardsDo
	Omit(cols ...field.Expr) IPointsRewardsDo
	Join(table schema.Tabler, on ...field.Expr) IPointsRewardsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPointsRewardsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPointsRewardsDo
	Group(cols ...field.Expr) IPointsRewardsDo
	Having(conds ...gen.Condition) IPointsRewardsDo
	Limit(limit int) IPointsRewardsDo
	Offset(offset int) IPointsRewardsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPointsRewardsDo
	Unscoped() IPointsRewardsDo
	Create(values ...*model.PointsRewards) error
	CreateInBatches(values []*model.PointsRewards, batchSize int) error
	Save(values ...*model.PointsRewards) error
	First() (*model.PointsRewards, error)
	Take() (*model.PointsRewards, error)
	Last() (*model.PointsRewards, error)
	Find() ([]*model.PointsRewards, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PointsRewards, err error)
	FindInBatches(result *[]*model.PointsRewards, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PointsRewards) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPointsRewardsDo
	Assign(attrs ...field.AssignExpr) IPointsRewardsDo
	Joins(fields ...field.RelationField) IPointsRewardsDo
	Preload(fields ...field.RelationField) IPointsRewardsDo
	FirstOrInit() (*model.PointsRewards, error)
	FirstOrCreate() (*model.PointsRewards, error)
	FindByPage(offset int, limit int) (result []*model.PointsRewards, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPointsRewardsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pointsRewardsDo) Debug() IPointsRewardsDo {
	return p.withDO(p.DO.Debug())
}

func (p pointsRewardsDo) WithContext(ctx context.Context) IPointsRewardsDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pointsRewardsDo) ReadDB() IPointsRewardsDo {
	return p.Clauses(dbresolver.Read)
}

func (p pointsRewardsDo) WriteDB() IPointsRewardsDo {
	return p.Clauses(dbresolver.Write)
}

func (p pointsRewardsDo) Session(config *gorm.Session) IPointsRewardsDo {
	return p.withDO(p.DO.Session(config))
}

func (p pointsRewardsDo) Clauses(conds ...clause.Expression) IPointsRewardsDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pointsRewardsDo) Returning(value interface{}, columns ...string) IPointsRewardsDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pointsRewardsDo) Not(conds ...gen.Condition) IPointsRewardsDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pointsRewardsDo) Or(conds ...gen.Condition) IPointsRewardsDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pointsRewardsDo) Select(conds ...field.Expr) IPointsRewardsDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pointsRewardsDo) Where(conds ...gen.Condition) IPointsRewardsDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pointsRewardsDo) Order(conds ...field.Expr) IPointsRewardsDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pointsRewardsDo) Distinct(cols ...field.Expr) IPointsRewardsDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pointsRewardsDo) Omit(cols ...field.Expr) IPointsRewardsDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pointsRewardsDo) Join(table schema.Tabler, on ...field.Expr) IPointsRewardsDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pointsRewardsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPointsRewardsDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pointsRewardsDo) RightJoin(table schema.Tabler, on ...field.Expr) IPointsRewardsDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pointsRewardsDo) Group(cols ...field.Expr) IPointsRewardsDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pointsRewardsDo) Having(conds ...gen.Condition) IPointsRewardsDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pointsRewardsDo) Limit(limit int) IPointsRewardsDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pointsRewardsDo) Offset(offset int) IPointsRewardsDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pointsRewardsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPointsRewardsDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pointsRewardsDo) Unscoped() IPointsRewardsDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pointsRewardsDo) Create(values ...*model.PointsRewards) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pointsRewardsDo) CreateInBatches(values []*model.PointsRewards, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pointsRewardsDo) Save(values ...*model.PointsRewards) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pointsRewardsDo) First() (*model.PointsRewards, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PointsRewards), nil
	}
}

func (p pointsRewardsDo) Take() (*model.PointsRewards, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PointsRewards), nil
	}
}

func (p pointsRewardsDo) Last() (*model.PointsRewards, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PointsRewards), nil
	}
}

func (p pointsRewardsDo) Find() ([]*model.PointsRewards, error) {
	result, err := p.DO.Find()
	return result.([]*model.PointsRewards), err
}

func (p pointsRewardsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PointsRewards, err error) {
	buf := make([]*model.PointsRewards, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pointsRewardsDo) FindInBatches(result *[]*model.PointsRewards, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pointsRewardsDo) Attrs(attrs ...field.AssignExpr) IPointsRewardsDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pointsRewardsDo) Assign(attrs ...field.AssignExpr) IPointsRewardsDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pointsRewardsDo) Joins(fields ...field.RelationField) IPointsRewardsDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pointsRewardsDo) Preload(fields ...field.RelationField) IPointsRewardsDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pointsRewardsDo) FirstOrInit() (*model.PointsRewards, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PointsRewards), nil
	}
}

func (p pointsRewardsDo) FirstOrCreate() (*model.PointsRewards, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PointsRewards), nil
	}
}

func (p pointsRewardsDo) FindByPage(offset int, limit int) (result []*model.PointsRewards, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pointsRewardsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pointsRewardsDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pointsRewardsDo) Delete(models ...*model.PointsRewards) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pointsRewardsDo) withDO(do gen.Dao) *pointsRewardsDo {
	p.DO = *do.(*gen.DO)
	return p
}
