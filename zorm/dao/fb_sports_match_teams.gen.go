// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newFbSportsMatchTeams(db *gorm.DB, opts ...gen.DOOption) fbSportsMatchTeams {
	_fbSportsMatchTeams := fbSportsMatchTeams{}

	_fbSportsMatchTeams.fbSportsMatchTeamsDo.UseDB(db, opts...)
	_fbSportsMatchTeams.fbSportsMatchTeamsDo.UseModel(&model.FbSportsMatchTeams{})

	tableName := _fbSportsMatchTeams.fbSportsMatchTeamsDo.TableName()
	_fbSportsMatchTeams.ALL = field.NewAsterisk(tableName)
	_fbSportsMatchTeams.ID = field.NewInt64(tableName, "id")
	_fbSportsMatchTeams.TeamID = field.NewInt64(tableName, "team_id")
	_fbSportsMatchTeams.TeamName = field.NewString(tableName, "team_name")
	_fbSportsMatchTeams.TeamIconURL = field.NewString(tableName, "team_icon_url")
	_fbSportsMatchTeams.CreatedAt = field.NewInt64(tableName, "created_at")
	_fbSportsMatchTeams.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_fbSportsMatchTeams.fillFieldMap()

	return _fbSportsMatchTeams
}

// fbSportsMatchTeams 球队表
type fbSportsMatchTeams struct {
	fbSportsMatchTeamsDo

	ALL         field.Asterisk
	ID          field.Int64  // 主键
	TeamID      field.Int64  // 球队ID
	TeamName    field.String // 球队名称
	TeamIconURL field.String // 球队图标地址
	CreatedAt   field.Int64  // 记录创建时间（时间戳）
	UpdatedAt   field.Int64  // 记录更新时间（时间戳）

	fieldMap map[string]field.Expr
}

func (f fbSportsMatchTeams) Table(newTableName string) *fbSportsMatchTeams {
	f.fbSportsMatchTeamsDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fbSportsMatchTeams) As(alias string) *fbSportsMatchTeams {
	f.fbSportsMatchTeamsDo.DO = *(f.fbSportsMatchTeamsDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fbSportsMatchTeams) updateTableName(table string) *fbSportsMatchTeams {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.TeamID = field.NewInt64(table, "team_id")
	f.TeamName = field.NewString(table, "team_name")
	f.TeamIconURL = field.NewString(table, "team_icon_url")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fbSportsMatchTeams) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fbSportsMatchTeams) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["id"] = f.ID
	f.fieldMap["team_id"] = f.TeamID
	f.fieldMap["team_name"] = f.TeamName
	f.fieldMap["team_icon_url"] = f.TeamIconURL
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fbSportsMatchTeams) clone(db *gorm.DB) fbSportsMatchTeams {
	f.fbSportsMatchTeamsDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fbSportsMatchTeams) replaceDB(db *gorm.DB) fbSportsMatchTeams {
	f.fbSportsMatchTeamsDo.ReplaceDB(db)
	return f
}

type fbSportsMatchTeamsDo struct{ gen.DO }

type IFbSportsMatchTeamsDo interface {
	gen.SubQuery
	Debug() IFbSportsMatchTeamsDo
	WithContext(ctx context.Context) IFbSportsMatchTeamsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFbSportsMatchTeamsDo
	WriteDB() IFbSportsMatchTeamsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFbSportsMatchTeamsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFbSportsMatchTeamsDo
	Not(conds ...gen.Condition) IFbSportsMatchTeamsDo
	Or(conds ...gen.Condition) IFbSportsMatchTeamsDo
	Select(conds ...field.Expr) IFbSportsMatchTeamsDo
	Where(conds ...gen.Condition) IFbSportsMatchTeamsDo
	Order(conds ...field.Expr) IFbSportsMatchTeamsDo
	Distinct(cols ...field.Expr) IFbSportsMatchTeamsDo
	Omit(cols ...field.Expr) IFbSportsMatchTeamsDo
	Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchTeamsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchTeamsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchTeamsDo
	Group(cols ...field.Expr) IFbSportsMatchTeamsDo
	Having(conds ...gen.Condition) IFbSportsMatchTeamsDo
	Limit(limit int) IFbSportsMatchTeamsDo
	Offset(offset int) IFbSportsMatchTeamsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchTeamsDo
	Unscoped() IFbSportsMatchTeamsDo
	Create(values ...*model.FbSportsMatchTeams) error
	CreateInBatches(values []*model.FbSportsMatchTeams, batchSize int) error
	Save(values ...*model.FbSportsMatchTeams) error
	First() (*model.FbSportsMatchTeams, error)
	Take() (*model.FbSportsMatchTeams, error)
	Last() (*model.FbSportsMatchTeams, error)
	Find() ([]*model.FbSportsMatchTeams, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchTeams, err error)
	FindInBatches(result *[]*model.FbSportsMatchTeams, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FbSportsMatchTeams) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFbSportsMatchTeamsDo
	Assign(attrs ...field.AssignExpr) IFbSportsMatchTeamsDo
	Joins(fields ...field.RelationField) IFbSportsMatchTeamsDo
	Preload(fields ...field.RelationField) IFbSportsMatchTeamsDo
	FirstOrInit() (*model.FbSportsMatchTeams, error)
	FirstOrCreate() (*model.FbSportsMatchTeams, error)
	FindByPage(offset int, limit int) (result []*model.FbSportsMatchTeams, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFbSportsMatchTeamsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fbSportsMatchTeamsDo) Debug() IFbSportsMatchTeamsDo {
	return f.withDO(f.DO.Debug())
}

func (f fbSportsMatchTeamsDo) WithContext(ctx context.Context) IFbSportsMatchTeamsDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fbSportsMatchTeamsDo) ReadDB() IFbSportsMatchTeamsDo {
	return f.Clauses(dbresolver.Read)
}

func (f fbSportsMatchTeamsDo) WriteDB() IFbSportsMatchTeamsDo {
	return f.Clauses(dbresolver.Write)
}

func (f fbSportsMatchTeamsDo) Session(config *gorm.Session) IFbSportsMatchTeamsDo {
	return f.withDO(f.DO.Session(config))
}

func (f fbSportsMatchTeamsDo) Clauses(conds ...clause.Expression) IFbSportsMatchTeamsDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fbSportsMatchTeamsDo) Returning(value interface{}, columns ...string) IFbSportsMatchTeamsDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fbSportsMatchTeamsDo) Not(conds ...gen.Condition) IFbSportsMatchTeamsDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fbSportsMatchTeamsDo) Or(conds ...gen.Condition) IFbSportsMatchTeamsDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fbSportsMatchTeamsDo) Select(conds ...field.Expr) IFbSportsMatchTeamsDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fbSportsMatchTeamsDo) Where(conds ...gen.Condition) IFbSportsMatchTeamsDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fbSportsMatchTeamsDo) Order(conds ...field.Expr) IFbSportsMatchTeamsDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fbSportsMatchTeamsDo) Distinct(cols ...field.Expr) IFbSportsMatchTeamsDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fbSportsMatchTeamsDo) Omit(cols ...field.Expr) IFbSportsMatchTeamsDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fbSportsMatchTeamsDo) Join(table schema.Tabler, on ...field.Expr) IFbSportsMatchTeamsDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fbSportsMatchTeamsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchTeamsDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fbSportsMatchTeamsDo) RightJoin(table schema.Tabler, on ...field.Expr) IFbSportsMatchTeamsDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fbSportsMatchTeamsDo) Group(cols ...field.Expr) IFbSportsMatchTeamsDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fbSportsMatchTeamsDo) Having(conds ...gen.Condition) IFbSportsMatchTeamsDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fbSportsMatchTeamsDo) Limit(limit int) IFbSportsMatchTeamsDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fbSportsMatchTeamsDo) Offset(offset int) IFbSportsMatchTeamsDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fbSportsMatchTeamsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFbSportsMatchTeamsDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fbSportsMatchTeamsDo) Unscoped() IFbSportsMatchTeamsDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fbSportsMatchTeamsDo) Create(values ...*model.FbSportsMatchTeams) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fbSportsMatchTeamsDo) CreateInBatches(values []*model.FbSportsMatchTeams, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fbSportsMatchTeamsDo) Save(values ...*model.FbSportsMatchTeams) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fbSportsMatchTeamsDo) First() (*model.FbSportsMatchTeams, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchTeams), nil
	}
}

func (f fbSportsMatchTeamsDo) Take() (*model.FbSportsMatchTeams, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchTeams), nil
	}
}

func (f fbSportsMatchTeamsDo) Last() (*model.FbSportsMatchTeams, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchTeams), nil
	}
}

func (f fbSportsMatchTeamsDo) Find() ([]*model.FbSportsMatchTeams, error) {
	result, err := f.DO.Find()
	return result.([]*model.FbSportsMatchTeams), err
}

func (f fbSportsMatchTeamsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FbSportsMatchTeams, err error) {
	buf := make([]*model.FbSportsMatchTeams, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fbSportsMatchTeamsDo) FindInBatches(result *[]*model.FbSportsMatchTeams, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fbSportsMatchTeamsDo) Attrs(attrs ...field.AssignExpr) IFbSportsMatchTeamsDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fbSportsMatchTeamsDo) Assign(attrs ...field.AssignExpr) IFbSportsMatchTeamsDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fbSportsMatchTeamsDo) Joins(fields ...field.RelationField) IFbSportsMatchTeamsDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fbSportsMatchTeamsDo) Preload(fields ...field.RelationField) IFbSportsMatchTeamsDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fbSportsMatchTeamsDo) FirstOrInit() (*model.FbSportsMatchTeams, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchTeams), nil
	}
}

func (f fbSportsMatchTeamsDo) FirstOrCreate() (*model.FbSportsMatchTeams, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FbSportsMatchTeams), nil
	}
}

func (f fbSportsMatchTeamsDo) FindByPage(offset int, limit int) (result []*model.FbSportsMatchTeams, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fbSportsMatchTeamsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fbSportsMatchTeamsDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fbSportsMatchTeamsDo) Delete(models ...*model.FbSportsMatchTeams) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fbSportsMatchTeamsDo) withDO(do gen.Dao) *fbSportsMatchTeamsDo {
	f.DO = *do.(*gen.DO)
	return f
}
