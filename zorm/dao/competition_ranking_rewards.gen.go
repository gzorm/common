// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/common/zorm/model"
)

func newCompetitionRankingRewards(db *gorm.DB, opts ...gen.DOOption) competitionRankingRewards {
	_competitionRankingRewards := competitionRankingRewards{}

	_competitionRankingRewards.competitionRankingRewardsDo.UseDB(db, opts...)
	_competitionRankingRewards.competitionRankingRewardsDo.UseModel(&model.CompetitionRankingRewards{})

	tableName := _competitionRankingRewards.competitionRankingRewardsDo.TableName()
	_competitionRankingRewards.ALL = field.NewAsterisk(tableName)
	_competitionRankingRewards.ID = field.NewInt64(tableName, "id")
	_competitionRankingRewards.RoomFee = field.NewInt64(tableName, "room_fee")
	_competitionRankingRewards.MinRank = field.NewInt64(tableName, "min_rank")
	_competitionRankingRewards.MaxRank = field.NewInt64(tableName, "max_rank")
	_competitionRankingRewards.RewardAmount = field.NewInt64(tableName, "reward_amount")
	_competitionRankingRewards.GoldCoins = field.NewInt64(tableName, "gold_coins")
	_competitionRankingRewards.RealAmount = field.NewInt64(tableName, "real_amount")
	_competitionRankingRewards.Status = field.NewInt64(tableName, "status")
	_competitionRankingRewards.CreatedAt = field.NewInt64(tableName, "created_at")
	_competitionRankingRewards.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_competitionRankingRewards.UpdatedUser = field.NewString(tableName, "updated_user")

	_competitionRankingRewards.fillFieldMap()

	return _competitionRankingRewards
}

// competitionRankingRewards 比赛排名奖励配置
type competitionRankingRewards struct {
	competitionRankingRewardsDo

	ALL          field.Asterisk
	ID           field.Int64  // 主键，唯一标识每条记录
	RoomFee      field.Int64  // 房费
	MinRank      field.Int64  // 名次范围的起始名次
	MaxRank      field.Int64  // 名次范围的结束名次
	RewardAmount field.Int64  // 奖励积分
	GoldCoins    field.Int64  // 金币
	RealAmount   field.Int64  // 实际价值
	Status       field.Int64  // 状态: 1=开启, 2=禁用
	CreatedAt    field.Int64  // 创建时间，时间戳格式
	UpdatedAt    field.Int64  // 更新时间，时间戳格式
	UpdatedUser  field.String // 最后修改人

	fieldMap map[string]field.Expr
}

func (c competitionRankingRewards) Table(newTableName string) *competitionRankingRewards {
	c.competitionRankingRewardsDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c competitionRankingRewards) As(alias string) *competitionRankingRewards {
	c.competitionRankingRewardsDo.DO = *(c.competitionRankingRewardsDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *competitionRankingRewards) updateTableName(table string) *competitionRankingRewards {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.RoomFee = field.NewInt64(table, "room_fee")
	c.MinRank = field.NewInt64(table, "min_rank")
	c.MaxRank = field.NewInt64(table, "max_rank")
	c.RewardAmount = field.NewInt64(table, "reward_amount")
	c.GoldCoins = field.NewInt64(table, "gold_coins")
	c.RealAmount = field.NewInt64(table, "real_amount")
	c.Status = field.NewInt64(table, "status")
	c.CreatedAt = field.NewInt64(table, "created_at")
	c.UpdatedAt = field.NewInt64(table, "updated_at")
	c.UpdatedUser = field.NewString(table, "updated_user")

	c.fillFieldMap()

	return c
}

func (c *competitionRankingRewards) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *competitionRankingRewards) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 11)
	c.fieldMap["id"] = c.ID
	c.fieldMap["room_fee"] = c.RoomFee
	c.fieldMap["min_rank"] = c.MinRank
	c.fieldMap["max_rank"] = c.MaxRank
	c.fieldMap["reward_amount"] = c.RewardAmount
	c.fieldMap["gold_coins"] = c.GoldCoins
	c.fieldMap["real_amount"] = c.RealAmount
	c.fieldMap["status"] = c.Status
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["updated_user"] = c.UpdatedUser
}

func (c competitionRankingRewards) clone(db *gorm.DB) competitionRankingRewards {
	c.competitionRankingRewardsDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c competitionRankingRewards) replaceDB(db *gorm.DB) competitionRankingRewards {
	c.competitionRankingRewardsDo.ReplaceDB(db)
	return c
}

type competitionRankingRewardsDo struct{ gen.DO }

type ICompetitionRankingRewardsDo interface {
	gen.SubQuery
	Debug() ICompetitionRankingRewardsDo
	WithContext(ctx context.Context) ICompetitionRankingRewardsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICompetitionRankingRewardsDo
	WriteDB() ICompetitionRankingRewardsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICompetitionRankingRewardsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICompetitionRankingRewardsDo
	Not(conds ...gen.Condition) ICompetitionRankingRewardsDo
	Or(conds ...gen.Condition) ICompetitionRankingRewardsDo
	Select(conds ...field.Expr) ICompetitionRankingRewardsDo
	Where(conds ...gen.Condition) ICompetitionRankingRewardsDo
	Order(conds ...field.Expr) ICompetitionRankingRewardsDo
	Distinct(cols ...field.Expr) ICompetitionRankingRewardsDo
	Omit(cols ...field.Expr) ICompetitionRankingRewardsDo
	Join(table schema.Tabler, on ...field.Expr) ICompetitionRankingRewardsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICompetitionRankingRewardsDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICompetitionRankingRewardsDo
	Group(cols ...field.Expr) ICompetitionRankingRewardsDo
	Having(conds ...gen.Condition) ICompetitionRankingRewardsDo
	Limit(limit int) ICompetitionRankingRewardsDo
	Offset(offset int) ICompetitionRankingRewardsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICompetitionRankingRewardsDo
	Unscoped() ICompetitionRankingRewardsDo
	Create(values ...*model.CompetitionRankingRewards) error
	CreateInBatches(values []*model.CompetitionRankingRewards, batchSize int) error
	Save(values ...*model.CompetitionRankingRewards) error
	First() (*model.CompetitionRankingRewards, error)
	Take() (*model.CompetitionRankingRewards, error)
	Last() (*model.CompetitionRankingRewards, error)
	Find() ([]*model.CompetitionRankingRewards, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CompetitionRankingRewards, err error)
	FindInBatches(result *[]*model.CompetitionRankingRewards, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CompetitionRankingRewards) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICompetitionRankingRewardsDo
	Assign(attrs ...field.AssignExpr) ICompetitionRankingRewardsDo
	Joins(fields ...field.RelationField) ICompetitionRankingRewardsDo
	Preload(fields ...field.RelationField) ICompetitionRankingRewardsDo
	FirstOrInit() (*model.CompetitionRankingRewards, error)
	FirstOrCreate() (*model.CompetitionRankingRewards, error)
	FindByPage(offset int, limit int) (result []*model.CompetitionRankingRewards, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICompetitionRankingRewardsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c competitionRankingRewardsDo) Debug() ICompetitionRankingRewardsDo {
	return c.withDO(c.DO.Debug())
}

func (c competitionRankingRewardsDo) WithContext(ctx context.Context) ICompetitionRankingRewardsDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c competitionRankingRewardsDo) ReadDB() ICompetitionRankingRewardsDo {
	return c.Clauses(dbresolver.Read)
}

func (c competitionRankingRewardsDo) WriteDB() ICompetitionRankingRewardsDo {
	return c.Clauses(dbresolver.Write)
}

func (c competitionRankingRewardsDo) Session(config *gorm.Session) ICompetitionRankingRewardsDo {
	return c.withDO(c.DO.Session(config))
}

func (c competitionRankingRewardsDo) Clauses(conds ...clause.Expression) ICompetitionRankingRewardsDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c competitionRankingRewardsDo) Returning(value interface{}, columns ...string) ICompetitionRankingRewardsDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c competitionRankingRewardsDo) Not(conds ...gen.Condition) ICompetitionRankingRewardsDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c competitionRankingRewardsDo) Or(conds ...gen.Condition) ICompetitionRankingRewardsDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c competitionRankingRewardsDo) Select(conds ...field.Expr) ICompetitionRankingRewardsDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c competitionRankingRewardsDo) Where(conds ...gen.Condition) ICompetitionRankingRewardsDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c competitionRankingRewardsDo) Order(conds ...field.Expr) ICompetitionRankingRewardsDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c competitionRankingRewardsDo) Distinct(cols ...field.Expr) ICompetitionRankingRewardsDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c competitionRankingRewardsDo) Omit(cols ...field.Expr) ICompetitionRankingRewardsDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c competitionRankingRewardsDo) Join(table schema.Tabler, on ...field.Expr) ICompetitionRankingRewardsDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c competitionRankingRewardsDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICompetitionRankingRewardsDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c competitionRankingRewardsDo) RightJoin(table schema.Tabler, on ...field.Expr) ICompetitionRankingRewardsDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c competitionRankingRewardsDo) Group(cols ...field.Expr) ICompetitionRankingRewardsDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c competitionRankingRewardsDo) Having(conds ...gen.Condition) ICompetitionRankingRewardsDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c competitionRankingRewardsDo) Limit(limit int) ICompetitionRankingRewardsDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c competitionRankingRewardsDo) Offset(offset int) ICompetitionRankingRewardsDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c competitionRankingRewardsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICompetitionRankingRewardsDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c competitionRankingRewardsDo) Unscoped() ICompetitionRankingRewardsDo {
	return c.withDO(c.DO.Unscoped())
}

func (c competitionRankingRewardsDo) Create(values ...*model.CompetitionRankingRewards) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c competitionRankingRewardsDo) CreateInBatches(values []*model.CompetitionRankingRewards, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c competitionRankingRewardsDo) Save(values ...*model.CompetitionRankingRewards) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c competitionRankingRewardsDo) First() (*model.CompetitionRankingRewards, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompetitionRankingRewards), nil
	}
}

func (c competitionRankingRewardsDo) Take() (*model.CompetitionRankingRewards, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompetitionRankingRewards), nil
	}
}

func (c competitionRankingRewardsDo) Last() (*model.CompetitionRankingRewards, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompetitionRankingRewards), nil
	}
}

func (c competitionRankingRewardsDo) Find() ([]*model.CompetitionRankingRewards, error) {
	result, err := c.DO.Find()
	return result.([]*model.CompetitionRankingRewards), err
}

func (c competitionRankingRewardsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CompetitionRankingRewards, err error) {
	buf := make([]*model.CompetitionRankingRewards, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c competitionRankingRewardsDo) FindInBatches(result *[]*model.CompetitionRankingRewards, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c competitionRankingRewardsDo) Attrs(attrs ...field.AssignExpr) ICompetitionRankingRewardsDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c competitionRankingRewardsDo) Assign(attrs ...field.AssignExpr) ICompetitionRankingRewardsDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c competitionRankingRewardsDo) Joins(fields ...field.RelationField) ICompetitionRankingRewardsDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c competitionRankingRewardsDo) Preload(fields ...field.RelationField) ICompetitionRankingRewardsDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c competitionRankingRewardsDo) FirstOrInit() (*model.CompetitionRankingRewards, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompetitionRankingRewards), nil
	}
}

func (c competitionRankingRewardsDo) FirstOrCreate() (*model.CompetitionRankingRewards, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompetitionRankingRewards), nil
	}
}

func (c competitionRankingRewardsDo) FindByPage(offset int, limit int) (result []*model.CompetitionRankingRewards, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c competitionRankingRewardsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c competitionRankingRewardsDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c competitionRankingRewardsDo) Delete(models ...*model.CompetitionRankingRewards) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *competitionRankingRewardsDo) withDO(do gen.Dao) *competitionRankingRewardsDo {
	c.DO = *do.(*gen.DO)
	return c
}
