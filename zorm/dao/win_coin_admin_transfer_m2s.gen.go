// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/common/zorm/model"
)

func newWinCoinAdminTransferM2(db *gorm.DB, opts ...gen.DOOption) winCoinAdminTransferM2 {
	_winCoinAdminTransferM2 := winCoinAdminTransferM2{}

	_winCoinAdminTransferM2.winCoinAdminTransferM2Do.UseDB(db, opts...)
	_winCoinAdminTransferM2.winCoinAdminTransferM2Do.UseModel(&model.WinCoinAdminTransferM2{})

	tableName := _winCoinAdminTransferM2.winCoinAdminTransferM2Do.TableName()
	_winCoinAdminTransferM2.ALL = field.NewAsterisk(tableName)
	_winCoinAdminTransferM2.ID = field.NewInt64(tableName, "id")
	_winCoinAdminTransferM2.AdminID = field.NewInt64(tableName, "admin_id")
	_winCoinAdminTransferM2.Coin = field.NewField(tableName, "coin")
	_winCoinAdminTransferM2.CoinBefore = field.NewField(tableName, "coin_before")
	_winCoinAdminTransferM2.UID = field.NewInt64(tableName, "uid")
	_winCoinAdminTransferM2.Username = field.NewString(tableName, "username")
	_winCoinAdminTransferM2.Category = field.NewInt64(tableName, "category")
	_winCoinAdminTransferM2.Mark = field.NewString(tableName, "mark")
	_winCoinAdminTransferM2.CreatedAt = field.NewInt64(tableName, "created_at")
	_winCoinAdminTransferM2.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_winCoinAdminTransferM2.FlowClaim = field.NewInt64(tableName, "flow_claim")
	_winCoinAdminTransferM2.Message = field.NewString(tableName, "message")
	_winCoinAdminTransferM2.MerchantID = field.NewInt64(tableName, "merchant_id")

	_winCoinAdminTransferM2.fillFieldMap()

	return _winCoinAdminTransferM2
}

// winCoinAdminTransferM2 后台调账记录
type winCoinAdminTransferM2 struct {
	winCoinAdminTransferM2Do

	ALL        field.Asterisk
	ID         field.Int64
	AdminID    field.Int64  // 管理员ID
	Coin       field.Field  // 调账金额
	CoinBefore field.Field  // 调账前金额
	UID        field.Int64  // 用户ID
	Username   field.String // 用户名
	Category   field.Int64  // 调账原因:0-其他 1-误存调账 2-活动调账
	Mark       field.String // 调账原因
	CreatedAt  field.Int64
	UpdatedAt  field.Int64
	FlowClaim  field.Int64  // 流水倍数
	Message    field.String // 通知客户信息
	MerchantID field.Int64  // 商户id

	fieldMap map[string]field.Expr
}

func (w winCoinAdminTransferM2) Table(newTableName string) *winCoinAdminTransferM2 {
	w.winCoinAdminTransferM2Do.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winCoinAdminTransferM2) As(alias string) *winCoinAdminTransferM2 {
	w.winCoinAdminTransferM2Do.DO = *(w.winCoinAdminTransferM2Do.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winCoinAdminTransferM2) updateTableName(table string) *winCoinAdminTransferM2 {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.AdminID = field.NewInt64(table, "admin_id")
	w.Coin = field.NewField(table, "coin")
	w.CoinBefore = field.NewField(table, "coin_before")
	w.UID = field.NewInt64(table, "uid")
	w.Username = field.NewString(table, "username")
	w.Category = field.NewInt64(table, "category")
	w.Mark = field.NewString(table, "mark")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")
	w.FlowClaim = field.NewInt64(table, "flow_claim")
	w.Message = field.NewString(table, "message")
	w.MerchantID = field.NewInt64(table, "merchant_id")

	w.fillFieldMap()

	return w
}

func (w *winCoinAdminTransferM2) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winCoinAdminTransferM2) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 13)
	w.fieldMap["id"] = w.ID
	w.fieldMap["admin_id"] = w.AdminID
	w.fieldMap["coin"] = w.Coin
	w.fieldMap["coin_before"] = w.CoinBefore
	w.fieldMap["uid"] = w.UID
	w.fieldMap["username"] = w.Username
	w.fieldMap["category"] = w.Category
	w.fieldMap["mark"] = w.Mark
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["flow_claim"] = w.FlowClaim
	w.fieldMap["message"] = w.Message
	w.fieldMap["merchant_id"] = w.MerchantID
}

func (w winCoinAdminTransferM2) clone(db *gorm.DB) winCoinAdminTransferM2 {
	w.winCoinAdminTransferM2Do.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winCoinAdminTransferM2) replaceDB(db *gorm.DB) winCoinAdminTransferM2 {
	w.winCoinAdminTransferM2Do.ReplaceDB(db)
	return w
}

type winCoinAdminTransferM2Do struct{ gen.DO }

type IWinCoinAdminTransferM2Do interface {
	gen.SubQuery
	Debug() IWinCoinAdminTransferM2Do
	WithContext(ctx context.Context) IWinCoinAdminTransferM2Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinCoinAdminTransferM2Do
	WriteDB() IWinCoinAdminTransferM2Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinCoinAdminTransferM2Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinCoinAdminTransferM2Do
	Not(conds ...gen.Condition) IWinCoinAdminTransferM2Do
	Or(conds ...gen.Condition) IWinCoinAdminTransferM2Do
	Select(conds ...field.Expr) IWinCoinAdminTransferM2Do
	Where(conds ...gen.Condition) IWinCoinAdminTransferM2Do
	Order(conds ...field.Expr) IWinCoinAdminTransferM2Do
	Distinct(cols ...field.Expr) IWinCoinAdminTransferM2Do
	Omit(cols ...field.Expr) IWinCoinAdminTransferM2Do
	Join(table schema.Tabler, on ...field.Expr) IWinCoinAdminTransferM2Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinCoinAdminTransferM2Do
	RightJoin(table schema.Tabler, on ...field.Expr) IWinCoinAdminTransferM2Do
	Group(cols ...field.Expr) IWinCoinAdminTransferM2Do
	Having(conds ...gen.Condition) IWinCoinAdminTransferM2Do
	Limit(limit int) IWinCoinAdminTransferM2Do
	Offset(offset int) IWinCoinAdminTransferM2Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinCoinAdminTransferM2Do
	Unscoped() IWinCoinAdminTransferM2Do
	Create(values ...*model.WinCoinAdminTransferM2) error
	CreateInBatches(values []*model.WinCoinAdminTransferM2, batchSize int) error
	Save(values ...*model.WinCoinAdminTransferM2) error
	First() (*model.WinCoinAdminTransferM2, error)
	Take() (*model.WinCoinAdminTransferM2, error)
	Last() (*model.WinCoinAdminTransferM2, error)
	Find() ([]*model.WinCoinAdminTransferM2, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinCoinAdminTransferM2, err error)
	FindInBatches(result *[]*model.WinCoinAdminTransferM2, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinCoinAdminTransferM2) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinCoinAdminTransferM2Do
	Assign(attrs ...field.AssignExpr) IWinCoinAdminTransferM2Do
	Joins(fields ...field.RelationField) IWinCoinAdminTransferM2Do
	Preload(fields ...field.RelationField) IWinCoinAdminTransferM2Do
	FirstOrInit() (*model.WinCoinAdminTransferM2, error)
	FirstOrCreate() (*model.WinCoinAdminTransferM2, error)
	FindByPage(offset int, limit int) (result []*model.WinCoinAdminTransferM2, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinCoinAdminTransferM2Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winCoinAdminTransferM2Do) Debug() IWinCoinAdminTransferM2Do {
	return w.withDO(w.DO.Debug())
}

func (w winCoinAdminTransferM2Do) WithContext(ctx context.Context) IWinCoinAdminTransferM2Do {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winCoinAdminTransferM2Do) ReadDB() IWinCoinAdminTransferM2Do {
	return w.Clauses(dbresolver.Read)
}

func (w winCoinAdminTransferM2Do) WriteDB() IWinCoinAdminTransferM2Do {
	return w.Clauses(dbresolver.Write)
}

func (w winCoinAdminTransferM2Do) Session(config *gorm.Session) IWinCoinAdminTransferM2Do {
	return w.withDO(w.DO.Session(config))
}

func (w winCoinAdminTransferM2Do) Clauses(conds ...clause.Expression) IWinCoinAdminTransferM2Do {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winCoinAdminTransferM2Do) Returning(value interface{}, columns ...string) IWinCoinAdminTransferM2Do {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winCoinAdminTransferM2Do) Not(conds ...gen.Condition) IWinCoinAdminTransferM2Do {
	return w.withDO(w.DO.Not(conds...))
}

func (w winCoinAdminTransferM2Do) Or(conds ...gen.Condition) IWinCoinAdminTransferM2Do {
	return w.withDO(w.DO.Or(conds...))
}

func (w winCoinAdminTransferM2Do) Select(conds ...field.Expr) IWinCoinAdminTransferM2Do {
	return w.withDO(w.DO.Select(conds...))
}

func (w winCoinAdminTransferM2Do) Where(conds ...gen.Condition) IWinCoinAdminTransferM2Do {
	return w.withDO(w.DO.Where(conds...))
}

func (w winCoinAdminTransferM2Do) Order(conds ...field.Expr) IWinCoinAdminTransferM2Do {
	return w.withDO(w.DO.Order(conds...))
}

func (w winCoinAdminTransferM2Do) Distinct(cols ...field.Expr) IWinCoinAdminTransferM2Do {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winCoinAdminTransferM2Do) Omit(cols ...field.Expr) IWinCoinAdminTransferM2Do {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winCoinAdminTransferM2Do) Join(table schema.Tabler, on ...field.Expr) IWinCoinAdminTransferM2Do {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winCoinAdminTransferM2Do) LeftJoin(table schema.Tabler, on ...field.Expr) IWinCoinAdminTransferM2Do {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winCoinAdminTransferM2Do) RightJoin(table schema.Tabler, on ...field.Expr) IWinCoinAdminTransferM2Do {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winCoinAdminTransferM2Do) Group(cols ...field.Expr) IWinCoinAdminTransferM2Do {
	return w.withDO(w.DO.Group(cols...))
}

func (w winCoinAdminTransferM2Do) Having(conds ...gen.Condition) IWinCoinAdminTransferM2Do {
	return w.withDO(w.DO.Having(conds...))
}

func (w winCoinAdminTransferM2Do) Limit(limit int) IWinCoinAdminTransferM2Do {
	return w.withDO(w.DO.Limit(limit))
}

func (w winCoinAdminTransferM2Do) Offset(offset int) IWinCoinAdminTransferM2Do {
	return w.withDO(w.DO.Offset(offset))
}

func (w winCoinAdminTransferM2Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinCoinAdminTransferM2Do {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winCoinAdminTransferM2Do) Unscoped() IWinCoinAdminTransferM2Do {
	return w.withDO(w.DO.Unscoped())
}

func (w winCoinAdminTransferM2Do) Create(values ...*model.WinCoinAdminTransferM2) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winCoinAdminTransferM2Do) CreateInBatches(values []*model.WinCoinAdminTransferM2, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winCoinAdminTransferM2Do) Save(values ...*model.WinCoinAdminTransferM2) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winCoinAdminTransferM2Do) First() (*model.WinCoinAdminTransferM2, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinAdminTransferM2), nil
	}
}

func (w winCoinAdminTransferM2Do) Take() (*model.WinCoinAdminTransferM2, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinAdminTransferM2), nil
	}
}

func (w winCoinAdminTransferM2Do) Last() (*model.WinCoinAdminTransferM2, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinAdminTransferM2), nil
	}
}

func (w winCoinAdminTransferM2Do) Find() ([]*model.WinCoinAdminTransferM2, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinCoinAdminTransferM2), err
}

func (w winCoinAdminTransferM2Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinCoinAdminTransferM2, err error) {
	buf := make([]*model.WinCoinAdminTransferM2, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winCoinAdminTransferM2Do) FindInBatches(result *[]*model.WinCoinAdminTransferM2, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winCoinAdminTransferM2Do) Attrs(attrs ...field.AssignExpr) IWinCoinAdminTransferM2Do {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winCoinAdminTransferM2Do) Assign(attrs ...field.AssignExpr) IWinCoinAdminTransferM2Do {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winCoinAdminTransferM2Do) Joins(fields ...field.RelationField) IWinCoinAdminTransferM2Do {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winCoinAdminTransferM2Do) Preload(fields ...field.RelationField) IWinCoinAdminTransferM2Do {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winCoinAdminTransferM2Do) FirstOrInit() (*model.WinCoinAdminTransferM2, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinAdminTransferM2), nil
	}
}

func (w winCoinAdminTransferM2Do) FirstOrCreate() (*model.WinCoinAdminTransferM2, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinAdminTransferM2), nil
	}
}

func (w winCoinAdminTransferM2Do) FindByPage(offset int, limit int) (result []*model.WinCoinAdminTransferM2, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winCoinAdminTransferM2Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winCoinAdminTransferM2Do) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winCoinAdminTransferM2Do) Delete(models ...*model.WinCoinAdminTransferM2) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winCoinAdminTransferM2Do) withDO(do gen.Dao) *winCoinAdminTransferM2Do {
	w.DO = *do.(*gen.DO)
	return w
}
