// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newChristmasNewUserSupportRule(db *gorm.DB, opts ...gen.DOOption) christmasNewUserSupportRule {
	_christmasNewUserSupportRule := christmasNewUserSupportRule{}

	_christmasNewUserSupportRule.christmasNewUserSupportRuleDo.UseDB(db, opts...)
	_christmasNewUserSupportRule.christmasNewUserSupportRuleDo.UseModel(&model.ChristmasNewUserSupportRule{})

	tableName := _christmasNewUserSupportRule.christmasNewUserSupportRuleDo.TableName()
	_christmasNewUserSupportRule.ALL = field.NewAsterisk(tableName)
	_christmasNewUserSupportRule.ID = field.NewInt64(tableName, "id")
	_christmasNewUserSupportRule.RuleID = field.NewInt64(tableName, "rule_id")
	_christmasNewUserSupportRule.ActivityID = field.NewInt64(tableName, "activity_id")
	_christmasNewUserSupportRule.NewOneSupportSuccessRangeFrom = field.NewField(tableName, "new_one_support_success_range_from")
	_christmasNewUserSupportRule.NewOneSupportSuccessRangeTo = field.NewField(tableName, "new_one_support_success_range_to")
	_christmasNewUserSupportRule.NewOneSupportSuccessPr = field.NewField(tableName, "new_one_support_success_pr")
	_christmasNewUserSupportRule.CreateAt = field.NewInt64(tableName, "create_at")
	_christmasNewUserSupportRule.UpdateAt = field.NewInt64(tableName, "update_at")
	_christmasNewUserSupportRule.OpUser = field.NewString(tableName, "op_user")

	_christmasNewUserSupportRule.fillFieldMap()

	return _christmasNewUserSupportRule
}

// christmasNewUserSupportRule 圣诞活动新用户一次助力规则表
type christmasNewUserSupportRule struct {
	christmasNewUserSupportRuleDo

	ALL                           field.Asterisk
	ID                            field.Int64  // 自增主键
	RuleID                        field.Int64  // 规则ID
	ActivityID                    field.Int64  // 活动ID
	NewOneSupportSuccessRangeFrom field.Field  // 新用户一次助力成功充值金额范围起
	NewOneSupportSuccessRangeTo   field.Field  // 新用户一次助力成功充值金额范围止
	NewOneSupportSuccessPr        field.Field  // 新用户一次助力成功比例
	CreateAt                      field.Int64  // 创建时间
	UpdateAt                      field.Int64  // 修改时间
	OpUser                        field.String // 操作人

	fieldMap map[string]field.Expr
}

func (c christmasNewUserSupportRule) Table(newTableName string) *christmasNewUserSupportRule {
	c.christmasNewUserSupportRuleDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c christmasNewUserSupportRule) As(alias string) *christmasNewUserSupportRule {
	c.christmasNewUserSupportRuleDo.DO = *(c.christmasNewUserSupportRuleDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *christmasNewUserSupportRule) updateTableName(table string) *christmasNewUserSupportRule {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.RuleID = field.NewInt64(table, "rule_id")
	c.ActivityID = field.NewInt64(table, "activity_id")
	c.NewOneSupportSuccessRangeFrom = field.NewField(table, "new_one_support_success_range_from")
	c.NewOneSupportSuccessRangeTo = field.NewField(table, "new_one_support_success_range_to")
	c.NewOneSupportSuccessPr = field.NewField(table, "new_one_support_success_pr")
	c.CreateAt = field.NewInt64(table, "create_at")
	c.UpdateAt = field.NewInt64(table, "update_at")
	c.OpUser = field.NewString(table, "op_user")

	c.fillFieldMap()

	return c
}

func (c *christmasNewUserSupportRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *christmasNewUserSupportRule) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["rule_id"] = c.RuleID
	c.fieldMap["activity_id"] = c.ActivityID
	c.fieldMap["new_one_support_success_range_from"] = c.NewOneSupportSuccessRangeFrom
	c.fieldMap["new_one_support_success_range_to"] = c.NewOneSupportSuccessRangeTo
	c.fieldMap["new_one_support_success_pr"] = c.NewOneSupportSuccessPr
	c.fieldMap["create_at"] = c.CreateAt
	c.fieldMap["update_at"] = c.UpdateAt
	c.fieldMap["op_user"] = c.OpUser
}

func (c christmasNewUserSupportRule) clone(db *gorm.DB) christmasNewUserSupportRule {
	c.christmasNewUserSupportRuleDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c christmasNewUserSupportRule) replaceDB(db *gorm.DB) christmasNewUserSupportRule {
	c.christmasNewUserSupportRuleDo.ReplaceDB(db)
	return c
}

type christmasNewUserSupportRuleDo struct{ gen.DO }

type IChristmasNewUserSupportRuleDo interface {
	gen.SubQuery
	Debug() IChristmasNewUserSupportRuleDo
	WithContext(ctx context.Context) IChristmasNewUserSupportRuleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IChristmasNewUserSupportRuleDo
	WriteDB() IChristmasNewUserSupportRuleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IChristmasNewUserSupportRuleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IChristmasNewUserSupportRuleDo
	Not(conds ...gen.Condition) IChristmasNewUserSupportRuleDo
	Or(conds ...gen.Condition) IChristmasNewUserSupportRuleDo
	Select(conds ...field.Expr) IChristmasNewUserSupportRuleDo
	Where(conds ...gen.Condition) IChristmasNewUserSupportRuleDo
	Order(conds ...field.Expr) IChristmasNewUserSupportRuleDo
	Distinct(cols ...field.Expr) IChristmasNewUserSupportRuleDo
	Omit(cols ...field.Expr) IChristmasNewUserSupportRuleDo
	Join(table schema.Tabler, on ...field.Expr) IChristmasNewUserSupportRuleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IChristmasNewUserSupportRuleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IChristmasNewUserSupportRuleDo
	Group(cols ...field.Expr) IChristmasNewUserSupportRuleDo
	Having(conds ...gen.Condition) IChristmasNewUserSupportRuleDo
	Limit(limit int) IChristmasNewUserSupportRuleDo
	Offset(offset int) IChristmasNewUserSupportRuleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IChristmasNewUserSupportRuleDo
	Unscoped() IChristmasNewUserSupportRuleDo
	Create(values ...*model.ChristmasNewUserSupportRule) error
	CreateInBatches(values []*model.ChristmasNewUserSupportRule, batchSize int) error
	Save(values ...*model.ChristmasNewUserSupportRule) error
	First() (*model.ChristmasNewUserSupportRule, error)
	Take() (*model.ChristmasNewUserSupportRule, error)
	Last() (*model.ChristmasNewUserSupportRule, error)
	Find() ([]*model.ChristmasNewUserSupportRule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChristmasNewUserSupportRule, err error)
	FindInBatches(result *[]*model.ChristmasNewUserSupportRule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ChristmasNewUserSupportRule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IChristmasNewUserSupportRuleDo
	Assign(attrs ...field.AssignExpr) IChristmasNewUserSupportRuleDo
	Joins(fields ...field.RelationField) IChristmasNewUserSupportRuleDo
	Preload(fields ...field.RelationField) IChristmasNewUserSupportRuleDo
	FirstOrInit() (*model.ChristmasNewUserSupportRule, error)
	FirstOrCreate() (*model.ChristmasNewUserSupportRule, error)
	FindByPage(offset int, limit int) (result []*model.ChristmasNewUserSupportRule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IChristmasNewUserSupportRuleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c christmasNewUserSupportRuleDo) Debug() IChristmasNewUserSupportRuleDo {
	return c.withDO(c.DO.Debug())
}

func (c christmasNewUserSupportRuleDo) WithContext(ctx context.Context) IChristmasNewUserSupportRuleDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c christmasNewUserSupportRuleDo) ReadDB() IChristmasNewUserSupportRuleDo {
	return c.Clauses(dbresolver.Read)
}

func (c christmasNewUserSupportRuleDo) WriteDB() IChristmasNewUserSupportRuleDo {
	return c.Clauses(dbresolver.Write)
}

func (c christmasNewUserSupportRuleDo) Session(config *gorm.Session) IChristmasNewUserSupportRuleDo {
	return c.withDO(c.DO.Session(config))
}

func (c christmasNewUserSupportRuleDo) Clauses(conds ...clause.Expression) IChristmasNewUserSupportRuleDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c christmasNewUserSupportRuleDo) Returning(value interface{}, columns ...string) IChristmasNewUserSupportRuleDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c christmasNewUserSupportRuleDo) Not(conds ...gen.Condition) IChristmasNewUserSupportRuleDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c christmasNewUserSupportRuleDo) Or(conds ...gen.Condition) IChristmasNewUserSupportRuleDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c christmasNewUserSupportRuleDo) Select(conds ...field.Expr) IChristmasNewUserSupportRuleDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c christmasNewUserSupportRuleDo) Where(conds ...gen.Condition) IChristmasNewUserSupportRuleDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c christmasNewUserSupportRuleDo) Order(conds ...field.Expr) IChristmasNewUserSupportRuleDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c christmasNewUserSupportRuleDo) Distinct(cols ...field.Expr) IChristmasNewUserSupportRuleDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c christmasNewUserSupportRuleDo) Omit(cols ...field.Expr) IChristmasNewUserSupportRuleDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c christmasNewUserSupportRuleDo) Join(table schema.Tabler, on ...field.Expr) IChristmasNewUserSupportRuleDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c christmasNewUserSupportRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IChristmasNewUserSupportRuleDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c christmasNewUserSupportRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) IChristmasNewUserSupportRuleDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c christmasNewUserSupportRuleDo) Group(cols ...field.Expr) IChristmasNewUserSupportRuleDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c christmasNewUserSupportRuleDo) Having(conds ...gen.Condition) IChristmasNewUserSupportRuleDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c christmasNewUserSupportRuleDo) Limit(limit int) IChristmasNewUserSupportRuleDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c christmasNewUserSupportRuleDo) Offset(offset int) IChristmasNewUserSupportRuleDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c christmasNewUserSupportRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IChristmasNewUserSupportRuleDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c christmasNewUserSupportRuleDo) Unscoped() IChristmasNewUserSupportRuleDo {
	return c.withDO(c.DO.Unscoped())
}

func (c christmasNewUserSupportRuleDo) Create(values ...*model.ChristmasNewUserSupportRule) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c christmasNewUserSupportRuleDo) CreateInBatches(values []*model.ChristmasNewUserSupportRule, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c christmasNewUserSupportRuleDo) Save(values ...*model.ChristmasNewUserSupportRule) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c christmasNewUserSupportRuleDo) First() (*model.ChristmasNewUserSupportRule, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChristmasNewUserSupportRule), nil
	}
}

func (c christmasNewUserSupportRuleDo) Take() (*model.ChristmasNewUserSupportRule, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChristmasNewUserSupportRule), nil
	}
}

func (c christmasNewUserSupportRuleDo) Last() (*model.ChristmasNewUserSupportRule, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChristmasNewUserSupportRule), nil
	}
}

func (c christmasNewUserSupportRuleDo) Find() ([]*model.ChristmasNewUserSupportRule, error) {
	result, err := c.DO.Find()
	return result.([]*model.ChristmasNewUserSupportRule), err
}

func (c christmasNewUserSupportRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChristmasNewUserSupportRule, err error) {
	buf := make([]*model.ChristmasNewUserSupportRule, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c christmasNewUserSupportRuleDo) FindInBatches(result *[]*model.ChristmasNewUserSupportRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c christmasNewUserSupportRuleDo) Attrs(attrs ...field.AssignExpr) IChristmasNewUserSupportRuleDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c christmasNewUserSupportRuleDo) Assign(attrs ...field.AssignExpr) IChristmasNewUserSupportRuleDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c christmasNewUserSupportRuleDo) Joins(fields ...field.RelationField) IChristmasNewUserSupportRuleDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c christmasNewUserSupportRuleDo) Preload(fields ...field.RelationField) IChristmasNewUserSupportRuleDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c christmasNewUserSupportRuleDo) FirstOrInit() (*model.ChristmasNewUserSupportRule, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChristmasNewUserSupportRule), nil
	}
}

func (c christmasNewUserSupportRuleDo) FirstOrCreate() (*model.ChristmasNewUserSupportRule, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChristmasNewUserSupportRule), nil
	}
}

func (c christmasNewUserSupportRuleDo) FindByPage(offset int, limit int) (result []*model.ChristmasNewUserSupportRule, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c christmasNewUserSupportRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c christmasNewUserSupportRuleDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c christmasNewUserSupportRuleDo) Delete(models ...*model.ChristmasNewUserSupportRule) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *christmasNewUserSupportRuleDo) withDO(do gen.Dao) *christmasNewUserSupportRuleDo {
	c.DO = *do.(*gen.DO)
	return c
}
