// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/common/zorm/model"
)

func newWinAgentUserReport(db *gorm.DB, opts ...gen.DOOption) winAgentUserReport {
	_winAgentUserReport := winAgentUserReport{}

	_winAgentUserReport.winAgentUserReportDo.UseDB(db, opts...)
	_winAgentUserReport.winAgentUserReportDo.UseModel(&model.WinAgentUserReport{})

	tableName := _winAgentUserReport.winAgentUserReportDo.TableName()
	_winAgentUserReport.ALL = field.NewAsterisk(tableName)
	_winAgentUserReport.ID = field.NewInt64(tableName, "id")
	_winAgentUserReport.UID = field.NewInt64(tableName, "uid")
	_winAgentUserReport.Username = field.NewString(tableName, "username")
	_winAgentUserReport.SupUid1 = field.NewInt64(tableName, "sup_uid_1")
	_winAgentUserReport.SupUsername1 = field.NewString(tableName, "sup_username_1")
	_winAgentUserReport.Coin = field.NewField(tableName, "coin")
	_winAgentUserReport.Status = field.NewInt64(tableName, "status")
	_winAgentUserReport.LevelID = field.NewInt64(tableName, "level_id")
	_winAgentUserReport.LevelText = field.NewString(tableName, "level_text")
	_winAgentUserReport.TeamNums = field.NewInt64(tableName, "team_nums")
	_winAgentUserReport.DirectNums = field.NewInt64(tableName, "direct_nums")
	_winAgentUserReport.CoinCommission = field.NewField(tableName, "coin_commission")
	_winAgentUserReport.CoinBalance = field.NewField(tableName, "coin_balance")
	_winAgentUserReport.CoinDeposit = field.NewField(tableName, "coin_deposit")
	_winAgentUserReport.FirstDepositSuccCnt = field.NewInt64(tableName, "first_deposit_succ_cnt")
	_winAgentUserReport.FirstDepositSuccAmt = field.NewField(tableName, "first_deposit_succ_amt")
	_winAgentUserReport.DepositSuccCnt = field.NewInt64(tableName, "deposit_succ_cnt")
	_winAgentUserReport.DepositSuccUserCnt = field.NewInt64(tableName, "deposit_succ_user_cnt")
	_winAgentUserReport.CoinWithdrawal = field.NewField(tableName, "coin_withdrawal")
	_winAgentUserReport.WithdrawSuccCnt = field.NewInt64(tableName, "withdraw_succ_cnt")
	_winAgentUserReport.WithdrawSuccUserCnt = field.NewInt64(tableName, "withdraw_succ_user_cnt")
	_winAgentUserReport.CoinWithdrawalReally = field.NewField(tableName, "coin_withdrawal_really")
	_winAgentUserReport.CoinAdjust = field.NewField(tableName, "coin_adjust")
	_winAgentUserReport.CoinBet = field.NewField(tableName, "coin_bet")
	_winAgentUserReport.CoinBetBonus = field.NewField(tableName, "coin_bet_bonus")
	_winAgentUserReport.CoinProfit = field.NewField(tableName, "coin_profit")
	_winAgentUserReport.OperatorName = field.NewString(tableName, "operator_name")
	_winAgentUserReport.RegisterAt = field.NewInt64(tableName, "register_at")
	_winAgentUserReport.CreatedAt = field.NewInt64(tableName, "created_at")
	_winAgentUserReport.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_winAgentUserReport.fillFieldMap()

	return _winAgentUserReport
}

// winAgentUserReport 代理专属域名
type winAgentUserReport struct {
	winAgentUserReportDo

	ALL                  field.Asterisk
	ID                   field.Int64
	UID                  field.Int64 // 代理ID
	Username             field.String
	SupUid1              field.Int64  // 上1级代理
	SupUsername1         field.String // 上1级代理
	Coin                 field.Field  // 账户余额
	Status               field.Int64  // 账号状态
	LevelID              field.Int64  // 等级序号
	LevelText            field.String // 等级名称
	TeamNums             field.Int64  // 团队人数
	DirectNums           field.Int64  // 直属人数
	CoinCommission       field.Field  // 累计返佣
	CoinBalance          field.Field  // 团队总余额
	CoinDeposit          field.Field  // 团队总充值
	FirstDepositSuccCnt  field.Int64  // 团队首存人数
	FirstDepositSuccAmt  field.Field  // 团队首存金额
	DepositSuccCnt       field.Int64  // 团队总充值次数
	DepositSuccUserCnt   field.Int64  // 团队总充值人数
	CoinWithdrawal       field.Field  // 团队总提现
	WithdrawSuccCnt      field.Int64  // 团队总提现次数
	WithdrawSuccUserCnt  field.Int64  // 团队总提现人数
	CoinWithdrawalReally field.Field  // 团队实际到账
	CoinAdjust           field.Field  // 团队总调账
	CoinBet              field.Field  // 团队总投注
	CoinBetBonus         field.Field  // 团队总派彩
	CoinProfit           field.Field  // 团队总投注盈亏
	OperatorName         field.String // 操作人
	RegisterAt           field.Int64  // 注册时间
	CreatedAt            field.Int64
	UpdatedAt            field.Int64

	fieldMap map[string]field.Expr
}

func (w winAgentUserReport) Table(newTableName string) *winAgentUserReport {
	w.winAgentUserReportDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winAgentUserReport) As(alias string) *winAgentUserReport {
	w.winAgentUserReportDo.DO = *(w.winAgentUserReportDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winAgentUserReport) updateTableName(table string) *winAgentUserReport {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.UID = field.NewInt64(table, "uid")
	w.Username = field.NewString(table, "username")
	w.SupUid1 = field.NewInt64(table, "sup_uid_1")
	w.SupUsername1 = field.NewString(table, "sup_username_1")
	w.Coin = field.NewField(table, "coin")
	w.Status = field.NewInt64(table, "status")
	w.LevelID = field.NewInt64(table, "level_id")
	w.LevelText = field.NewString(table, "level_text")
	w.TeamNums = field.NewInt64(table, "team_nums")
	w.DirectNums = field.NewInt64(table, "direct_nums")
	w.CoinCommission = field.NewField(table, "coin_commission")
	w.CoinBalance = field.NewField(table, "coin_balance")
	w.CoinDeposit = field.NewField(table, "coin_deposit")
	w.FirstDepositSuccCnt = field.NewInt64(table, "first_deposit_succ_cnt")
	w.FirstDepositSuccAmt = field.NewField(table, "first_deposit_succ_amt")
	w.DepositSuccCnt = field.NewInt64(table, "deposit_succ_cnt")
	w.DepositSuccUserCnt = field.NewInt64(table, "deposit_succ_user_cnt")
	w.CoinWithdrawal = field.NewField(table, "coin_withdrawal")
	w.WithdrawSuccCnt = field.NewInt64(table, "withdraw_succ_cnt")
	w.WithdrawSuccUserCnt = field.NewInt64(table, "withdraw_succ_user_cnt")
	w.CoinWithdrawalReally = field.NewField(table, "coin_withdrawal_really")
	w.CoinAdjust = field.NewField(table, "coin_adjust")
	w.CoinBet = field.NewField(table, "coin_bet")
	w.CoinBetBonus = field.NewField(table, "coin_bet_bonus")
	w.CoinProfit = field.NewField(table, "coin_profit")
	w.OperatorName = field.NewString(table, "operator_name")
	w.RegisterAt = field.NewInt64(table, "register_at")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *winAgentUserReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winAgentUserReport) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 30)
	w.fieldMap["id"] = w.ID
	w.fieldMap["uid"] = w.UID
	w.fieldMap["username"] = w.Username
	w.fieldMap["sup_uid_1"] = w.SupUid1
	w.fieldMap["sup_username_1"] = w.SupUsername1
	w.fieldMap["coin"] = w.Coin
	w.fieldMap["status"] = w.Status
	w.fieldMap["level_id"] = w.LevelID
	w.fieldMap["level_text"] = w.LevelText
	w.fieldMap["team_nums"] = w.TeamNums
	w.fieldMap["direct_nums"] = w.DirectNums
	w.fieldMap["coin_commission"] = w.CoinCommission
	w.fieldMap["coin_balance"] = w.CoinBalance
	w.fieldMap["coin_deposit"] = w.CoinDeposit
	w.fieldMap["first_deposit_succ_cnt"] = w.FirstDepositSuccCnt
	w.fieldMap["first_deposit_succ_amt"] = w.FirstDepositSuccAmt
	w.fieldMap["deposit_succ_cnt"] = w.DepositSuccCnt
	w.fieldMap["deposit_succ_user_cnt"] = w.DepositSuccUserCnt
	w.fieldMap["coin_withdrawal"] = w.CoinWithdrawal
	w.fieldMap["withdraw_succ_cnt"] = w.WithdrawSuccCnt
	w.fieldMap["withdraw_succ_user_cnt"] = w.WithdrawSuccUserCnt
	w.fieldMap["coin_withdrawal_really"] = w.CoinWithdrawalReally
	w.fieldMap["coin_adjust"] = w.CoinAdjust
	w.fieldMap["coin_bet"] = w.CoinBet
	w.fieldMap["coin_bet_bonus"] = w.CoinBetBonus
	w.fieldMap["coin_profit"] = w.CoinProfit
	w.fieldMap["operator_name"] = w.OperatorName
	w.fieldMap["register_at"] = w.RegisterAt
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w winAgentUserReport) clone(db *gorm.DB) winAgentUserReport {
	w.winAgentUserReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winAgentUserReport) replaceDB(db *gorm.DB) winAgentUserReport {
	w.winAgentUserReportDo.ReplaceDB(db)
	return w
}

type winAgentUserReportDo struct{ gen.DO }

type IWinAgentUserReportDo interface {
	gen.SubQuery
	Debug() IWinAgentUserReportDo
	WithContext(ctx context.Context) IWinAgentUserReportDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinAgentUserReportDo
	WriteDB() IWinAgentUserReportDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinAgentUserReportDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinAgentUserReportDo
	Not(conds ...gen.Condition) IWinAgentUserReportDo
	Or(conds ...gen.Condition) IWinAgentUserReportDo
	Select(conds ...field.Expr) IWinAgentUserReportDo
	Where(conds ...gen.Condition) IWinAgentUserReportDo
	Order(conds ...field.Expr) IWinAgentUserReportDo
	Distinct(cols ...field.Expr) IWinAgentUserReportDo
	Omit(cols ...field.Expr) IWinAgentUserReportDo
	Join(table schema.Tabler, on ...field.Expr) IWinAgentUserReportDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinAgentUserReportDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinAgentUserReportDo
	Group(cols ...field.Expr) IWinAgentUserReportDo
	Having(conds ...gen.Condition) IWinAgentUserReportDo
	Limit(limit int) IWinAgentUserReportDo
	Offset(offset int) IWinAgentUserReportDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinAgentUserReportDo
	Unscoped() IWinAgentUserReportDo
	Create(values ...*model.WinAgentUserReport) error
	CreateInBatches(values []*model.WinAgentUserReport, batchSize int) error
	Save(values ...*model.WinAgentUserReport) error
	First() (*model.WinAgentUserReport, error)
	Take() (*model.WinAgentUserReport, error)
	Last() (*model.WinAgentUserReport, error)
	Find() ([]*model.WinAgentUserReport, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinAgentUserReport, err error)
	FindInBatches(result *[]*model.WinAgentUserReport, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinAgentUserReport) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinAgentUserReportDo
	Assign(attrs ...field.AssignExpr) IWinAgentUserReportDo
	Joins(fields ...field.RelationField) IWinAgentUserReportDo
	Preload(fields ...field.RelationField) IWinAgentUserReportDo
	FirstOrInit() (*model.WinAgentUserReport, error)
	FirstOrCreate() (*model.WinAgentUserReport, error)
	FindByPage(offset int, limit int) (result []*model.WinAgentUserReport, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinAgentUserReportDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winAgentUserReportDo) Debug() IWinAgentUserReportDo {
	return w.withDO(w.DO.Debug())
}

func (w winAgentUserReportDo) WithContext(ctx context.Context) IWinAgentUserReportDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winAgentUserReportDo) ReadDB() IWinAgentUserReportDo {
	return w.Clauses(dbresolver.Read)
}

func (w winAgentUserReportDo) WriteDB() IWinAgentUserReportDo {
	return w.Clauses(dbresolver.Write)
}

func (w winAgentUserReportDo) Session(config *gorm.Session) IWinAgentUserReportDo {
	return w.withDO(w.DO.Session(config))
}

func (w winAgentUserReportDo) Clauses(conds ...clause.Expression) IWinAgentUserReportDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winAgentUserReportDo) Returning(value interface{}, columns ...string) IWinAgentUserReportDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winAgentUserReportDo) Not(conds ...gen.Condition) IWinAgentUserReportDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winAgentUserReportDo) Or(conds ...gen.Condition) IWinAgentUserReportDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winAgentUserReportDo) Select(conds ...field.Expr) IWinAgentUserReportDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winAgentUserReportDo) Where(conds ...gen.Condition) IWinAgentUserReportDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winAgentUserReportDo) Order(conds ...field.Expr) IWinAgentUserReportDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winAgentUserReportDo) Distinct(cols ...field.Expr) IWinAgentUserReportDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winAgentUserReportDo) Omit(cols ...field.Expr) IWinAgentUserReportDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winAgentUserReportDo) Join(table schema.Tabler, on ...field.Expr) IWinAgentUserReportDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winAgentUserReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinAgentUserReportDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winAgentUserReportDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinAgentUserReportDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winAgentUserReportDo) Group(cols ...field.Expr) IWinAgentUserReportDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winAgentUserReportDo) Having(conds ...gen.Condition) IWinAgentUserReportDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winAgentUserReportDo) Limit(limit int) IWinAgentUserReportDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winAgentUserReportDo) Offset(offset int) IWinAgentUserReportDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winAgentUserReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinAgentUserReportDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winAgentUserReportDo) Unscoped() IWinAgentUserReportDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winAgentUserReportDo) Create(values ...*model.WinAgentUserReport) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winAgentUserReportDo) CreateInBatches(values []*model.WinAgentUserReport, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winAgentUserReportDo) Save(values ...*model.WinAgentUserReport) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winAgentUserReportDo) First() (*model.WinAgentUserReport, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAgentUserReport), nil
	}
}

func (w winAgentUserReportDo) Take() (*model.WinAgentUserReport, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAgentUserReport), nil
	}
}

func (w winAgentUserReportDo) Last() (*model.WinAgentUserReport, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAgentUserReport), nil
	}
}

func (w winAgentUserReportDo) Find() ([]*model.WinAgentUserReport, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinAgentUserReport), err
}

func (w winAgentUserReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinAgentUserReport, err error) {
	buf := make([]*model.WinAgentUserReport, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winAgentUserReportDo) FindInBatches(result *[]*model.WinAgentUserReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winAgentUserReportDo) Attrs(attrs ...field.AssignExpr) IWinAgentUserReportDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winAgentUserReportDo) Assign(attrs ...field.AssignExpr) IWinAgentUserReportDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winAgentUserReportDo) Joins(fields ...field.RelationField) IWinAgentUserReportDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winAgentUserReportDo) Preload(fields ...field.RelationField) IWinAgentUserReportDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winAgentUserReportDo) FirstOrInit() (*model.WinAgentUserReport, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAgentUserReport), nil
	}
}

func (w winAgentUserReportDo) FirstOrCreate() (*model.WinAgentUserReport, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAgentUserReport), nil
	}
}

func (w winAgentUserReportDo) FindByPage(offset int, limit int) (result []*model.WinAgentUserReport, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winAgentUserReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winAgentUserReportDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winAgentUserReportDo) Delete(models ...*model.WinAgentUserReport) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winAgentUserReportDo) withDO(do gen.Dao) *winAgentUserReportDo {
	w.DO = *do.(*gen.DO)
	return w
}
